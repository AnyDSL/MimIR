fn fib(n : int, yield : fn(int, fn()), ret : fn()) {
    fn loop(n : int, cur : int, prev : int) {
        if (n != 0)
            yield(cur, || { loop(n-1, cur + prev, cur); });
        else
            ret();
    }
    loop(n, 1, 0);
}

fn main() -> int {
    result : int = 0;
    for (i : int = 15000000; i > 0; --i) {
        fib(40,
            |f : int| -> void { result = result % 4 + f; },
            || { continue; }
        );
    }
    return result;
}
