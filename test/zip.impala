fn primes(n : int, yield : fn(int)) {
    if (n < 2) 
        yield(2);

    fn loop(i : int) {
        fn inner_loop(j : int) {
            if (j < i) {
                if (i % j == 0)
                    loop(i + 1);
                else
                    inner_loop(j + 1);
            }
            yield(i); 
        }
        inner_loop(2);
    }
    loop(n);
}

fn count(n : int, yield : fn(int)) {
    yield(n+1);
}

fn zip(zipper : fn(int, int) -> int, generate1 : fn(int, fn(int)), generate2 : fn(int, fn(int)), yield : fn(int, fn())) {
    fn loop(i : int) {
        yield(zipper(generate1(i), generate2(i)), || { loop(i + 1); });
    }
    loop(0);
}

fn main(n : int, ret : fn(int)) {
    fn zipper(a : int, b : int) -> int { return a + b; }
    zip(zipper, primes, count, |i : int, next : fn()| {
        if (i > 24)
            ret(i);
        next();
    });
}
