fn seq(a: int, b: int) -> (int, fn(int, fn(int, fn()), fn())) {
    fn stream(i: int, yield: fn(int, fn()), out: fn()) {
        if (i <= b)
            yield(i, || { stream(i+1, yield, out); });
        out();
    }
    return (a, stream);
}

fn fold(f: fn(int, int) -> int, z: int, stream: (int, fn(int, fn(int, fn()), fn())), ret: fn(int)) {
    var res = z;
    var a = stream[0];
    var s = stream[1];
    s(a, |i: int, next: fn()| {
            res = f(res, i);
            next();
        }, || { ret(res); });
}

fn main() -> int {
    return fold(|a: int, b: int| -> int { return a + b; }, 0, seq(0, 100));
}
