fn count<T>(n : int, t : T, yield : fn(int, T, fn(T)), ret : fn(T)) {
    yield(1, t, lambda(t : T) {
        fn loop(i : int, t : T) {
            if (i < n)
                yield(i, t, lambda(t : T) { loop(i+1, t); });
            else
                ret(t);
        }
        loop(2, t);
    });
}

fn main(main_ret : fn(int)) {
    count(100, 0,
        lambda(p : int, result : int, next : fn(int)) {
            next(result + p);
        },
        lambda(result : int) {
            main_ret(result);
        }
    );
}
