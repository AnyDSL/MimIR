fn genericRange<T>(nextElem : fn(int, fn(T)),
                      c : fn(T, fn()),
                      count : int,
                      next : fn()) {
  fn innerRange(i : int) {
    if(i < count) {
      c(nextElem(i), || {
          innerRange(++i);
        });
    } else 
      next();
  }
  innerRange(0);
}

fn intRange(start : int,
             count : int,
             iter : fn(int, fn()),
             next : fn()) {
  genericRange(
    |i : int, c : fn(int)| {
      c(i);
    }, iter, count, next);
}

fn main(p : fn(int)){
  // use int range
  // for each(int e in range(2, 10)) { ... }
  intRange(2, 10,
    |e : int, c : fn()| {
      // body
      c();
    },
    || {
      p(42);
    } );
}
