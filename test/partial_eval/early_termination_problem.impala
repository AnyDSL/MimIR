fn range(a : int, b : int, yield : fn(int, fn())) -> void {
    let mut i: int = a;
    while (i < b)
        yield(i++, || { continue; });
}

fn f(x: int, y: int) -> int {
    let mut result = 0;
    for (let mut i = 0; i < x; ++i) {
        result += i;
        if (x == i)
            break;
        fn f() { continue; }
        @f();
    }
    return result;
}

fn main(x: int, y: int) -> int {
    return @f(x, y);
}
