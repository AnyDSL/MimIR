extern "C" {

}


extern fn brusselator_f(x: f64, y: f64, t: f64) -> f64 {
    // 1.0/(((i+j)*(i+j+1)/2+i+1) as f64)
    let eq1 = ((x-0.3)*(x-0.3) + (y-0.6)*(y-0.6)) <= 0.01;
    let eq2 = t>=1.1;
    if (eq1 && eq2) {
        5.0
    } else {
        0.0
    }
}


extern fn range(a: int, b: int, body: fn(int) -> ()) -> () {
    if a < b {
        body(a);
        range(a+1, b, body)
    }
}

extern fn RANGE_cps(min:f64, max:f64, i:f64, N:f64) -> f64 {
    let h = (max-min)/(N-1.0);
    let x = i*h+min;
    x
}


// &mut [f64]
extern fn brusselator_2d_loop(du: &mut[f64], dv: &mut[f64], u: &[f64], v: &[f64], p:[f64*3], t: f64) -> () {
    let N = 32;
    let N_f64 = 32.0;
    let xmin = 0.0;
    let xmax = 1.0;
    let ymin = 0.0;
    let ymax = 1.0;


    let A = p(0);
    let B = p(1);
    let dx = 1.0 / ((N-1) as f64);
    let alpha = p(2)/(dx*dx);

    for i in range(0, N) {
        let x = RANGE_cps(xmin,xmax, (i as f64), N_f64);

        let ip1 = (if i == N-1 { i } else { i+1 });
        let im1 = (if i == 0 { i } else { i-1 });

        for j in range(0, N) {
            let y = RANGE_cps(ymin,ymax, (j as f64), N_f64);

            let jp1 = (if j == N-1 { j } else { j+1 });
            let jm1 = (if j == 0 { j } else { j-1 });
            
            let u2v = u(N*i+j)*u(N*i+j)*v(N*i+j);

            du(N*i+j) = alpha*(u(N*im1+j) + u(N*ip1+j) + u(N*i+jp1) + u(N*i+jm1) - 4.0*u(N*i+j)) + B + u2v - (A+1.0)* u(N*i+j) + brusselator_f(x,y,t);
            dv(N*i+j) = alpha*(v(N*im1+j) + v(N*ip1+j) + v(N*i+jp1) + v(N*i+jm1) - 4.0*v(N*i+j)) + A *u(N*i+j) - u2v;

        }
    }


    ()
}



// void brusselator_2d_loop(double* du, double* dv, const double* u, const double* v, const double* p, double t) {
//     double A     = p[0];
//     double B     = p[1];
//     double alpha = p[2];
//     double dx    = (double)1 / (N - 1);

//     alpha = alpha / (dx * dx);

//     for (int i = 0; i < N; i++) {
//         for (int j = 0; j < N; j++) {
//             double x = RANGE(xmin, xmax, i, N);
//             double y = RANGE(ymin, ymax, j, N);

//             unsigned ip1 = (i == N - 1) ? i : (i + 1);
//             unsigned im1 = (i == 0) ? i : (i - 1);

//             unsigned jp1 = (j == N - 1) ? j : (j + 1);
//             unsigned jm1 = (j == 0) ? j : (j - 1);

//             double u2v = u[N * i + j] * u[N * i + j] * v[N * i + j];

//             (du)[N * i + j] = alpha * ((u)[N * im1 + j] + (u)[N * ip1 + j] + (u)[N * i + jp1] + (u)[N * i + jm1] -
//                                        4 * (u)[N * i + j]) +
//                               B + u2v - (A + 1) * (u)[N * i + j] + brusselator_f(x, y, t);

//             (dv)[N * i + j] = alpha * ((v)[N * im1 + j] + (v)[N * ip1 + j] + (v)[N * i + jp1] + (v)[N * i + jm1] -
//                                        4 * (v)[N * i + j]) +
//                               A * (u)[N * i + j] - u2v;
//         }
//     }
// }

// double foobar_exec(const double* p,
//                    const std::array<double, N * N> x1,
//                    const std::array<double, N * N> x2,
//                    const std::array<double, N * N> adjoint1,
//                    const std::array<double, N * N> adjoint2,
//                    double t) {
//     double dp[3] = {0.};

//     // std::array<double, 2 * N* N> dx = {0.};

//     std::array<double, N* N> dadjoint_inp1 = adjoint1;
//     std::array<double, N* N> dadjoint_inp2 = adjoint2;

//     // state_type dxdu;

//     brusselator_2d_loop(dadjoint_inp1.data(), // du
//                         dadjoint_inp2.data(), // dv
//                         x1.data(),            // u
//                         x2.data(),            // v
//                         p,                    // p
//                         t                     // t
//     );

//     // __enzyme_autodiff<void>(
//     // brusselator_2d_loop,
//     // //                            enzyme_dup, dxdu.c_array(), dadjoint_inp.c_array(),
//     // //                            enzyme_dup, dxdu.c_array() + N * N, dadjoint_inp.c_array() + N * N,
//     // enzyme_dupnoneed, nullptr, dadjoint_inp.data(), enzyme_dupnoneed, nullptr, dadjoint_inp.data() + N * N,
//     // enzyme_dup, x.data(), dx.data(), enzyme_dup, x.data() + N * N, dx.data() + N * N, enzyme_dup, p, dp,
//     // enzyme_const, t);

//     return dadjoint_inp1[0];
// }
