extern "C" {
    fn sin(f64) -> (f64);
}

static M_PI = 3.14159265358979323846;

// https://github.com/EnzymeAD/Enzyme/blob/main/enzyme/benchmarks/ReverseMode/fft/fft.h
// https://github.com/EnzymeAD/Enzyme/blob/main/enzyme/benchmarks/ReverseMode/fft/fft.cpp


extern fn range(a: int, b: int, body: fn(int) -> ()) -> () {
    if a < b {
        body(a);
        range(a+1, b, body)
    }
}


extern fn rangeStep(a: int, b: int, step: int, body: fn(int) -> ()) -> () {
    if a < b {
        body(a);
        range(a+step, b, body)
    }
}


fn swap (a: &mut double, b: &mut double) -> () {
    let temp = *a;
    *a = *b;
    *b = temp;
}

extern fn scramble(data: &mut [f64], N:int) -> () {
    let mut j = 1;
    for i in rangeStep(1,2*N,2) {
        if(j>i) {
            // let t = &data(i);
            swap(&mut data(j-1), &mut data(i-1));
            swap(&mut data(j), &mut data(i));
        }
        let mut m = N;
        while(m>=2 && j>m) {
            j -= m;
            m >>= 1;
        }
        j += m;
    }
}

extern fn rescale(data: &mut [f64], N:int) -> () {
    let scale = 1.0/N as f64;
    for i in range(0,2*N) {
        data(i) *= scale;
    }
}



extern fn recursiveApply(data: &mut [f64], iSign: int, N: int) -> () {
    if N == 1 {
        return ()
    }
    recursiveApply(data, iSign, N/2);
    recursiveApply((&mut (data(N))) as (&mut [f64]), iSign, N/2);

    let mut wtemp = iSign as f64 * sin(M_PI/N as f64);
    let mut wpi = -iSign as f64 * sin(2.0*M_PI/N as f64);
    let mut wpr = -2.0*wtemp*wtemp;
    let mut wr = 1.0;
    let mut wi = 0.0;

    for i in rangeStep(0,N,2) {
        let iN = i+N;

        let tempr = data(iN)*wr - data(iN+1)*wi;
        let tempi = data(iN)*wi + data(iN+1)*wr;

        data(iN) = data(i)-tempr;
        data(iN+1) = data(i+1)-tempi;
        data(i) += tempr;
        data(i+1) += tempi;

        wtemp = wr;
        wr += wr*wpr - wi*wpi;
        wi += wi*wpr + wtemp*wpi;
    }
}




extern fn fft(data: &mut [f64], N:int) -> () {
    scramble(data,N);
    recursiveApply(data,1,N);
}

extern fn ifft(data: &mut [f64], N:int) -> () {
  scramble(data, N);
  recursiveApply(data,-1, N);
  rescale(data, N);
}


extern fn foobar(data: &mut [f64], len:int) -> () {
    fft(data,len);
    ifft(data,len);
}

extern fn foobar_and_gradient(len:int) -> f64 {
    let inp = ~[2*len: f64];
    for i in range(0, 2*len) {
        inp(i) = 2.0;
    }

    // TODO: call ad
    42.0
}



