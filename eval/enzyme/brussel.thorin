// RUN: rm -f %t.ll ; \
// RUN: %thorin -d affine %s --output-ll %t.ll -o - | FileCheck %s
// RUN: clang++ lit/clos/lib.cpp %t.ll -o %t -lc -Wno-override-module
// RUN: %t ; test $? -eq 0

.import affine;
.import mem;
.import core;

.let top = ⊤:.Nat;
.let _32 = 4294967296;
.let I32 = .Idx 4294967296;
.let R64 = %core.Real 64;
.let void_ptr = %mem.Ptr («⊤:.Nat; []», 0);
.let char_ptr = %mem.Ptr («⊤:.Nat; .Idx 256», 0);

// .cn printInteger [mem: %mem.M, val: I32, return : .Cn [%mem.M]];
// .cn printIntegerNL [mem: %mem.M, val: I32, return : .Cn [%mem.M]];
.cn print_newline [mem: %mem.M, return : .Cn [%mem.M]];
.cn sqrt [mem: %mem.M, x:R64, return : .Cn [%mem.M, R64]];
.cn time [mem: %mem.M, return : .Cn [%mem.M, void_ptr]];
.cn print_time_diff [mem: %mem.M, t1: void_ptr, t2: void_ptr, return : .Cn [%mem.M]];



.let N = 2:I32;//32
.let N_double = 2.0:R64;//32
.let xmin = 0.0:R64;
.let xmax = 1.0:R64;
.let ymin = 0.0:R64;
.let ymax = 1.0:R64;
// .let size = %core.wrap.mul (0:.Nat, 4294967296:.Nat) (N, N);
.let size = 4;//1024

.lam RANGE ![[min: R64, max: R64, i : R64, N:R64]] -> R64 = {
    .let r0 = %core.rop.sub (0:.Nat, 64:.Nat) (max, min);
    .let N1 = %core.rop.sub (0:.Nat, 64:.Nat) (N, 1.0:R64);
    .let r1 = %core.rop.div (0:.Nat, 64:.Nat) (r0, N1);
    .let r2 = %core.rop.mul (0:.Nat, 64:.Nat) (r1, i);
    .let r3 = %core.rop.add (0:.Nat, 64:.Nat) (r2, min);
    r3
};

// .cn RANGE_cps [[min: R64, max: R64, i : R64, N:R64], return : .Cn [R64]] = {
//     .let r0 = %core.rop.sub (0:.Nat, 64:.Nat) (max, min);
//     .let N1 = %core.rop.sub (0:.Nat, 64:.Nat) (N, 1.0:R64);
//     .let r1 = %core.rop.div (0:.Nat, 64:.Nat) (r0, N1);
//     .let r2 = %core.rop.mul (0:.Nat, 64:.Nat) (r1, i);
//     .let r3 = %core.rop.add (0:.Nat, 64:.Nat) (r2, min);
//     return r3
// };

.cn init_brusselator [
        mem: %mem.M,
        u  : %mem.Ptr (<<size; R64>>, 0:.Nat),
        v  : %mem.Ptr (<<size; R64>>, 0:.Nat)
    ,
    ret: .Cn [%mem.M]
] = {
    .cn loop_body_1 [i:I32, mem1:%mem.M, yield1: .Cn [%mem.M]] = {
        .let i_double = %core.conv.u2r (64, _32) i;
        .let x = RANGE (xmin,xmax,i_double,N_double);
        .let x1=%core.rop.sub (0, 64) (1.0:R64, x);
        .let xx1 = %core.rop.mul (0, 64) (x, x1);
        .cn loop_body_2 [j:I32, mem2:%mem.M, yield2: .Cn [%mem.M]] = {
            .let j_double = %core.conv.u2r (64, _32) j;
            .let y = RANGE (ymin,ymax,j_double,N_double);
            .let y1=%core.rop.sub (0, 64) (1.0:R64, y);
            .let yy1 = %core.rop.mul (0, 64) (y, y1);

            .let index_part = %core.wrap.mul (0:.Nat, 4294967296:.Nat) (i, N);
            .let index_int = %core.wrap.add (0:.Nat, 4294967296:.Nat) (index_part, j);
            // .let index_idx = %core.bitcast (.Idx size, I32) index_int;

            // .let u_ptr = %mem.lea (size, <size; R64>, 0) (u, index_idx);
            // .let v_ptr = %mem.lea (size, <size; R64>, 0) (v, index_idx);
            // TODO: top should not be necessary here. But Idx 1024 can not be emitted as llvm
            .let u_ptr = %mem.lea (top, <top; R64>, 0) (u, index_int);
            .let v_ptr = %mem.lea (top, <top; R64>, 0) (v, index_int);


            .cn cont_sqrtY [mem3:%mem.M, sqrtY:R64] = {
                .cn cont_sqrtX [mem4:%mem.M, sqrtX:R64] = {
                    .let x_v = 
                        %core.rop.mul (0, 64) (
                            22.0:R64,
                            %core.rop.mul (0, 64) (
                                yy1,
                                sqrtY
                            )
                        );
                    .let y_v = 
                        %core.rop.mul (0, 64) (
                            27.0:R64,
                            %core.rop.mul (0, 64) (
                                xx1,
                                sqrtX
                            )
                        );
                    .let mem4_1 = mem4;
                    .let mem4_2 = %mem.store (R64, 0) (mem4_1, u_ptr, y_v);
                    .let mem4_3 = %mem.store (R64, 0) (mem4_2, u_ptr, y_v);
                    yield2 mem4_3
                };
                sqrt(mem3, xx1, cont_sqrtX)
            };
            sqrt(mem2, yy1, cont_sqrtY)
        };

        %affine.For (_32, 1, (%mem.M))
        (
            0:I32,N, 1:I32, (mem1),
            loop_body_2,
            yield1
        )
    };

    %affine.For (_32, 1, (%mem.M))
    (
        0:I32,N, 1:I32, (mem),
        loop_body_1,
        ret
    )
};



.cn RANGE_cps !_150488::[mem_150494: %mem.M, min_150545: %core.Real 64, max_150592: %core.Real 64, i_150634: %core.Real 64, N_150676: %core.Real 64, return_150726: .Cn [%mem.M, %core.Real 64]] = {
    .let _150811: %core.Real 64 = %core.rop.sub (0, 64) (max_150592, min_150545);
    .let _150896: %core.Real 64 = %core.rop.sub (0, 64) (N_150676, 4607182418800017408:(%core.Real 64));
    .let _150908: %core.Real 64 = %core.rop.div (0, 64) (_150811, _150896);
    .let _150990: %core.Real 64 = %core.rop.mul (0, 64) (i_150634, _150908);
    .let _151002: %core.Real 64 = %core.rop.add (0, 64) (min_150545, _150990);
    return_150726 (mem_150494, _151002)
};
.cn range _149647::[mem_149653: %mem.M, a_149695: .Idx 4294967296, b_149737: .Idx 4294967296, body_149786: .Cn [%mem.M, .Idx 4294967296, .Cn %mem.M], return_149836: .Cn %mem.M]@(0:(.Idx 2)) = {
    .cn if_join_149984 _150002::[mem_150008: %mem.M, _150434: []] = {
        return_149836 mem_150008
    };
    .cn if_else_149932 _150386: %mem.M = {
        if_join_149984 (_150386, ())
    };
    .cn range_cont_150318 _150336: %mem.M = {
        if_join_149984 (_150336, ())
    };
    .cn body_cont_150146 _150164: %mem.M = {
        .let _150267: .Idx 4294967296 = %core.wrap.add (1, 4294967296) (1:(.Idx 4294967296), a_149695);
        range (_150164, _150267, b_149737, body_149786, range_cont_150318)
    };
    .cn if_thenR_149886 _150096: %mem.M = {
        body_149786 (_150096, a_149695, body_cont_150146)
    };
    .let _150055: .Idx 2 = %core.icmp.xYgLe 4294967296 (a_149695, b_149737);
    (if_else_149932, if_thenR_149886)#_150055 mem_149653
};
// TODO: can not be external even if it is the identity function
.cn brusselator_f _148263::[mem_148269: %mem.M, x_148311: %core.Real 64, y_148353: %core.Real 64, t_148395: %core.Real 64, return_148446: .Cn [%mem.M, %core.Real 64]] = {
    // return_148446 (mem_148269, 42:(%core.Real 64))
    .cn if_join_149273 _149291::[mem_149297: %mem.M, _149590: %core.Real 64] = {
        return_148446 _149291
    };
    .cn if_else_149223 _149504: %mem.M = {
        if_join_149273 (_149504, 0:(%core.Real 64))
    };
    .cn if_thenBf_149177 _149424: %mem.M = {
        if_join_149273 (_149424, 4617315517961601024:(%core.Real 64))
    };
    .cn and_t_149341 _149382: %mem.M = {
        .let _149129: .Idx 2 = %core.rcmp.uGlE (0, 64) (t_148395, 4607632778762754458:(%core.Real 64));
        ((if_else_149223, if_thenBf_149177)#_149129) _149382
        // if_thenBf_149177 _149382
    };
    .let _148644: %core.Real 64 = %core.rop.sub (0, 64) (x_148311, 4599075939470750515:(%core.Real 64));
    .let _148751: %core.Real 64 = %core.rop.mul (0, 64) ‹2; _148644›;
    .let _148871: %core.Real 64 = %core.rop.sub (0, 64) (y_148353, 4603579539098121011:(%core.Real 64));
    .let _148978: %core.Real 64 = %core.rop.mul (0, 64) ‹2; _148871›;
    .let _148990: %core.Real 64 = %core.rop.add (0, 64) (_148751, _148978);
    .let _149044: .Idx 2 = %core.rcmp.ugLE (0, 64) (_148990, 4576918229304087675:(%core.Real 64));
    // return_148446 (mem_148269, 42:(%core.Real 64))
    (if_else_149223, and_t_149341)#_149044 mem_148269
    // (if_else_149223, if_thenBf_149177)#_149044 mem_148269
};

// TODO: find out why this does code can not be emitted to 
// TODO: this function has problems with lamspec and .extern
.cn .extern brusselator_2d_loop _151060::[mem_151066: %mem.M, du_151113: %mem.Ptr («size; %core.Real 64», 0), dv_151159: %mem.Ptr («size; %core.Real 64», 0), u_151201: %mem.Ptr («size; %core.Real 64», 0), v_151243: %mem.Ptr («size; %core.Real 64», 0), p_151285::[_151772: %core.Real 64, _151853: %core.Real 64, _152176: %core.Real 64], t_151327: %core.Real 64, return_151377: .Cn %mem.M] = {
    .cn lambda_152386 _152404::[mem_152410: %mem.M, i_152452: .Idx 4294967296, continue_152505: .Cn %mem.M]@(0:(.Idx 2)) = {
        .cn break_153684 _153702: %mem.M = {
            continue_152505 _153702
        };
            // continue_152505 mem_152410
        .cn RANGE_cps_cont_152606 _152624::[mem_152630: %mem.M, RANGE_cps_152641: %core.Real 64] = {
            .cn if_join_152785 _152803::[mem_152809: %mem.M, _153156: .Idx 4294967296] = {
                .cn if_join_153299 _153317::[mem_153323: %mem.M, _153640: .Idx 4294967296] = {

                    .cn lambda_153786 _153804::[mem_153810: %mem.M, j_153852: .Idx 4294967296, continue_153904: .Cn %mem.M]@(0:(.Idx 2)) = {
                        // the break would cause llvm emitter issues
                        // break_153684 mem_153810
                        // continue works
                        // continue_153904 mem_153810

                        .cn RANGE_cps_cont_154004 _154022::[mem_154028: %mem.M, RANGE_cps_154039: %core.Real 64] = {
                            .cn if_join_154183 _154201::[mem_154207: %mem.M, _154554: .Idx 4294967296] = {
                                .cn if_join_154697 _154715::[mem1: %mem.M, _155038: .Idx 4294967296] = {
                                    .cn brusselator_f_cont_158280 _158298::[mem2: %mem.M, brusselator_f_158315: %core.Real 64] = {
                                //         .let _155231: .Idx 4294967296 = %core.wrap.mul (1, 4294967296) (32:(.Idx 4294967296), i_152452);
                                //         .let _155243: .Idx 4294967296 = %core.wrap.add (1, 4294967296) (j_153852, _155231);
                                //         .let _155267: .Idx ⊤:.Nat = %core.conv.u2u ‹2; ⊤:.Nat› _155243;
                                //         .let _156126: %mem.Ptr (%core.Real 64, 0) = %mem.lea (⊤:.Nat, ‹⊤:.Nat; %core.Real 64›, 0) (du_151113, _155267);
                                //         .let _155323: %mem.Ptr (%core.Real 64, 0) = %mem.lea (⊤:.Nat, ‹⊤:.Nat; %core.Real 64›, 0) (u_151201, _155267);
                                //         .let _155384: [%mem.M, %core.Real 64] = %mem.load (%core.Real 64, 0) (mem2, _155323);
                                //         .let _155628: [%mem.M, %core.Real 64] = %mem.load (%core.Real 64, 0) (_155384#0:(.Idx 2), _155323);
                                //         .let _155654: %core.Real 64 = %core.rop.mul (0, 64) (_155384#1:(.Idx 2), _155628#1:(.Idx 2));
                                //         .let _155835: %mem.Ptr (%core.Real 64, 0) = %mem.lea (⊤:.Nat, ‹⊤:.Nat; %core.Real 64›, 0) (v_151243, _155267);
                                //         .let _155887: [%mem.M, %core.Real 64] = %mem.load (%core.Real 64, 0) (_155628#0:(.Idx 2), _155835);
                                //         .let _155910: %core.Real 64 = %core.rop.mul (0, 64) (_155654, _155887#1:(.Idx 2));
                                //         .let _152240: %core.Real 64 = %core.rop.div (0, 64) (p_151285#2:(.Idx 3), 4562441663708960045:(%core.Real 64));
                                //         .let _156564: .Idx 4294967296 = %core.wrap.mul (1, 4294967296) (32:(.Idx 4294967296), _153640);
                                //         .let _156576: .Idx 4294967296 = %core.wrap.add (1, 4294967296) (j_153852, _156564);
                                //         .let _156597: .Idx ⊤:.Nat = %core.conv.u2u ‹2; ⊤:.Nat› _156576;
                                //         .let _156622: %mem.Ptr (%core.Real 64, 0) = %mem.lea (⊤:.Nat, ‹⊤:.Nat; %core.Real 64›, 0) (u_151201, _156597);
                                //         .let _156674: [%mem.M, %core.Real 64] = %mem.load (%core.Real 64, 0) (_155887#0:(.Idx 2), _156622);
                                //         .let _156808: .Idx 4294967296 = %core.wrap.mul (1, 4294967296) (32:(.Idx 4294967296), _153156);
                                //         .let _156820: .Idx 4294967296 = %core.wrap.add (1, 4294967296) (j_153852, _156808);
                                //         .let _156841: .Idx ⊤:.Nat = %core.conv.u2u ‹2; ⊤:.Nat› _156820;
                                //         .let _156866: %mem.Ptr (%core.Real 64, 0) = %mem.lea (⊤:.Nat, ‹⊤:.Nat; %core.Real 64›, 0) (u_151201, _156841);
                                //         .let _156918: [%mem.M, %core.Real 64] = %mem.load (%core.Real 64, 0) (_156674#0:(.Idx 2), _156866);
                                //         .let _156941: %core.Real 64 = %core.rop.add (0, 64) (_156674#1:(.Idx 2), _156918#1:(.Idx 2));
                                //         .let _157076: .Idx 4294967296 = %core.wrap.add (1, 4294967296) (_154554, _155231);
                                //         .let _157097: .Idx ⊤:.Nat = %core.conv.u2u ‹2; ⊤:.Nat› _157076;
                                //         .let _157122: %mem.Ptr (%core.Real 64, 0) = %mem.lea (⊤:.Nat, ‹⊤:.Nat; %core.Real 64›, 0) (u_151201, _157097);
                                //         .let _157174: [%mem.M, %core.Real 64] = %mem.load (%core.Real 64, 0) (_156918#0:(.Idx 2), _157122);
                                //         .let _157197: %core.Real 64 = %core.rop.add (0, 64) (_156941, _157174#1:(.Idx 2));
                                //         .let _157332: .Idx 4294967296 = %core.wrap.add (1, 4294967296) (_155038, _155231);
                                //         .let _157353: .Idx ⊤:.Nat = %core.conv.u2u ‹2; ⊤:.Nat› _157332;
                                //         .let _157378: %mem.Ptr (%core.Real 64, 0) = %mem.lea (⊤:.Nat, ‹⊤:.Nat; %core.Real 64›, 0) (u_151201, _157353);
                                //         .let _157430: [%mem.M, %core.Real 64] = %mem.load (%core.Real 64, 0) (_157174#0:(.Idx 2), _157378);
                                //         .let _157453: %core.Real 64 = %core.rop.add (0, 64) (_157197, _157430#1:(.Idx 2));
                                //         .let _157759: [%mem.M, %core.Real 64] = %mem.load (%core.Real 64, 0) (_157430#0:(.Idx 2), _155323);
                                //         .let _157782: %core.Real 64 = %core.rop.mul (0, 64) (4616189618054758400:(%core.Real 64), _157759#1:(.Idx 2));
                                //         .let _157794: %core.Real 64 = %core.rop.sub (0, 64) (_157453, _157782);
                                //         .let _157806: %core.Real 64 = %core.rop.mul (0, 64) (_152240, _157794);
                                //         .let _157818: %core.Real 64 = %core.rop.add (0, 64) (p_151285#1:(.Idx 3), _157806);
                                //         .let _157830: %core.Real 64 = %core.rop.add (0, 64) (_155910, _157818);
                                //         .let _157950: %core.Real 64 = %core.rop.add (0, 64) (4607182418800017408:(%core.Real 64), p_151285#0:(.Idx 3));
                                //         .let _158183: [%mem.M, %core.Real 64] = %mem.load (%core.Real 64, 0) (_157759#0:(.Idx 2), _155323);
                                //         .let _158206: %core.Real 64 = %core.rop.mul (0, 64) (_157950, _158183#1:(.Idx 2));
                                //         .let _158218: %core.Real 64 = %core.rop.sub (0, 64) (_157830, _158206);
                                //         .let _158328: %core.Real 64 = %core.rop.add (0, 64) (_158218, brusselator_f_158315);
                                //         .let _158385: %mem.M = %mem.store (%core.Real 64, 0) (_158183#0:(.Idx 2), _156126, _158328);
                                //         .let _159027: %mem.Ptr (%core.Real 64, 0) = %mem.lea (⊤:.Nat, ‹⊤:.Nat; %core.Real 64›, 0) (v_151243, _156597);
                                //         .let _159079: [%mem.M, %core.Real 64] = %mem.load (%core.Real 64, 0) (_158385, _159027);
                                //         .let _159271: %mem.Ptr (%core.Real 64, 0) = %mem.lea (⊤:.Nat, ‹⊤:.Nat; %core.Real 64›, 0) (v_151243, _156841);
                                //         .let _159323: [%mem.M, %core.Real 64] = %mem.load (%core.Real 64, 0) (_159079#0:(.Idx 2), _159271);
                                //         .let _159527: %mem.Ptr (%core.Real 64, 0) = %mem.lea (⊤:.Nat, ‹⊤:.Nat; %core.Real 64›, 0) (v_151243, _157097);
                                //         .let _159579: [%mem.M, %core.Real 64] = %mem.load (%core.Real 64, 0) (_159323#0:(.Idx 2), _159527);
                                //         .let _159783: %mem.Ptr (%core.Real 64, 0) = %mem.lea (⊤:.Nat, ‹⊤:.Nat; %core.Real 64›, 0) (v_151243, _157353);
                                //         .let _159835: [%mem.M, %core.Real 64] = %mem.load (%core.Real 64, 0) (_159579#0:(.Idx 2), _159783);
                                //         .let _160164: [%mem.M, %core.Real 64] = %mem.load (%core.Real 64, 0) (_159835#0:(.Idx 2), _155835);
                                //         .let _160479: [%mem.M, %core.Real 64] = %mem.load (%core.Real 64, 0) (_160164#0:(.Idx 2), _155323);
                                //         .let _158601: %mem.Ptr (%core.Real 64, 0) = %mem.lea (⊤:.Nat, ‹⊤:.Nat; %core.Real 64›, 0) (dv_151159, _155267);
                                //         .let _159346: %core.Real 64 = %core.rop.add (0, 64) (_159079#1:(.Idx 2), _159323#1:(.Idx 2));
                                //         .let _159602: %core.Real 64 = %core.rop.add (0, 64) (_159346, _159579#1:(.Idx 2));
                                //         .let _159858: %core.Real 64 = %core.rop.add (0, 64) (_159602, _159835#1:(.Idx 2));
                                //         .let _160187: %core.Real 64 = %core.rop.mul (0, 64) (4616189618054758400:(%core.Real 64), _160164#1:(.Idx 2));
                                //         .let _160199: %core.Real 64 = %core.rop.sub (0, 64) (_159858, _160187);
                                //         .let _160211: %core.Real 64 = %core.rop.mul (0, 64) (_152240, _160199);
                                //         .let _160503: %core.Real 64 = %core.rop.mul (0, 64) (p_151285#0:(.Idx 3), _160479#1:(.Idx 2));
                                //         .let _160515: %core.Real 64 = %core.rop.add (0, 64) (_160211, _160503);
                                //         .let _160527: %core.Real 64 = %core.rop.sub (0, 64) (_160515, _155910);
                                //         .let _160578: %mem.M = %mem.store (%core.Real 64, 0) (_160479#0:(.Idx 2), _158601, _160527);
                                //         continue_153904 _160578
                                        continue_153904 mem2
                                    };
                                    brusselator_f (mem1, RANGE_cps_152641, RANGE_cps_154039, t_151327, brusselator_f_cont_158280)
                                        // continue_153904 mem1
                                };
                                .cn if_else_154647 _154885: %mem.M = {
                                    .let _154991: .Idx 4294967296 = %core.wrap.add (1, 4294967296) (4294967295:(.Idx 4294967296), j_153852);
                                    if_join_154697 (_154885, _154991)
                                };
                                .cn if_thenB1_154601 _154843: %mem.M = {
                                    if_join_154697 (_154843, j_153852)
                                };
                                .let _154802: .Idx 2 = %core.icmp.xyglE 4294967296 (0:(.Idx 4294967296), j_153852);
                                (if_else_154647, if_thenB1_154601)#_154802 mem_154207

                                        // continue_153904 mem_154207
                            };
                            .cn if_else_154133 _154415: %mem.M = {
                                .let _154507: .Idx 4294967296 = %core.wrap.add (1, 4294967296) (1:(.Idx 4294967296), j_153852);
                                if_join_154183 (_154415, _154507)
                            };
                            .cn if_thenB2_154087 _154373: %mem.M = {
                                if_join_154183 (_154373, j_153852)
                            };
                            .let _154332: .Idx 2 = %core.icmp.xyglE 4294967296 (31:(.Idx 4294967296), j_153852);
                            (if_else_154133, if_thenB2_154087)#_154332 mem_154028


                                        // continue_153904 mem_154028
                        };

                        .let _153947: %core.Real 64 = %core.conv.s2r (64, 4294967296) j_153852;
                        // continue_153904 mem_153810
                        RANGE_cps (mem_153810, 0:(%core.Real 64), 4607182418800017408:(%core.Real 64), _153947, 4629700416936869888:(%core.Real 64), RANGE_cps_cont_154004)
                    };
                    range (mem_153323, 0:(.Idx 4294967296), 32:(.Idx 4294967296), lambda_153786, break_153684)

                    // break_153684 mem_153323
                };
                .cn if_else_153249 _153487: %mem.M = {
                    .let _153593: .Idx 4294967296 = %core.wrap.add (1, 4294967296) (4294967295:(.Idx 4294967296), i_152452);
                    if_join_153299 (_153487, _153593)
                };
                .cn if_thenB3_153203 _153445: %mem.M = {
                    if_join_153299 (_153445, i_152452)
                };
                .let _153404: .Idx 2 = %core.icmp.xyglE 4294967296 (0:(.Idx 4294967296), i_152452);
                (if_else_153249, if_thenB3_153203)#_153404 mem_152809
            };
            .cn if_else_152735 _153017: %mem.M = {
                .let _153109: .Idx 4294967296 = %core.wrap.add (1, 4294967296) (1:(.Idx 4294967296), i_152452);
                if_join_152785 (_153017, _153109)
            };
            .cn if_thenB4_152689 _152975: %mem.M = {
                if_join_152785 (_152975, i_152452)
            };
            .let _152934: .Idx 2 = %core.icmp.xyglE 4294967296 (31:(.Idx 4294967296), i_152452);
            (if_else_152735, if_thenB4_152689)#_152934 mem_152630
        };
        .let _152548: %core.Real 64 = %core.conv.s2r (64, 4294967296) i_152452;

        // return_151377 mem_152410
        RANGE_cps (mem_152410, 0:(%core.Real 64), 4607182418800017408:(%core.Real 64), _152548, 4629700416936869888:(%core.Real 64), RANGE_cps_cont_152606)
    };
    .cn break_152284 _152302: %mem.M = {
        return_151377 _152302
    };
        // return_151377 mem_151066
    range (mem_151066, 0:(.Idx 4294967296), 32:(.Idx 4294967296), lambda_152386, break_152284)
};












.cn .extern main [mem: %mem.M, argc: I32, argv : %mem.Ptr («⊤:.Nat; %mem.Ptr («⊤:.Nat; .Idx 256», 0:.Nat)», 0:.Nat), return : .Cn [%mem.M, I32]] = {
    .cn callback (mem: %mem.M) = {
        return (mem, 0:I32)
    };

    .cn cont_time_start [mem1:%mem.M, time_start:void_ptr] = {
        .let (mem2, x1) = %mem.alloc (<<size; R64>>, 0) (mem1);
        .let (mem3, x2) = %mem.alloc (<<size; R64>>, 0) (mem2);
        .let (mem4, adjoint1) = %mem.alloc (<<size; R64>>, 0) (mem3);
        .let (mem5, adjoint2) = %mem.alloc (<<size; R64>>, 0) (mem4);

        .cn cont_time_end [memB2:%mem.M, time_end:void_ptr] = {
            // print_newline(memB2,callback)
            print_time_diff(memB2,time_start,time_end,callback)
        };
        .cn cont2 [memB1:%mem.M] = {
            // .let t = 2.1:R64;
            // .let (memB2, time_end)  = time (memB1);
            // .let memB3 = print_newline (memB2);
            // callback memB1
            time (memB1, cont_time_end)
        };
        .cn cont1 [memA1:%mem.M] = {
            init_brusselator (memA1, adjoint1, adjoint2, cont2)
        };
        init_brusselator (mem5, x1, x2, cont1)
    };
    time (mem, cont_time_start)


    // callback (mem)
    // outer(mem, 1:i32, callback)
};
