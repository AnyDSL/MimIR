.import clos;
.import core;
.import mem;

.let R64 = %core.Real 64;
.let void_ptr = %mem.Ptr («⊤:.Nat; []», 0);
.cn sqrt [mem: %mem.M, x:R64, return : .Cn [%mem.M, R64]];
.cn time [mem: %mem.M, return : .Cn [%mem.M, void_ptr]];
.cn print_time_diff [mem: %mem.M, t1: void_ptr, t2: void_ptr, return : .Cn [%mem.M]];

.cn range_527151 _527180::[_527374: %mem.M, _527238: .Idx 4294967296, _527219: .Cn [%mem.M, .Idx 4294967296, .Cn %mem.M], _527184: .Cn %mem.M] @(0:(.Idx 2)) = {
    .cn if_else_149932_527179 [_150386_527194: %mem.M] @(0:(.Idx 2)) = {
        _527184 _150386_527194
    };
    .cn range_cont_150318_527318 [_150336_527329: %mem.M] @(0:(.Idx 2)) = {
        _527184 _150336_527329
    };
    .cn body_cont_150146_527255 [_150164_527272: %mem.M] @(0:(.Idx 2)) = {
        .let _527301: .Idx 4294967296 = %core.wrap.add (1, 4294967296) (1:(.Idx 4294967296), _527238);
        range_527151 (_150164_527272, _527301, _527219, %clos.clos.ret (.Cn %mem.M) range_cont_150318_527318)
    };
    .cn if_thenR_149886_527212 [_150096_527235: %mem.M] @(0:(.Idx 2)) = {
        _527219 (_150096_527235, _527238, %clos.clos.ret (.Cn %mem.M) body_cont_150146_527255)
    };
    .let _527370: .Idx 2 = %core.icmp.xYgLe 4294967296 (_527238, 32:(.Idx 4294967296));
    (if_else_149932_527179, if_thenR_149886_527212)#_527370 _527374
};
.cn .extern brusselator_2d_loop _151060_527382::[mem_151066_527386: %mem.M, %mem.Ptr («4; %core.Real 64», 0), %mem.Ptr («4; %core.Real 64», 0), %mem.Ptr («4; %core.Real 64», 0), %mem.Ptr («4; %core.Real 64», 0), «3; %core.Real 64», t_151327_527683: %core.Real 64, return_151377_527988: .Cn %mem.M] @(0:(.Idx 2)) = {
    .cn lambda_152386_527401 _152404_527805::[mem_152410_527983: %mem.M, i_152452_527807: .Idx 4294967296, continue_152505_527955: .Cn %mem.M] @(0:(.Idx 2)) = {
        .cn lambda_153786_527478 _153804_527585::[mem_153810_527946: %mem.M, j_153852_527867: .Idx 4294967296, continue_153904_527587: .Cn %mem.M] @(0:(.Idx 2)) = {
            .cn if_else_149223_527568 [_149504_527594: %mem.M] @(0:(.Idx 2)) = {
                continue_153904_527587 _149504_527594
            };
            .cn eta_if_else_149223_527561 [_527596: %mem.M] @(0:(.Idx 2)) = {
                if_else_149223_527568 _527596
            };
            .cn eta_if_else_149223_527626 [_527627: %mem.M] @(0:(.Idx 2)) = {
                if_else_149223_527568 _527627
            };
            .cn if_thenBf_149177_527641 [_149424_527652: %mem.M] @(0:(.Idx 2)) = {
                continue_153904_527587 _149424_527652
            };
            .cn and_t_149341_527614 [_149382_527701: %mem.M] @(0:(.Idx 2)) = {
                .let _527693: .Idx 2 = %core.rcmp.uGlE (0, 64) (t_151327_527683, 4607632778762754458:(%core.Real 64));
                (eta_if_else_149223_527626, if_thenBf_149177_527641)#_527693 _149382_527701
            };
            .cn if_join_154697_527540 [_527919: %mem.M] @(0:(.Idx 2)) = {
                .let _527808: %core.Real 64 = %core.conv.s2r (64, 4294967296) i_152452_527807;
                .let _527813: %core.Real 64 = %core.rop.mul (0, 64) (4584809698070499460:(%core.Real 64), _527808);
                .let _527818: %core.Real 64 = %core.rop.add (0, 64) (0:(%core.Real 64), _527813);
                .let _527828: %core.Real 64 = %core.rop.sub (0, 64) (_527818, 4599075939470750515:(%core.Real 64));
                .let _527842: %core.Real 64 = %core.rop.mul (0, 64) ‹2; _527828›;
                .let _527868: %core.Real 64 = %core.conv.s2r (64, 4294967296) j_153852_527867;
                .let _527873: %core.Real 64 = %core.rop.mul (0, 64) (4584809698070499460:(%core.Real 64), _527868);
                .let _527878: %core.Real 64 = %core.rop.add (0, 64) (0:(%core.Real 64), _527873);
                .let _527888: %core.Real 64 = %core.rop.sub (0, 64) (_527878, 4603579539098121011:(%core.Real 64));
                .let _527902: %core.Real 64 = %core.rop.mul (0, 64) ‹2; _527888›;
                .let _527907: %core.Real 64 = %core.rop.add (0, 64) (_527842, _527902);
                .let _527917: .Idx 2 = %core.rcmp.ugLE (0, 64) (_527907, 4576918229304087675:(%core.Real 64));
                (eta_if_else_149223_527561, and_t_149341_527614)#_527917 _527919
            };
            .cn if_else_154647_527526 [_154885_527927: %mem.M] @(0:(.Idx 2)) = {
                if_join_154697_527540 _154885_527927
            };
            .cn if_join_154183_527509 [_527929: %mem.M] @(0:(.Idx 2)) = {
                if_else_154647_527526 _527929
            };
            .cn if_else_154133_527495 [_154415_527937: %mem.M] @(0:(.Idx 2)) = {
                if_join_154183_527509 _154415_527937
            };
            if_else_154133_527495 mem_153810_527946
        };
        .cn if_join_153299_527463 [_527468: %mem.M] @(0:(.Idx 2)) = {
            range_527151 (_527468, 0:(.Idx 4294967296), lambda_153786_527478, continue_152505_527955)
        };
        .cn if_else_153249_527449 [_153487_527964: %mem.M] @(0:(.Idx 2)) = {
            if_join_153299_527463 _153487_527964
        };
        .cn if_join_152785_527432 [_527966: %mem.M] @(0:(.Idx 2)) = {
            if_else_153249_527449 _527966
        };
        .cn if_else_152735_527418 [_153017_527974: %mem.M] @(0:(.Idx 2)) = {
            if_join_152785_527432 _153017_527974
        };
        if_else_152735_527418 mem_152410_527983
    };
    range_527151 (mem_151066_527386, 0:(.Idx 4294967296), lambda_152386_527401, return_151377_527988)
};
.cn init_brusselator_528165 _528188::[_528672: %mem.M, _528545: %mem.Ptr («4; %core.Real 64», 0), _528190: .Cn %mem.M] @(0:(.Idx 2)) = {
    .cn for_528184 _528191::[_528193: %mem.M, _528228: .Idx 4294967296] @(0:(.Idx 2)) = {
        .cn _528187 [] @(0:(.Idx 2)) = { // TODO: add mem 
            _528190 _528193
        };
        .cn for_528212 _528236::[_528238: %mem.M, _528321: .Idx 4294967296] @(0:(.Idx 2)) = {
            .cn _528213 [] @(0:(.Idx 2)) = { // TODO: add mem 
                .let _528235: .Idx 4294967296 = %core.wrap.add (0, 4294967296) (1:(.Idx 4294967296), _528228);
                for_528184 (_528235, _528238)
            };
            .cn cont_sqrtX_528425 __528468::[mem4_528470: %mem.M, sqrtX_528619: %core.Real 64] @(0:(.Idx 2)) = {
                .let _528432: .Idx 4294967296 = %core.wrap.add (0, 4294967296) (1:(.Idx 4294967296), _528321);
                .let _528565: .Idx 4294967296 = %core.wrap.mul (0, 4294967296) (2:(.Idx 4294967296), _528228);
                .let _528570: .Idx 4294967296 = %core.wrap.add (0, 4294967296) (_528321, _528565);
                .let _528592: %mem.Ptr (%core.Real 64, 0) = %mem.lea (⊤:.Nat, ‹⊤:.Nat; %core.Real 64›, 0) (_528545, _528570);
                .let _528388: %core.Real 64 = %core.conv.u2r (64, 4294967296) _528228;
                .let _528393: %core.Real 64 = %core.rop.mul (0, 64) (4607182418800017408:(%core.Real 64), _528388);
                .let _528398: %core.Real 64 = %core.rop.add (0, 64) (0:(%core.Real 64), _528393);
                .let _528410: %core.Real 64 = %core.rop.sub (0, 64) (4607182418800017408:(%core.Real 64), _528398);
                .let _528415: %core.Real 64 = %core.rop.mul (0, 64) (_528398, _528410);
                .let _528624: %core.Real 64 = %core.rop.mul (0, 64) (_528415, sqrtX_528619);
                .let _528629: %core.Real 64 = %core.rop.mul (0, 64) (4628293042053316608:(%core.Real 64), _528624);
                .let _528636: %mem.M = %mem.store (%core.Real 64, 0) (mem4_528470, _528592, _528629);
                .let _528643: %mem.M = %mem.store (%core.Real 64, 0) (_528636, _528592, _528629);
                for_528212 (_528432, _528643)
            };
            .cn cont_sqrtY_528361 __528375::[mem3_528377: %mem.M, %core.Real 64] @(0:(.Idx 2)) = {
                sqrt (mem3_528377, _528415, %clos.clos.ret (.Cn [%mem.M, %core.Real 64]) cont_sqrtX_528425)
            };
            .cn loop_body_2_528250 [] @(0:(.Idx 2)) = { // TODO: add mem 
                .let _528322: %core.Real 64 = %core.conv.u2r (64, 4294967296) _528321;
                .let _528327: %core.Real 64 = %core.rop.mul (0, 64) (4607182418800017408:(%core.Real 64), _528322);
                .let _528332: %core.Real 64 = %core.rop.add (0, 64) (0:(%core.Real 64), _528327);
                .let _528343: %core.Real 64 = %core.rop.sub (0, 64) (4607182418800017408:(%core.Real 64), _528332);
                .let _528348: %core.Real 64 = %core.rop.mul (0, 64) (_528332, _528343);
                sqrt (_528238, _528348, %clos.clos.ret (.Cn [%mem.M, %core.Real 64]) cont_sqrtY_528361)
            };
            .let _528658: .Idx 2 = %core.icmp.XygLe 4294967296 (_528321, 2:(.Idx 4294967296));
            (_528213, loop_body_2_528250)#_528658 ()
        };
        .cn loop_body_1_528207 [] @(0:(.Idx 2)) = { // TODO: add mem 
            for_528212 (0:(.Idx 4294967296), _528193)
        };
        .let _528668: .Idx 2 = %core.icmp.XygLe 4294967296 (_528228, 2:(.Idx 4294967296));
        (_528187, loop_body_1_528207)#_528668 ()
    };
    for_528184 (0:(.Idx 4294967296), _528672)
};
.cn .extern main __528134::[mem_528136: %mem.M, .Idx 4294967296, %mem.Ptr («⊤:.Nat; %mem.Ptr («⊤:.Nat; .Idx 256», 0)», 0), return_528933: .Cn [%mem.M, .Idx 4294967296]] @(0:(.Idx 2)) = {
    .cn callback_528919 __528937: %mem.M @(0:(.Idx 2)) = {
        return_528933 (__528937, 0:(.Idx 4294967296))
    };
    .cn cont_time_start_528149 __528742::[mem1_528744: %mem.M, time_start_528898: %mem.Ptr («⊤:.Nat; []», 0)] @(0:(.Idx 2)) = {
        .cn cont_time_end_528834 __528888::[memB2_528890: %mem.M, time_end_528906: %mem.Ptr («⊤:.Nat; []», 0)] @(0:(.Idx 2)) = {
            print_time_diff (memB2_528890, time_start_528898, time_end_528906, %clos.clos.ret (.Cn %mem.M) callback_528919)
        };
        .cn cont2_528816 [__528824: %mem.M] @(0:(.Idx 2)) = {
            time (__528824, %clos.clos.ret (.Cn [%mem.M, %mem.Ptr («⊤:.Nat; []», 0)]) cont_time_end_528834)
        };
        .cn cont1_528784 [__528795: %mem.M] @(0:(.Idx 2)) = {
            .let _528745: [%mem.M, %mem.Ptr («4; %core.Real 64», 0)] = %mem.alloc («4; %core.Real 64», 0) mem1_528744;
            .let _528748: [%mem.M, %mem.Ptr («4; %core.Real 64», 0)] = %mem.alloc («4; %core.Real 64», 0) _528745#0:(.Idx 2);
            .let _528751: [%mem.M, %mem.Ptr («4; %core.Real 64», 0)] = %mem.alloc («4; %core.Real 64», 0) _528748#0:(.Idx 2);
            init_brusselator_528165 (__528795, _528751#1:(.Idx 2), %clos.clos.ret (.Cn %mem.M) cont2_528816)
        };
        .let _528754: [%mem.M, %mem.Ptr («4; %core.Real 64», 0)] = %mem.alloc («4; %core.Real 64», 0) _528751#0:(.Idx 2);
        init_brusselator_528165 (_528754#0:(.Idx 2), _528745#1:(.Idx 2), %clos.clos.ret (.Cn %mem.M) cont1_528784)
    };
    time (mem_528136, %clos.clos.ret (.Cn [%mem.M, %mem.Ptr («⊤:.Nat; []», 0)]) cont_time_start_528149)
};
