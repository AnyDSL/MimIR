/// # The affine Dialect {#affine}
///
/// [TOC]
///
/// ## Dependencies
///
.import mem;
///
/// ## Types
///
/// TODO
///
/// ## Operations
///
/// ### %affine.For
///
/// This operation ranges from (including) `start` to (excluding) `stop` using `step` as stride.
/// In addition, this loop manages `n` loop accumulators whose initial values `init` must be given.
/// Each iteration the given `body` is invoked which receives 
/// * the current `%mem.M`, 
/// * the current values of the loop accumulators `acc`, and
/// * a `yield` continuation to prematurely continue with the next iteration.
///
/// After termination of the loop `exit` is invoked.
.ax %affine.For: Π [m: .Nat , n: .Nat , Ts: «n; *»] ->
    .Cn [mem: %mem.M, start: %Int m, stop: %Int m, step: %Int m, init: «i: n; Ts#i»,
        body: .Cn [%mem.M , %Int m, acc: «i: n; Ts#i», yield: .Cn [%mem.M , «i: n; Ts#i»]], 
        exit: .Cn [%mem.M , «i: n; Ts#i»]];
