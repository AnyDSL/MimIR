/// # The automatic differentiation dialect {#autodiff}
///
/// [TOC]
///
/// ## Dependencies
///
.import mem;
/// For derivatives:
.import core;
///
///
/// ## Types
///
.ax %autodiff.Tangent: * -> *, normalize_Tangent;
///
/// ## Operations
///
/// ### %autodiff.ad
/// 
/// This axiom operates on functions and types.
///
/// For function types the augmented type is computed: `(T -> U) => (T -> U × (U -> T))`
.ax %autodiff.AD: * -> *, normalize_AD;
/// On closed terms (functions, operators, ho arguments, registered axioms, etc.) the augmented term is returned.
/// The augmented term `f'` returns the result together with the pullback.
/// `autodiff f = f' = λ args. (f args, f*)` 
.ax %autodiff.ad: Π [T: *] -> T -> %autodiff.AD T, normalize_ad;
///
/// ### %autodiff.zero
/// 
/// Represents universal zero such that `(zero T) +_T t = t`.
///
.ax %autodiff.zero: Π [T:*] -> T, normalize_zero;
///
/// ### %autodiff.add
/// 
/// A universal addition that consumes zeros and defaults to normal addition for scalar types.
/// It lifts additions over types with structure and performs special casing for types with do not allow for addition.
/// The sum construct performs addition over a list of terms.
///
/// TODO: how do we handle summations that need memory? (grab current memory?)
.ax %autodiff.add: Π [T:*] -> [T,T] -> T, normalize_add;
.ax %autodiff.sum: Π [n:.Nat,T:*] -> «n; T» -> T, normalize_sum;
///
/// ## Registered translations
/// 
/// In this section, we define translations for axioms of other dialects.
/// This best would be done using a register mechanism in a third dialect or at least in a separate file.
/// 
/// The general concept is that a call to an axiom is replaced with a call to the augmented axiom.
/// The augmented axiom needs a wrapper for meta arguments (HO-function).
/// Appropiate cps2ds wrappers are introduced to handle that the augmented axioms are in cps where the original axioms were in ds.
/// Example:
/// ```
/// mul' => args -> result*pullback
/// call: r    = mul  (m,w) (a,b) 
/// res : r,r* = mul' (m,w) (a,b)
/// ```
/// The types (with `Int` for `(Int w)`) are:
/// ```
/// mul : Π [m:.Nat,w:.Nat] -> [a:Int,b:Int] -> Int
/// r   : Int
/// r*  : cn[Int,cn[Int,Int]]
/// ```
/// The pullback has to be in cps for compliance.
/// ```
/// mul* := λ s. (s*b,s*a)
/// mul'_cps : Π [m:.Nat,w:.Nat] -> cn[[Int,Int],cn[Int,   cn[Int,cn[Int,Int]]]]
/// r,r* = (cps2ds (mul'_cps (m,w))) (a,b)
/// ```
/// 
/// The pullback is the derivative with respect to the input (weighted with the out tangent).
/// For arithmetic operations, s is simply multiplied to each input tangent:
/// `∂_i f(x1,...,xn) * s`
/// You will also come to the conclusion that the applied partial pullback needs to be:
/// `sum x_i*(∂_i f(x1,...,xn) * s) = sum x_i*(•)` with • as the formula from above
/// This is a direct result from the chain composition with the partial pullback of a tuple.
/// The tuple pullback transports the partial pullbacks of the operands and handles the sums.
/// By its nature the pullback of a tuple needs to be a sum.
/// 
/// ### %core.icmp.xYgLE (eq)
/// 
/// The comparison pullback exists formally but is not used.
/// 
.lam .extern internal_diff_core_icmp_xYgLE![w: .Nat] ->(.Cn[[.Idx w, .Idx w], .Cn[.Idx 2, .Cn[.Idx 2, .Cn[.Idx w, .Idx w]]]]) =
    .cn![[a: .Idx w, b: .Idx w], ret:.Cn[.Idx 2, .Cn[.Idx 2, .Cn[.Idx w, .Idx w]]]] = { 
        .let result = %core.icmp.sle (w) (a,b);
        ret (result, .cn ![s: .Idx 2, pb_ret:.Cn[.Idx w, .Idx w]] = { .let z = 0:(.Idx w); pb_ret (z, z) })
    };
///
/// ### %core.wrap.add
/// 
/// s ↦ (s, s)
///
.lam .extern internal_diff_core_wrap_add!s:.Nat -> .Nat -> (.Cn[[.Idx s, .Idx s], .Cn[.Idx s, .Cn[.Idx s, .Cn[.Idx s, .Idx s]]]]) = 
    .lm m: .Nat -> (.Cn[[.Idx s, .Idx s], .Cn[.Idx s, .Cn[.Idx s, .Cn[.Idx s, .Idx s]]]]) =
        .cn ![[a:.Idx s, b:.Idx s], ret:.Cn[.Idx s, .Cn[.Idx s, .Cn[.Idx s, .Idx s]]]] = {
            .let result = %core.wrap.add s m (a,b);
            ret (result, .cn ![i:(.Idx s), pb_ret:(.Cn [.Idx s, .Idx s])] = pb_ret (i,i))
        };
///
/// ### %core.wrap.mul
///
/// s ↦ (s*b, s*a)
/// 
.lam .extern internal_diff_core_wrap_mul!s:.Nat -> .Nat -> (.Cn[[.Idx s, .Idx s], .Cn[.Idx s, .Cn[.Idx s, .Cn[.Idx s, .Idx s]]]]) = 
    .lm m: .Nat -> (.Cn[[.Idx s, .Idx s], .Cn[.Idx s, .Cn[.Idx s, .Cn[.Idx s, .Idx s]]]]) =
        .cn ![[a:.Idx s, b:.Idx s], ret:.Cn[.Idx s, .Cn[.Idx s, .Cn[.Idx s, .Idx s]]]] = { 
            .let result = %core.wrap.mul s m (a,b);
            ret (result, .cn ![i:(.Idx s), pb_ret:(.Cn [.Idx s, .Idx s])] = { 
                .let lhs = %core.wrap.mul s m (i,b);
                .let rhs = %core.wrap.mul s m (i,a);
                pb_ret (lhs, rhs)
            })
        };
