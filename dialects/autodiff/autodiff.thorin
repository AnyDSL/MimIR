/// # The automatic differentiation dialect {#autodiff}
///
/// [TOC]
///
/// ## Dependencies
///
.import mem;
/// for derivatives
.import core;
.import direct;
///
///
/// ## Types
///
.ax %autodiff.tangent_type: * -> *, normalize_tangent_type;
///
/// ## Operations
///
/// ### %autodiff.ad
/// 
/// This axiom operates on functions and types.
///
/// For function types the augmented type is computed: `(T -> U) => (T -> U × (U -> T))`
.ax %autodiff.autodiff_type: Π * -> *, normalize_autodiff_type;

/// On closed terms (functions, operators, ho arguments, registered axioms, etc.) the augmented term is returned.
/// The augmented term `f'` returns the result together with the pullback.
/// `autodiff f = f' = λ args. (f args, f*)` 
.ax %autodiff.ad: Π [T: *] -> T -> 
    %autodiff.autodiff_type (T);
///


