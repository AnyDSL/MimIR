/// # The compile dialect {#compile}
///
/// [TOC]
///
/// TODO
///
/// ## Types
///
/// ### %compile.Pass
/// ### %compile.Phase
/// 
/// Types for compilation passes and phases.
///
.ax %compile.Pass: *; 
.ax %compile.Phase: *; 
///
/// ### %compile.Pipeline
/// ### %compile.PassPhase
/// 
/// Types for functions that accept an arbitrary number of phases and passes respectively.
/// 
.Pi Pipeline: *, %compile.Phase = Pipeline;
.Pi PassPhase: %compile.Phase, %compile.Pass = PassPhase;
.Pi CombinedPhase: %compile.Phase, %compile.Phase = CombinedPhase;
///
/// ## Expressions
///
/// ### %compile.pipe
/// 
/// Given n phases, returns the representation of a pipeline.
///
.ax %compile.pipe: Pipeline;
///
/// ## Compilation Passes and Phases
///
/// ### %compile.debug_phase
/// 
/// Given a log level, returns a phase that prints the externals (for log level >= 2).
///
.ax %compile.debug_phase: .Nat -> %compile.Phase;
///
/// ### %compile.pass_phase
/// 
/// Given n passes, returns a phase that applies them in order.
///
.ax %compile.pass_phase: PassPhase, normalize_pass_phase;
.ax %compile.passes_to_phase: Π [n:.Nat] -> «n; %compile.Pass» -> %compile.Phase;
///
/// ### %compile.combined_phase
/// 
/// Given n phases, returns a phase that applies them in order.
///
.ax %compile.combined_phase: CombinedPhase;
.ax %compile.phases_to_phase: Π [n:.Nat] -> «n; %compile.Phase» -> %compile.Phase;
///
/// ### Passes
/// 
/// TODO
///
.ax %compile.partial_eval_pass: %compile.Pass;
.ax %compile.beta_red_pass: %compile.Pass;
.ax %compile.eta_red_pass: %compile.Pass;
/// Eta expansion expects an instance of eta reduction as argument.
.ax %compile.eta_exp_pass: %compile.Pass -> %compile.Pass;
/// Scalerize expects an instance of eta expansion as argument.
.ax %compile.scalerize_pass: %compile.Pass -> %compile.Pass;
.ax %compile.scalerize_no_arg_pass: %compile.Pass;
/// Tail recursion elimination expects an instance of eta reduction as argument.
.ax %compile.tail_rec_elim_pass: %compile.Pass -> %compile.Pass;
.ax %compile.tail_rec_elim_no_arg_pass: %compile.Pass;
.ax %compile.lam_spec_pass: %compile.Pass;
.ax %compile.ret_wrap_pass: %compile.Pass;
///
/// ### Phases
/// 
// TODO: allow functions by inlining them first
.let optimization_phase = {
    // TODO: it needs to be possible to add a pass twice and keep the instances separate (bind in pipeline/manager?)
    .let eta_red = %compile.eta_red_pass;
    .let eta_exp = %compile.eta_exp_pass eta_red;
    // TODO: use pass_phase
    %compile.passes_to_phase (⊤:.Nat)
        (%compile.partial_eval_pass,
        %compile.beta_red_pass,
        eta_red,
        eta_exp,
        (%compile.scalerize_pass eta_exp),
        (%compile.tail_rec_elim_pass eta_red))
};
        
.let default_pipeline = {
    %compile.pipe
        (%compile.passes_to_phase 1 %compile.scalerize_no_arg_pass)
        (%compile.passes_to_phase 1 %compile.eta_red_pass)
        (%compile.passes_to_phase 1 %compile.tail_rec_elim_no_arg_pass)
        optimization_phase
        (%compile.passes_to_phase 1 %compile.lam_spec_pass)
        (%compile.passes_to_phase 1 %compile.ret_wrap_pass)
};
