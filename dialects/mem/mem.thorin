/// # The mem Dialect {#mem}
///
/// [TOC]
///
/// ## Types
///
/// ### :mem.M
///
/// This type tracks all kind of side-effects.
.ax :mem.M: *; 
///
/// ### :mem.Ptr
///
/// Pointer type with *pointee* type `T` and *address space* `as`.
/// At the moment, the *address space* is not really used and a placeholder for future work.
.ax :mem.Ptr: [*, .Nat] -> *;
///
/// ## Operations with Side Effects
///
/// The following operations have side effects.
/// For this reason, they consume a `:mem.M` and yield a new `:mem.M`.
///
/// ### :mem.load
///
/// Loads from a pointer `ptr (T, as)` the pointed value of type `T`.
.ax :mem.load:  Π [T: *, a: .Nat] -> [:mem.M, :mem.Ptr(T, a)] -> [:mem.M, T], normalize_load;
///
/// ### :mem.store
///
/// Stores a value of type `T` to a pointer `ptr (T, as)`,
.ax :mem.store: Π [U: *, b: .Nat] -> [:mem.M, :mem.Ptr(U, b), U] -> :mem.M, normalize_store;
///
/// ## Operations without Side Effects
///
/// ### :mem.lea
///
/// Load effective address. 
/// Performs address computation.
.ax :mem.lea: [n: .Nat, Ts: «n; *», as: .Nat] -> [:mem.Ptr(«j: n; Ts#j», as), i: :Int n] -> :mem.Ptr(Ts#i, as);
