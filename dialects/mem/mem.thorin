/// # The mem Dialect {#mem}
///
/// [TOC]
///
/// ## Types
///
/// ### %mem.M
///
/// This type tracks all kind of side-effects.
.ax %mem.M: *; 
///
/// ### %mem.Ptr
///
/// Pointer type with *pointee* type `T` and *address space* `as`.
/// At the moment, the *address space* is not really used and a placeholder for future work.
.ax %mem.Ptr: [*, .Nat] -> *;
///
/// ## Operations with Side Effects
///
/// The following operations have side effects.
/// For this reason, they consume a `%mem.M` and yield a new `%mem.M`.
///
/// ### %mem.load
///
/// Loads from a pointer `ptr (T, as)` the pointed value of type `T`.
.ax %mem.load:  Π [T: *, as: .Nat] -> [%mem.M, %mem.Ptr(T, as)] -> [%mem.M, T], normalize_load;
///
/// ### %mem.store
///
/// Stores a value of type `T` to a pointer `ptr (T, as)`,
.ax %mem.store: Π [T: *, as: .Nat] -> [%mem.M, %mem.Ptr(T, as), T] -> %mem.M, normalize_store;
///
/// ### %mem.remem
///
/// Creates a new dummy `%mem.M`-typed value in order to acknowledge the fact that some unspecified side-effect happened.
.ax %mem.remem: %mem.M -> %mem.M, normalize_remem;
///
/// ### %mem.alloc
///
/// Allocates memory of type `T` in address space `as`.
.ax %mem.alloc: Π [T: *, as: .Nat] -> %mem.M -> [%mem.M, %mem.Ptr(T, as)];
///
/// ### %mem.slot
///
/// Reserves a memory slot for type `T` in address space `as`.
/// `id` has to be provided an unique id.
.ax %mem.slot: Π [T: *, as: .Nat] -> [%mem.M, id: .Nat] -> [%mem.M, %mem.Ptr(T, as)];
///
/// ### %mem.malloc
///
/// Allocates memory of type `T` in address space `as`.
/// The difference to %mem.alloc is that the `size` is automatically inferred.
.ax %mem.malloc: Π [T: *, as: .Nat] -> [%mem.M, .Nat] -> [%mem.M, %mem.Ptr(T, as)];
///
/// ### %mem.mslot
///
/// Reserves a memory slot for type `T` in address space `as`.
/// The reserved slot will be `size` bytes large.
/// `id` has to be provided an unique id.
.ax %mem.mslot: Π [T: *, as: .Nat] -> [%mem.M, size: .Nat, id: .Nat] -> [%mem.M, %mem.Ptr(T, as)];
///
/// ## Operations without Side Effects
///
/// ### %mem.lea
///
/// Load effective address. 
/// Performs address computation.
.ax %mem.lea: Π [n: .Nat, Ts: «n; *», as: .Nat] -> Π [%mem.Ptr(«j: n; Ts#j», as), i: .Idx n] -> %mem.Ptr(Ts#i, as), normalize_lea;
