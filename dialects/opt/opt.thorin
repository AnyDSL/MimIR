/// # The opt dialect {#opt}
///
/// [TOC]
///
/// Manages the default compilation pipeline of Thorin programs using dialects.
///
/// ## Dependencies
///
.import compile;
.import core;
.import mem;
.import demo;
///
/// ## Types
/// 
/// ### %opt.Dialect
///
.ax %opt.Dialect: *;
///
/// ## Operations
///
/// ### registered dialects
/// 
.ax %opt.core_dialect: %opt.Dialect;
.ax %opt.mem_dialect: %opt.Dialect;
.ax %opt.demo_dialect: %opt.Dialect;
/// 
/// ### %opt.is_loaded
/// 
/// Indicates whether a dialect is loaded.
/// The normalizer will statically evaluate this expression to a constant boolean.
/// TODO: find correct point (not at parsing but before compilation)
/// 
.ax %opt.is_loaded: %opt.Dialect -> .Bool, normalize_is_loaded;
///
/// ## Compilation passes, phases, and pipelines
///
/// ### Phases
/// 
.ax %opt.dialect_phase: %opt.Dialect -> %compile.Phase -> %compile.Phase -> %compile.Phase;
///
/// ### Pipelines
/// 
// .lam .extern _default_compile [] -> Pipeline = {
//     // (default_core_pipeline, default_core_pipeline)#(%opt.is_loaded %opt.core_dialect)
//     .let nullptr = %compile.nullptr_pass;
//     .let nullphase = %compile.single_pass_phase nullptr;
//     %compile.pipe
//         nullphase
//         (%compile.single_pass_phase (%compile.scalerize_pass nullptr))
//         (%compile.single_pass_phase %compile.eta_red_pass)
//         (%compile.single_pass_phase (%compile.tail_rec_elim_pass nullptr))
//         // Test
//         (%opt.dialect_phase %opt.demo_dialect 
//             nullphase 
//             nullphase
//         )
//         // Optimization loop
//         optimization_phase
//         (%compile.single_pass_phase %compile.lam_spec_pass)
//         // CodeGenPrep
//         (%compile.single_pass_phase %compile.ret_wrap_pass)
// };
