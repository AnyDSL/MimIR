/// # The opt dialect {#opt}
///
/// [TOC]
///
/// Manages the default compilation pipeline of Thorin programs using dialects.
///
/// ## Dependencies
///
.import compile;
.import core;
.import mem;
/// supported dialects with passes
.import affine;
.import autodiff;
.import clos;
.import direct;
.import refly;
///
/// ## Types
/// 
/// ### %opt.Dialect
///
.ax %opt.Dialect: *;
///
/// ## Operations
///
/// ### registered dialects
/// 
/// We expect the name in the tag before the `_` to be the name of the dialect (as given in `DialectInfo.plugin_name`).
/// 
.ax %opt.core_dialect    : %opt.Dialect;
.ax %opt.mem_dialect     : %opt.Dialect;
.ax %opt.demo_dialect    : %opt.Dialect;
.ax %opt.affine_dialect  : %opt.Dialect;
.ax %opt.autodiff_dialect: %opt.Dialect;
.ax %opt.clos_dialect    : %opt.Dialect;
.ax %opt.direct_dialect  : %opt.Dialect;
.ax %opt.refly_dialect   : %opt.Dialect;
/// 
/// ### %opt.is_loaded
/// 
/// Indicates whether a dialect is loaded.
/// The normalizer will statically evaluate this expression to a constant boolean.
/// TODO: find correct point (not at parsing but before compilation)
/// 
.ax %opt.is_loaded: %opt.Dialect -> .Bool, normalize_is_loaded;
///
/// ## Compilation passes, phases, and pipelines
///
/// ### Phases
/// 
.let empty_pass = %compile.nullptr_pass;
.let empty_phase = %compile.passes_to_phase 0 ();
.ax %opt.dialect_select: Π [T:*] -> %opt.Dialect -> T -> T -> T;
.let dialect_phase = %opt.dialect_select %compile.Phase;
.let dialect_pass = %opt.dialect_select %compile.Pass;
.lam dialect_cond_phase ![dialect: %opt.Dialect,phase: %compile.Phase] -> %compile.Phase = {
  dialect_phase dialect phase empty_phase
};
.lam dialect_cond_pass ![dialect: %opt.Dialect,pass: %compile.Pass] -> %compile.Pass = {
  dialect_pass dialect pass empty_pass
};
///
/// ### Pipelines
/// 
.lam .extern _default_compile [] -> Pipeline = {
    .let nullptr = %compile.nullptr_pass;
    .let nullphase = %compile.single_pass_phase nullptr;
    %compile.pipe
        nullphase
        (%compile.single_pass_phase (%compile.scalerize_pass nullptr))
        (%compile.single_pass_phase %compile.eta_red_pass)
        (%compile.single_pass_phase (%compile.tail_rec_elim_pass nullptr))
        // optimize
        (%compile.pass_phase 
          (%compile.combine_pass_list (⊤:.Nat)
          (
            optimization_pass_list,
            %compile.pass_list
              (dialect_cond_pass (%opt.affine_dialect, %affine.lower_for_pass)),
            mem_opt_pass_list
          ))
        )
        (dialect_cond_phase (%opt.autodiff_dialect,
          %compile.combined_phase (%compile.phase_list
            (%compile.single_pass_phase %autodiff.ad_eval_pass)
            // optimization_phase
            (%compile.single_pass_phase %autodiff.ad_zero_pass)
          )
        ))
        (dialect_cond_phase (%opt.direct_dialect,
          direct_phases
        ))
        (%compile.single_pass_phase %compile.internal_cleanup_pass)
        // TODO: clos
        (%compile.single_pass_phase %compile.lam_spec_pass)
        (dialect_cond_phase (%opt.autodiff_dialect,
          ad_cleanup_phase
        ))
        // CodeGenPrep
        (%compile.pass_phase 
          (%compile.combine_pass_list (⊤:.Nat)
          (
            %compile.pass_list
              %compile.ret_wrap_pass,
            // mem
            %compile.pass_list
              %mem.remem_elim_pass
              %mem.alloc2malloc_pass
            // TODO: refly
            // %compile.pass_list
              // (dialect_cond_pass (%opt.refly_dialect, %affine.lower_for_pass)),
          ))
        )
};


/// Old Pipeline:
/// 
/// 1 Scalerize
/// 2 EtaRed
/// 3 TailRecElim
/// 
/// 100 
///   Opt
///   Affine
///     LowerFor
///   Mem
///    BetaRed
///    EtaRed
///    EtaExp er
///    SSA ee
///    CopyProp br ee false
/// 
/// AD
///   105 ADEval
///   110 OPT
///   111 ADZero
/// 
/// Direct
///   115 DS2CPS
///   116 CPS2DS
///   120 OPT
/// 
/// Clos
///   121 ClosConvPrep nullptr
///   ++  EtaExp nullptr
///   ++  ClosConvWrapper
///   ++  
///     EtaRed true
///     EtaExp er
///     Scalerize ee
///   ++ 
///     Scalerize nullptr
///     BranchElim
///     CopyProp nullptr nullptr true
///     LowerTypedClosPrep
///     Clos2SJLJ
///   ++  LowerTypedClosWrapper
/// 
/// 200 LamSpec (controversial)
/// 
/// AD
///  299 
///    ADZeroCleanup
///    ADExternalCleanup
/// 
/// 300 CodeGenProp 
///   RetWrap
///   Mem
///     RememElim
///     Alloc2Malloc
///   Refly
///     RemoveDbgPerm
///   
