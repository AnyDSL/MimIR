extern "device" {
    // 32-bit name-mangled SPIR built-in functions
    // http://github.com/KhronosGroup/SPIR-Tools/wiki/SPIR-1.2-built-in-functions
    fn _Z12get_work_dimv() -> i32;
    fn _Z15get_global_sizej(i32) -> i64;
    fn _Z13get_global_idj(i32) -> i64;
    fn _Z14get_local_sizej(i32) -> i64;
    fn _Z12get_local_idj(i32) -> i64;
    fn _Z14get_num_groupsj(i32) -> i64;
    fn _Z12get_group_idj(i32) -> i64;
    fn _Z17get_global_offsetj(i32) -> i64;
    fn _Z7barrierj(i32) -> ();
    fn "_Z3expf"        expf(f32) -> f32;
    fn "_Z4exp2f"       exp2f(f32) -> f32;
    fn "_Z3logf"        logf(f32) -> f32;
    fn "_Z4log2f"       log2f(f32) -> f32;
    fn "_Z3powff"       powf(f32, f32) -> f32;
    fn "_Z5rsqrtf"      rsqrtf(f32) -> f32;
    fn "_Z4sqrtf"       sqrtf(f32) -> f32;
    fn "_Z4fabsf"       fabsf(f32) -> f32;
    fn "_Z3tanf"        tanf(f32) -> f32;
    fn "_Z5atan2ff"     atan2f(f32, f32) -> f32;
    fn "_Z3sinf"        sinf(f32) -> f32;
    fn "_Z3cosf"        cosf(f32) -> f32;
    fn "_Z4asinf"       asinf(f32) -> f32;
    fn "_Z4acosf"       acosf(f32) -> f32;
    fn "_Z3erff"        erff(f32) -> f32;
    fn "_Z5floorf"      floorf(f32) -> f32;
    fn "_Z3fmafff"      fmaf(f32, f32, f32) -> f32;
    fn "_Z3madfff"      madf(f32, f32, f32) -> f32;
    fn "_Z3expd"        exp(f64) -> f64;
    fn "_Z3powdd"       pow(f64, f64) -> f64;
    fn "_Z5rsqrtd"      rsqrt(f64) -> f64;
    fn "_Z4sqrtd"       sqrt(f64) -> f64;
    fn "_Z4fabsd"       fabs(f64) -> f64;
    fn "_Z3tand"        tan(f64) -> f64;
    fn "_Z5atan2dd"     atan2(f64, f64) -> f64;
    fn "_Z3sind"        sin(f64) -> f64;
    fn "_Z3cosd"        cos(f64) -> f64;
    fn "_Z3erfd"        erf(f64) -> f64;
    fn "_Z5floord"      floor(f64) -> f64;
    fn "_Z3fmaddd"      fma(f64, f64, f64) -> f64;
    fn "_Z3madddd"      mad(f64, f64, f64) -> f64;
    fn "_Z8copysignff"  copysignf(f32, f32) -> f32;
    fn "_Z8copysigndd"  copysign(f64, f64) -> f64;
    fn "_Z3minff"       fminf(f32, f32) -> f32;
    fn "_Z3maxff"       fmaxf(f32, f32) -> f32;
    fn "_Z3mindd"       fmin(f64, f64) -> f64;
    fn "_Z3maxdd"       fmax(f64, f64) -> f64;
    fn "_Z10atomic_addPVU3AS1ii" atomic_add_global(&i32, i32) -> i32;
    fn "_Z10atomic_addPVU3AS3ii" atomic_add_local(&i32, i32) -> i32;
    fn "_Z10atomic_minPVU3AS1ii" atomic_min_global(&i32, i32) -> i32;
    fn "_Z10atomic_minPVU3AS3ii" atomic_min_local(&i32, i32) -> i32;
}

fn work_dim() -> int              { _Z12get_work_dimv()}
fn global_size(idx: int) -> int   { _Z15get_global_sizej(idx) as int }
fn global_offset(idx: int) -> int { _Z17get_global_offsetj(idx) as int }

fn acc(dev: int, dim: (int, int, int), block: (int, int, int), body: fn() -> ()) -> () { spir(dev, dim, block, body) }
fn acc_tidx() -> int    { _Z12get_local_idj(0) as int }
fn acc_tidy() -> int    { _Z12get_local_idj(1) as int }
fn acc_tidz() -> int    { _Z12get_local_idj(2) as int }
fn acc_bidx() -> int    { _Z12get_group_idj(0) as int }
fn acc_bidy() -> int    { _Z12get_group_idj(1) as int }
fn acc_bidz() -> int    { _Z12get_group_idj(2) as int }
fn acc_bdimx() -> int   { _Z14get_local_sizej(0) as int }
fn acc_bdimy() -> int   { _Z14get_local_sizej(1) as int }
fn acc_bdimz() -> int   { _Z14get_local_sizej(2) as int }
fn acc_gdimx() -> int   { _Z14get_num_groupsj(0) as int }
fn acc_gdimy() -> int   { _Z14get_num_groupsj(1) as int }
fn acc_gdimz() -> int   { _Z14get_num_groupsj(2) as int }
fn acc_gidx() -> int    { _Z13get_global_idj(0) as int }
fn acc_gidy() -> int    { _Z13get_global_idj(1) as int }
fn acc_gidz() -> int    { _Z13get_global_idj(2) as int }
fn acc_barrier() -> ()  { _Z7barrierj(1) }  // CLK_LOCAL_MEM_FENCE -> 1 // CLK_GLOBAL_MEM_FENCE -> 2
fn acc_vector_length() -> int { 32 }
fn acc_mem() -> int     { 1 }
fn acc_tex() -> int     { acc_mem() }
fn acc_spm() -> int     { 3 }
fn acc_cst() -> int     { 4 }
fn acc_dev() -> int     { 1 }

