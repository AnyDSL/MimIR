extern "device" {
    // libdevice intrinsics: http://docs.nvidia.com/cuda/libdevice-users-guide
    // 32-bit http://github.com/KhronosGroup/SPIR-Tools/wiki/SPIR-1.2-built-in-functions
    fn _Z12get_work_dimv() -> u32;
    fn _Z15get_global_sizej(u32) -> u64;
    fn _Z13get_global_idj(u32) -> u64;
    fn _Z14get_local_sizej(u32) -> u64;
    fn _Z12get_local_idj(u32) -> u64;
    fn _Z14get_num_groupsj(u32) -> u64;
    fn _Z12get_group_idj(u32) -> u64;
    fn _Z17get_global_offsetj(u32) -> u64;
    fn _Z7barrierj(u32) -> ();
    fn _Z3expf(float) -> float;
    fn _Z3powff(float, float) -> float;
    fn _Z5rsqrtf(float) -> float;
    fn _Z4sqrtf(float) -> float;
    fn _Z4fabsf(float) -> float;
    fn _Z3tanf(float) -> float;
    fn _Z5atan2ff(float, float) -> float;
    fn _Z3sinf(float) -> float;
    fn _Z3cosf(float) -> float;
    fn _Z3erff(float) -> float;
    fn _Z5floorf(float) -> float;
    fn _Z3fmafff(float, float, float) -> float;
    fn _Z3madfff(float, float, float) -> float;
}

fn work_dim() -> int               { _Z12get_work_dimv() as int }
fn global_size(idx : int) -> int   { _Z15get_global_sizej(idx as uint) as int }
fn global_offset(idx : int) -> int { _Z17get_global_offsetj(idx as uint) as int }

fn acc(dev : int, dim : (int, int, int), block : (int, int, int), body : fn() -> ()) -> () { spir(dev, dim, block, body) }
fn acc_tidx() -> int    { _Z12get_local_idj(0u) as int }
fn acc_tidy() -> int    { _Z12get_local_idj(1u) as int }
fn acc_tidz() -> int    { _Z12get_local_idj(2u) as int }
fn acc_bidx() -> int    { _Z12get_group_idj(0u) as int }
fn acc_bidy() -> int    { _Z12get_group_idj(1u) as int }
fn acc_bidz() -> int    { _Z12get_group_idj(2u) as int }
fn acc_bdimx() -> int   { _Z14get_local_sizej(0u) as int }
fn acc_bdimy() -> int   { _Z14get_local_sizej(1u) as int }
fn acc_bdimz() -> int   { _Z14get_local_sizej(2u) as int }
fn acc_gdimx() -> int   { _Z14get_num_groupsj(0u) as int }
fn acc_gdimy() -> int   { _Z14get_num_groupsj(1u) as int }
fn acc_gdimz() -> int   { _Z14get_num_groupsj(2u) as int }
fn acc_gidx() -> int    { _Z13get_global_idj(0u) as int }
fn acc_gidy() -> int    { _Z13get_global_idj(1u) as int }
fn acc_gidz() -> int    { _Z13get_global_idj(2u) as int }
fn acc_barrier() -> ()  { _Z7barrierj(1u) }  // CLK_LOCAL_MEM_FENCE -> 1 // CLK_GLOBAL_MEM_FENCE -> 2
fn acc_vector_length() -> int { 32 }
fn acc_tex() -> int     { 1 }
fn acc_dev() -> int     { 1 }

fn expf(a: f32) -> f32 { _Z3expf(a) }
fn powf(a: f32, b: f32) -> f32 { _Z3powff(a, b) }
fn rsqrtf(a: f32) -> f32 { _Z5rsqrtf(a) }
fn sqrtf(a: f32) -> f32 { _Z4sqrtf(a) }
fn fabsf(a: f32) -> f32 { _Z4fabsf(a) }
fn tanf(a: f32) -> f32 { _Z3tanf(a) }
fn atan2f(a: f32, b: f32) -> f32 { _Z5atan2ff(a, b) }
fn sinf(a: f32) -> f32 { _Z3sinf(a) }
fn cosf(a: f32) -> f32 { _Z3cosf(a) }
fn erff(a: f32) -> f32 { _Z3erff(a) }
fn floorf(a: f32) -> f32 { _Z5floorf(a) }
fn fmaf(a: f32, b: f32, c:f32) -> f32 { _Z3fmafff(a, b, c) }
fn madf(a: f32, b: f32, c:f32) -> f32 { _Z3madfff(a, b, c) }

