extern "device" {
    // 32-bit name-mangled SPIR built-in functions
    // http://github.com/KhronosGroup/SPIR-Tools/wiki/SPIR-1.2-built-in-functions
    fn _Z12get_work_dimv() -> i32;
    fn _Z15get_global_sizej(i32) -> i64;
    fn _Z13get_global_idj(i32) -> i64;
    fn _Z14get_local_sizej(i32) -> i64;
    fn _Z12get_local_idj(i32) -> i64;
    fn _Z14get_num_groupsj(i32) -> i64;
    fn _Z12get_group_idj(i32) -> i64;
    fn _Z17get_global_offsetj(i32) -> i64;
    fn _Z7barrierj(i32) -> ();
    fn "_Z3expf"        expf(f32) -> f32;
    fn "_Z4exp2f"       exp2f(f32) -> f32;
    fn "_Z3logf"        logf(f32) -> f32;
    fn "_Z4log2f"       log2f(f32) -> f32;
    fn "_Z3powff"       powf(f32, f32) -> f32;
    fn "_Z5rsqrtf"      rsqrtf(f32) -> f32;
    fn "_Z4sqrtf"       sqrtf(f32) -> f32;
    fn "_Z4fabsf"       fabsf(f32) -> f32;
    fn "_Z3sinf"        sinf(f32) -> f32;
    fn "_Z3cosf"        cosf(f32) -> f32;
    fn "_Z3tanf"        tanf(f32) -> f32;
    fn "_Z4asinf"       asinf(f32) -> f32;
    fn "_Z4acosf"       acosf(f32) -> f32;
    fn "_Z4atanf"       atanf(f32) -> f32;
    fn "_Z3erff"        erff(f32) -> f32;
    fn "_Z5atan2ff"     atan2f(f32, f32) -> f32;
    fn "_Z4fmodff"      fmodf(f32, f32) -> f32;
    fn "_Z5floorf"      floorf(f32) -> f32;
    fn "_Z3fmafff"      fmaf(f32, f32, f32) -> f32;
    fn "_Z3madfff"      madf(f32, f32, f32) -> f32;
    fn "_Z5isinff"      isinff(f32) -> i32;
    fn "_Z5isnanf"      isnanf(f32) -> i32;
    fn "_Z8isfinitef"   isfinitef(f32) -> i32;
    fn "_Z3expd"        exp(f64) -> f64;
    fn "_Z3powdd"       pow(f64, f64) -> f64;
    fn "_Z5rsqrtd"      rsqrt(f64) -> f64;
    fn "_Z4sqrtd"       sqrt(f64) -> f64;
    fn "_Z4fabsd"       fabs(f64) -> f64;
    fn "_Z3sind"        sin(f64) -> f64;
    fn "_Z3cosd"        cos(f64) -> f64;
    fn "_Z3tand"        tan(f64) -> f64;
    fn "_Z4asind"       asin(f64) -> f64;
    fn "_Z4acosd"       acos(f64) -> f64;
    fn "_Z4atand"       atan(f64) -> f64;
    fn "_Z3erfd"        erf(f64) -> f64;
    fn "_Z5atan2dd"     atan2(f64, f64) -> f64;
    fn "_Z4fmoddd"      fmod(f64, f64) -> f64;
    fn "_Z5floord"      floor(f64) -> f64;
    fn "_Z3fmaddd"      fma(f64, f64, f64) -> f64;
    fn "_Z3madddd"      mad(f64, f64, f64) -> f64;
    fn "_Z8copysignff"  copysignf(f32, f32) -> f32;
    fn "_Z8copysigndd"  copysign(f64, f64) -> f64;
    fn "_Z3minff"       fminf(f32, f32) -> f32;
    fn "_Z3maxff"       fmaxf(f32, f32) -> f32;
    fn "_Z3mindd"       fmin(f64, f64) -> f64;
    fn "_Z3maxdd"       fmax(f64, f64) -> f64;
    fn "_Z10atomic_addPVU3AS1ii" atomic_add_global(&[1]i32, i32) -> i32;
    fn "_Z10atomic_addPVU3AS3ii" atomic_add_local(&[3]i32, i32) -> i32;
    fn "_Z10atomic_minPVU3AS1ii" atomic_min_global(&[1]i32, i32) -> i32;
    fn "_Z10atomic_minPVU3AS3ii" atomic_min_local(&[3]i32, i32) -> i32;
}

fn work_dim() -> i32              { _Z12get_work_dimv()}
fn global_size(idx: i32) -> i32   { _Z15get_global_sizej(idx) as i32 }
fn global_offset(idx: i32) -> i32 { _Z17get_global_offsetj(idx) as i32 }

fn acc(dev: i32, dim: (i32, i32, i32), block: (i32, i32, i32), body: fn() -> ()) -> () { spir(dev, dim, block, body) }
fn acc_alloc(dev: i32, size: i32) -> Buffer { alloc_opencl(dev, size) }
fn acc_alloc_unified(dev: i32, size: i32) -> Buffer { alloc_opencl_unified(dev, size) }
fn acc_tidx() -> i32     { _Z12get_local_idj(0) as i32 }
fn acc_tidy() -> i32     { _Z12get_local_idj(1) as i32 }
fn acc_tidz() -> i32     { _Z12get_local_idj(2) as i32 }
fn acc_bidx() -> i32     { _Z12get_group_idj(0) as i32 }
fn acc_bidy() -> i32     { _Z12get_group_idj(1) as i32 }
fn acc_bidz() -> i32     { _Z12get_group_idj(2) as i32 }
fn acc_bdimx() -> i32    { _Z14get_local_sizej(0) as i32 }
fn acc_bdimy() -> i32    { _Z14get_local_sizej(1) as i32 }
fn acc_bdimz() -> i32    { _Z14get_local_sizej(2) as i32 }
fn acc_gdimx() -> i32    { _Z14get_num_groupsj(0) as i32 }
fn acc_gdimy() -> i32    { _Z14get_num_groupsj(1) as i32 }
fn acc_gdimz() -> i32    { _Z14get_num_groupsj(2) as i32 }
fn acc_gidx() -> i32     { _Z13get_global_idj(0) as i32 }
fn acc_gidy() -> i32     { _Z13get_global_idj(1) as i32 }
fn acc_gidz() -> i32     { _Z13get_global_idj(2) as i32 }
fn acc_barrier() -> ()   { _Z7barrierj(1) }  // CLK_LOCAL_MEM_FENCE -> 1 // CLK_GLOBAL_MEM_FENCE -> 2
fn acc_use_tex() -> bool { false }
fn acc_dev() -> i32      { 1 }

fn ldg_f32(a: &[1]f32) -> f32 { *a }
fn ldg_i32(a: &[1]i32) -> i32 { *a }

