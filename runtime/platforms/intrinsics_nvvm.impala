extern "device" {
    fn "llvm.nvvm.read.ptx.sreg.ctaid.x" nvvm_read_ptx_sreg_ctaid_x() -> i32;
    fn "llvm.nvvm.read.ptx.sreg.ctaid.y" nvvm_read_ptx_sreg_ctaid_y() -> i32;
    fn "llvm.nvvm.read.ptx.sreg.ctaid.z" nvvm_read_ptx_sreg_ctaid_z() -> i32;
    fn "llvm.nvvm.read.ptx.sreg.nctaid.x" nvvm_read_ptx_sreg_nctaid_x() -> i32;
    fn "llvm.nvvm.read.ptx.sreg.nctaid.y" nvvm_read_ptx_sreg_nctaid_y() -> i32;
    fn "llvm.nvvm.read.ptx.sreg.nctaid.z" nvvm_read_ptx_sreg_nctaid_z() -> i32;
    fn "llvm.nvvm.read.ptx.sreg.ntid.x" nvvm_read_ptx_sreg_ntid_x() -> i32;
    fn "llvm.nvvm.read.ptx.sreg.ntid.y" nvvm_read_ptx_sreg_ntid_y() -> i32;
    fn "llvm.nvvm.read.ptx.sreg.ntid.z" nvvm_read_ptx_sreg_ntid_z() -> i32;
    fn "llvm.nvvm.read.ptx.sreg.tid.x" nvvm_read_ptx_sreg_tid_x() -> i32;
    fn "llvm.nvvm.read.ptx.sreg.tid.y" nvvm_read_ptx_sreg_tid_y() -> i32;
    fn "llvm.nvvm.read.ptx.sreg.tid.z" nvvm_read_ptx_sreg_tid_z() -> i32;
    fn "llvm.nvvm.read.ptx.sreg.warpsize" nvvm_read_ptx_sreg_warpsize() -> i32;
    fn "llvm.nvvm.barrier0" nvvm_barrier0() -> ();

    fn "llvm.nvvm.abs.i" nvvm_abs_i(i32) -> i32;
    fn "llvm.nvvm.abs.ll" nvvm_abs_ll(i64) -> i64;
    fn "llvm.nvvm.add.rm.d" nvvm_add_rm_d(double, double) -> double;
    fn "llvm.nvvm.add.rm.f" nvvm_add_rm_f(float, float) -> float;
    fn "llvm.nvvm.add.rm.ftz.f" nvvm_add_rm_ftz_f(float, float) -> float;
    fn "llvm.nvvm.add.rn.d" nvvm_add_rn_d(double, double) -> double;
    fn "llvm.nvvm.add.rn.f" nvvm_add_rn_f(float, float) -> float;
    fn "llvm.nvvm.add.rn.ftz.f" nvvm_add_rn_ftz_f(float, float) -> float;
    fn "llvm.nvvm.add.rp.d" nvvm_add_rp_d(double, double) -> double;
    fn "llvm.nvvm.add.rp.f" nvvm_add_rp_f(float, float) -> float;
    fn "llvm.nvvm.add.rp.ftz.f" nvvm_add_rp_ftz_f(float, float) -> float;
    fn "llvm.nvvm.add.rz.d" nvvm_add_rz_d(double, double) -> double;
    fn "llvm.nvvm.add.rz.f" nvvm_add_rz_f(float, float) -> float;
    fn "llvm.nvvm.add.rz.ftz.f" nvvm_add_rz_ftz_f(float, float) -> float;
    fn "llvm.nvvm.barrier0.and" nvvm_barrier0_and(i32) -> i32;
    fn "llvm.nvvm.barrier0.or" nvvm_barrier0_or(i32) -> i32;
    fn "llvm.nvvm.barrier0.popc" nvvm_barrier0_popc(i32) -> i32;
    fn "llvm.nvvm.bitcast.d2ll" nvvm_bitcast_d2ll(double) -> i64;
    fn "llvm.nvvm.bitcast.f2i" nvvm_bitcast_f2i(float) -> i32;
    fn "llvm.nvvm.bitcast.i2f" nvvm_bitcast_i2f(i32) -> float;
    fn "llvm.nvvm.bitcast.ll2d" nvvm_bitcast_ll2d(i64) -> double;
    fn "llvm.nvvm.brev32" nvvm_brev32(i32) -> i32;
    fn "llvm.nvvm.brev64" nvvm_brev64(i64) -> i64;
    fn "llvm.nvvm.ceil.d" nvvm_ceil_d(double) -> double;
    fn "llvm.nvvm.ceil.f" nvvm_ceil_f(float) -> float;
    fn "llvm.nvvm.ceil.ftz.f" nvvm_ceil_ftz_f(float) -> float;
    fn "llvm.nvvm.clz.i" nvvm_clz_i(i32) -> i32;
    fn "llvm.nvvm.clz.ll" nvvm_clz_ll(i64) -> i32;
    fn "llvm.nvvm.cos.approx.f" nvvm_cos_approx_f(float) -> float;
    fn "llvm.nvvm.cos.approx.ftz.f" nvvm_cos_approx_ftz_f(float) -> float;
    fn "llvm.nvvm.d2f.rm" nvvm_d2f_rm(double) -> float;
    fn "llvm.nvvm.d2f.rm.ftz" nvvm_d2f_rm_ftz(double) -> float;
    fn "llvm.nvvm.d2f.rn" nvvm_d2f_rn(double) -> float;
    fn "llvm.nvvm.d2f.rn.ftz" nvvm_d2f_rn_ftz(double) -> float;
    fn "llvm.nvvm.d2f.rp" nvvm_d2f_rp(double) -> float;
    fn "llvm.nvvm.d2f.rp.ftz" nvvm_d2f_rp_ftz(double) -> float;
    fn "llvm.nvvm.d2f.rz" nvvm_d2f_rz(double) -> float;
    fn "llvm.nvvm.d2f.rz.ftz" nvvm_d2f_rz_ftz(double) -> float;
    fn "llvm.nvvm.d2i.hi" nvvm_d2i_hi(double) -> i32;
    fn "llvm.nvvm.d2i.lo" nvvm_d2i_lo(double) -> i32;
    fn "llvm.nvvm.d2i.rm" nvvm_d2i_rm(double) -> i32;
    fn "llvm.nvvm.d2i.rn" nvvm_d2i_rn(double) -> i32;
    fn "llvm.nvvm.d2i.rp" nvvm_d2i_rp(double) -> i32;
    fn "llvm.nvvm.d2i.rz" nvvm_d2i_rz(double) -> i32;
    fn "llvm.nvvm.d2ll.rm" nvvm_d2ll_rm(double) -> i64;
    fn "llvm.nvvm.d2ll.rn" nvvm_d2ll_rn(double) -> i64;
    fn "llvm.nvvm.d2ll.rp" nvvm_d2ll_rp(double) -> i64;
    fn "llvm.nvvm.d2ll.rz" nvvm_d2ll_rz(double) -> i64;
    fn "llvm.nvvm.d2ui.rm" nvvm_d2ui_rm(double) -> i32;
    fn "llvm.nvvm.d2ui.rn" nvvm_d2ui_rn(double) -> i32;
    fn "llvm.nvvm.d2ui.rp" nvvm_d2ui_rp(double) -> i32;
    fn "llvm.nvvm.d2ui.rz" nvvm_d2ui_rz(double) -> i32;
    fn "llvm.nvvm.d2ull.rm" nvvm_d2ull_rm(double) -> i64;
    fn "llvm.nvvm.d2ull.rn" nvvm_d2ull_rn(double) -> i64;
    fn "llvm.nvvm.d2ull.rp" nvvm_d2ull_rp(double) -> i64;
    fn "llvm.nvvm.d2ull.rz" nvvm_d2ull_rz(double) -> i64;
    fn "llvm.nvvm.div.approx.f" nvvm_div_approx_f(float, float) -> float;
    fn "llvm.nvvm.div.approx.ftz.f" nvvm_div_approx_ftz_f(float, float) -> float;
    fn "llvm.nvvm.div.rm.d" nvvm_div_rm_d(double, double) -> double;
    fn "llvm.nvvm.div.rm.f" nvvm_div_rm_f(float, float) -> float;
    fn "llvm.nvvm.div.rm.ftz.f" nvvm_div_rm_ftz_f(float, float) -> float;
    fn "llvm.nvvm.div.rn.d" nvvm_div_rn_d(double, double) -> double;
    fn "llvm.nvvm.div.rn.f" nvvm_div_rn_f(float, float) -> float;
    fn "llvm.nvvm.div.rn.ftz.f" nvvm_div_rn_ftz_f(float, float) -> float;
    fn "llvm.nvvm.div.rp.d" nvvm_div_rp_d(double, double) -> double;
    fn "llvm.nvvm.div.rp.f" nvvm_div_rp_f(float, float) -> float;
    fn "llvm.nvvm.div.rp.ftz.f" nvvm_div_rp_ftz_f(float, float) -> float;
    fn "llvm.nvvm.div.rz.d" nvvm_div_rz_d(double, double) -> double;
    fn "llvm.nvvm.div.rz.f" nvvm_div_rz_f(float, float) -> float;
    fn "llvm.nvvm.div.rz.ftz.f" nvvm_div_rz_ftz_f(float, float) -> float;
    fn "llvm.nvvm.ex2.approx.d" nvvm_ex2_approx_d(double) -> double;
    fn "llvm.nvvm.ex2.approx.f" nvvm_ex2_approx_f(float) -> float;
    fn "llvm.nvvm.ex2.approx.ftz.f" nvvm_ex2_approx_ftz_f(float) -> float;
    fn "llvm.nvvm.f2h.rn" nvvm_f2h_rn(float) -> i16;
    fn "llvm.nvvm.f2h.rn.ftz" nvvm_f2h_rn_ftz(float) -> i16;
    fn "llvm.nvvm.f2i.rm" nvvm_f2i_rm(float) -> i32;
    fn "llvm.nvvm.f2i.rm.ftz" nvvm_f2i_rm_ftz(float) -> i32;
    fn "llvm.nvvm.f2i.rn" nvvm_f2i_rn(float) -> i32;
    fn "llvm.nvvm.f2i.rn.ftz" nvvm_f2i_rn_ftz(float) -> i32;
    fn "llvm.nvvm.f2i.rp" nvvm_f2i_rp(float) -> i32;
    fn "llvm.nvvm.f2i.rp.ftz" nvvm_f2i_rp_ftz(float) -> i32;
    fn "llvm.nvvm.f2i.rz" nvvm_f2i_rz(float) -> i32;
    fn "llvm.nvvm.f2i.rz.ftz" nvvm_f2i_rz_ftz(float) -> i32;
    fn "llvm.nvvm.f2ll.rm" nvvm_f2ll_rm(float) -> i64;
    fn "llvm.nvvm.f2ll.rm.ftz" nvvm_f2ll_rm_ftz(float) -> i64;
    fn "llvm.nvvm.f2ll.rn" nvvm_f2ll_rn(float) -> i64;
    fn "llvm.nvvm.f2ll.rn.ftz" nvvm_f2ll_rn_ftz(float) -> i64;
    fn "llvm.nvvm.f2ll.rp" nvvm_f2ll_rp(float) -> i64;
    fn "llvm.nvvm.f2ll.rp.ftz" nvvm_f2ll_rp_ftz(float) -> i64;
    fn "llvm.nvvm.f2ll.rz" nvvm_f2ll_rz(float) -> i64;
    fn "llvm.nvvm.f2ll.rz.ftz" nvvm_f2ll_rz_ftz(float) -> i64;
    fn "llvm.nvvm.f2ui.rm" nvvm_f2ui_rm(float) -> i32;
    fn "llvm.nvvm.f2ui.rm.ftz" nvvm_f2ui_rm_ftz(float) -> i32;
    fn "llvm.nvvm.f2ui.rn" nvvm_f2ui_rn(float) -> i32;
    fn "llvm.nvvm.f2ui.rn.ftz" nvvm_f2ui_rn_ftz(float) -> i32;
    fn "llvm.nvvm.f2ui.rp" nvvm_f2ui_rp(float) -> i32;
    fn "llvm.nvvm.f2ui.rp.ftz" nvvm_f2ui_rp_ftz(float) -> i32;
    fn "llvm.nvvm.f2ui.rz" nvvm_f2ui_rz(float) -> i32;
    fn "llvm.nvvm.f2ui.rz.ftz" nvvm_f2ui_rz_ftz(float) -> i32;
    fn "llvm.nvvm.f2ull.rm" nvvm_f2ull_rm(float) -> i64;
    fn "llvm.nvvm.f2ull.rm.ftz" nvvm_f2ull_rm_ftz(float) -> i64;
    fn "llvm.nvvm.f2ull.rn" nvvm_f2ull_rn(float) -> i64;
    fn "llvm.nvvm.f2ull.rn.ftz" nvvm_f2ull_rn_ftz(float) -> i64;
    fn "llvm.nvvm.f2ull.rp" nvvm_f2ull_rp(float) -> i64;
    fn "llvm.nvvm.f2ull.rp.ftz" nvvm_f2ull_rp_ftz(float) -> i64;
    fn "llvm.nvvm.f2ull.rz" nvvm_f2ull_rz(float) -> i64;
    fn "llvm.nvvm.f2ull.rz.ftz" nvvm_f2ull_rz_ftz(float) -> i64;
    fn "llvm.nvvm.fabs.d" nvvm_fabs_d(double) -> double;
    fn "llvm.nvvm.fabs.f" nvvm_fabs_f(float) -> float;
    fn "llvm.nvvm.fabs.ftz.f" nvvm_fabs_ftz_f(float) -> float;
    fn "llvm.nvvm.floor.d" nvvm_floor_d(double) -> double;
    fn "llvm.nvvm.floor.f" nvvm_floor_f(float) -> float;
    fn "llvm.nvvm.floor.ftz.f" nvvm_floor_ftz_f(float) -> float;
    fn "llvm.nvvm.fma.rm.d" nvvm_fma_rm_d(double, double, double) -> double;
    fn "llvm.nvvm.fma.rm.f" nvvm_fma_rm_f(float, float, float) -> float;
    fn "llvm.nvvm.fma.rm.ftz.f" nvvm_fma_rm_ftz_f(float, float, float) -> float;
    fn "llvm.nvvm.fma.rn.d" nvvm_fma_rn_d(double, double, double) -> double;
    fn "llvm.nvvm.fma.rn.f" nvvm_fma_rn_f(float, float, float) -> float;
    fn "llvm.nvvm.fma.rn.ftz.f" nvvm_fma_rn_ftz_f(float, float, float) -> float;
    fn "llvm.nvvm.fma.rp.d" nvvm_fma_rp_d(double, double, double) -> double;
    fn "llvm.nvvm.fma.rp.f" nvvm_fma_rp_f(float, float, float) -> float;
    fn "llvm.nvvm.fma.rp.ftz.f" nvvm_fma_rp_ftz_f(float, float, float) -> float;
    fn "llvm.nvvm.fma.rz.d" nvvm_fma_rz_d(double, double, double) -> double;
    fn "llvm.nvvm.fma.rz.f" nvvm_fma_rz_f(float, float, float) -> float;
    fn "llvm.nvvm.fma.rz.ftz.f" nvvm_fma_rz_ftz_f(float, float, float) -> float;
    fn "llvm.nvvm.fmax.d" nvvm_fmax_d(double, double) -> double;
    fn "llvm.nvvm.fmax.f" nvvm_fmax_f(float, float) -> float;
    fn "llvm.nvvm.fmax.ftz.f" nvvm_fmax_ftz_f(float, float) -> float;
    fn "llvm.nvvm.fmin.d" nvvm_fmin_d(double, double) -> double;
    fn "llvm.nvvm.fmin.f" nvvm_fmin_f(float, float) -> float;
    fn "llvm.nvvm.fmin.ftz.f" nvvm_fmin_ftz_f(float, float) -> float;
    fn "llvm.nvvm.h2f" nvvm_h2f(i16) -> float;
    fn "llvm.nvvm.i2d.rm" nvvm_i2d_rm(i32) -> double;
    fn "llvm.nvvm.i2d.rn" nvvm_i2d_rn(i32) -> double;
    fn "llvm.nvvm.i2d.rp" nvvm_i2d_rp(i32) -> double;
    fn "llvm.nvvm.i2d.rz" nvvm_i2d_rz(i32) -> double;
    fn "llvm.nvvm.i2f.rm" nvvm_i2f_rm(i32) -> float;
    fn "llvm.nvvm.i2f.rn" nvvm_i2f_rn(i32) -> float;
    fn "llvm.nvvm.i2f.rp" nvvm_i2f_rp(i32) -> float;
    fn "llvm.nvvm.i2f.rz" nvvm_i2f_rz(i32) -> float;
    fn "llvm.nvvm.lg2.approx.d" nvvm_lg2_approx_d(double) -> double;
    fn "llvm.nvvm.lg2.approx.f" nvvm_lg2_approx_f(float) -> float;
    fn "llvm.nvvm.lg2.approx.ftz.f" nvvm_lg2_approx_ftz_f(float) -> float;
    fn "llvm.nvvm.ll2d.rm" nvvm_ll2d_rm(i64) -> double;
    fn "llvm.nvvm.ll2d.rn" nvvm_ll2d_rn(i64) -> double;
    fn "llvm.nvvm.ll2d.rp" nvvm_ll2d_rp(i64) -> double;
    fn "llvm.nvvm.ll2d.rz" nvvm_ll2d_rz(i64) -> double;
    fn "llvm.nvvm.ll2f.rm" nvvm_ll2f_rm(i64) -> float;
    fn "llvm.nvvm.ll2f.rn" nvvm_ll2f_rn(i64) -> float;
    fn "llvm.nvvm.ll2f.rp" nvvm_ll2f_rp(i64) -> float;
    fn "llvm.nvvm.ll2f.rz" nvvm_ll2f_rz(i64) -> float;
    fn "llvm.nvvm.lohi.i2d" nvvm_lohi_i2d(i32, i32) -> double;
    fn "llvm.nvvm.max.i" nvvm_max_i(i32, i32) -> i32;
    fn "llvm.nvvm.max.ll" nvvm_max_ll(i64, i64) -> i64;
    fn "llvm.nvvm.max.ui" nvvm_max_ui(i32, i32) -> i32;
    fn "llvm.nvvm.max.ull" nvvm_max_ull(i64, i64) -> i64;
    fn "llvm.nvvm.membar.cta" nvvm_membar_cta() -> ();
    fn "llvm.nvvm.membar.gl" nvvm_membar_gl() -> ();
    fn "llvm.nvvm.membar.sys" nvvm_membar_sys() -> ();
    fn "llvm.nvvm.min.i" nvvm_min_i(i32, i32) -> i32;
    fn "llvm.nvvm.min.ll" nvvm_min_ll(i64, i64) -> i64;
    fn "llvm.nvvm.min.ui" nvvm_min_ui(i32, i32) -> i32;
    fn "llvm.nvvm.min.ull" nvvm_min_ull(i64, i64) -> i64;
    fn "llvm.nvvm.move.double" nvvm_move_double(double) -> double;
    fn "llvm.nvvm.move.float" nvvm_move_float(float) -> float;
    fn "llvm.nvvm.move.i16" nvvm_move_i16(i16) -> i16;
    fn "llvm.nvvm.move.i32" nvvm_move_i32(i32) -> i32;
    fn "llvm.nvvm.move.i64" nvvm_move_i64(i64) -> i64;
    fn "llvm.nvvm.mul24.i" nvvm_mul24_i(i32, i32) -> i32;
    fn "llvm.nvvm.mul24.ui" nvvm_mul24_ui(i32, i32) -> i32;
    fn "llvm.nvvm.mul.rm.d" nvvm_mul_rm_d(double, double) -> double;
    fn "llvm.nvvm.mul.rm.f" nvvm_mul_rm_f(float, float) -> float;
    fn "llvm.nvvm.mul.rm.ftz.f" nvvm_mul_rm_ftz_f(float, float) -> float;
    fn "llvm.nvvm.mul.rn.d" nvvm_mul_rn_d(double, double) -> double;
    fn "llvm.nvvm.mul.rn.f" nvvm_mul_rn_f(float, float) -> float;
    fn "llvm.nvvm.mul.rn.ftz.f" nvvm_mul_rn_ftz_f(float, float) -> float;
    fn "llvm.nvvm.mul.rp.d" nvvm_mul_rp_d(double, double) -> double;
    fn "llvm.nvvm.mul.rp.f" nvvm_mul_rp_f(float, float) -> float;
    fn "llvm.nvvm.mul.rp.ftz.f" nvvm_mul_rp_ftz_f(float, float) -> float;
    fn "llvm.nvvm.mul.rz.d" nvvm_mul_rz_d(double, double) -> double;
    fn "llvm.nvvm.mul.rz.f" nvvm_mul_rz_f(float, float) -> float;
    fn "llvm.nvvm.mul.rz.ftz.f" nvvm_mul_rz_ftz_f(float, float) -> float;
    fn "llvm.nvvm.mulhi.i" nvvm_mulhi_i(i32, i32) -> i32;
    fn "llvm.nvvm.mulhi.ll" nvvm_mulhi_ll(i64, i64) -> i64;
    fn "llvm.nvvm.mulhi.ui" nvvm_mulhi_ui(i32, i32) -> i32;
    fn "llvm.nvvm.mulhi.ull" nvvm_mulhi_ull(i64, i64) -> i64;
    fn "llvm.nvvm.popc.i" nvvm_popc_i(i32) -> i32;
    fn "llvm.nvvm.popc.ll" nvvm_popc_ll(i64) -> i32;
    fn "llvm.nvvm.prmt" nvvm_prmt(i32, i32, i32) -> i32;
    fn "llvm.nvvm.rcp.approx.ftz.d" nvvm_rcp_approx_ftz_d(double) -> double;
    fn "llvm.nvvm.rcp.rm.d" nvvm_rcp_rm_d(double) -> double;
    fn "llvm.nvvm.rcp.rm.f" nvvm_rcp_rm_f(float) -> float;
    fn "llvm.nvvm.rcp.rm.ftz.f" nvvm_rcp_rm_ftz_f(float) -> float;
    fn "llvm.nvvm.rcp.rn.d" nvvm_rcp_rn_d(double) -> double;
    fn "llvm.nvvm.rcp.rn.f" nvvm_rcp_rn_f(float) -> float;
    fn "llvm.nvvm.rcp.rn.ftz.f" nvvm_rcp_rn_ftz_f(float) -> float;
    fn "llvm.nvvm.rcp.rp.d" nvvm_rcp_rp_d(double) -> double;
    fn "llvm.nvvm.rcp.rp.f" nvvm_rcp_rp_f(float) -> float;
    fn "llvm.nvvm.rcp.rp.ftz.f" nvvm_rcp_rp_ftz_f(float) -> float;
    fn "llvm.nvvm.rcp.rz.d" nvvm_rcp_rz_d(double) -> double;
    fn "llvm.nvvm.rcp.rz.f" nvvm_rcp_rz_f(float) -> float;
    fn "llvm.nvvm.rcp.rz.ftz.f" nvvm_rcp_rz_ftz_f(float) -> float;
    fn "llvm.nvvm.round.d" nvvm_round_d(double) -> double;
    fn "llvm.nvvm.round.f" nvvm_round_f(float) -> float;
    fn "llvm.nvvm.round.ftz.f" nvvm_round_ftz_f(float) -> float;
    fn "llvm.nvvm.rsqrt.approx.d" nvvm_rsqrt_approx_d(double) -> double;
    fn "llvm.nvvm.rsqrt.approx.f" nvvm_rsqrt_approx_f(float) -> float;
    fn "llvm.nvvm.rsqrt.approx.ftz.f" nvvm_rsqrt_approx_ftz_f(float) -> float;
    fn "llvm.nvvm.sad.i" nvvm_sad_i(i32, i32, i32) -> i32;
    fn "llvm.nvvm.sad.ui" nvvm_sad_ui(i32, i32, i32) -> i32;
    fn "llvm.nvvm.saturate.d" nvvm_saturate_d(double) -> double;
    fn "llvm.nvvm.saturate.f" nvvm_saturate_f(float) -> float;
    fn "llvm.nvvm.saturate.ftz.f" nvvm_saturate_ftz_f(float) -> float;
    fn "llvm.nvvm.sin.approx.f" nvvm_sin_approx_f(float) -> float;
    fn "llvm.nvvm.sin.approx.ftz.f" nvvm_sin_approx_ftz_f(float) -> float;
    fn "llvm.nvvm.sqrt.approx.f" nvvm_sqrt_approx_f(float) -> float;
    fn "llvm.nvvm.sqrt.approx.ftz.f" nvvm_sqrt_approx_ftz_f(float) -> float;
    fn "llvm.nvvm.sqrt.f" nvvm_sqrt_f(float) -> float;
    fn "llvm.nvvm.sqrt.rm.d" nvvm_sqrt_rm_d(double) -> double;
    fn "llvm.nvvm.sqrt.rm.f" nvvm_sqrt_rm_f(float) -> float;
    fn "llvm.nvvm.sqrt.rm.ftz.f" nvvm_sqrt_rm_ftz_f(float) -> float;
    fn "llvm.nvvm.sqrt.rn.d" nvvm_sqrt_rn_d(double) -> double;
    fn "llvm.nvvm.sqrt.rn.f" nvvm_sqrt_rn_f(float) -> float;
    fn "llvm.nvvm.sqrt.rn.ftz.f" nvvm_sqrt_rn_ftz_f(float) -> float;
    fn "llvm.nvvm.sqrt.rp.d" nvvm_sqrt_rp_d(double) -> double;
    fn "llvm.nvvm.sqrt.rp.f" nvvm_sqrt_rp_f(float) -> float;
    fn "llvm.nvvm.sqrt.rp.ftz.f" nvvm_sqrt_rp_ftz_f(float) -> float;
    fn "llvm.nvvm.sqrt.rz.d" nvvm_sqrt_rz_d(double) -> double;
    fn "llvm.nvvm.sqrt.rz.f" nvvm_sqrt_rz_f(float) -> float;
    fn "llvm.nvvm.sqrt.rz.ftz.f" nvvm_sqrt_rz_ftz_f(float) -> float;
    fn "llvm.nvvm.trunc.d" nvvm_trunc_d(double) -> double;
    fn "llvm.nvvm.trunc.f" nvvm_trunc_f(float) -> float;
    fn "llvm.nvvm.trunc.ftz.f" nvvm_trunc_ftz_f(float) -> float;
    fn "llvm.nvvm.ui2d.rm" nvvm_ui2d_rm(i32) -> double;
    fn "llvm.nvvm.ui2d.rn" nvvm_ui2d_rn(i32) -> double;
    fn "llvm.nvvm.ui2d.rp" nvvm_ui2d_rp(i32) -> double;
    fn "llvm.nvvm.ui2d.rz" nvvm_ui2d_rz(i32) -> double;
    fn "llvm.nvvm.ui2f.rm" nvvm_ui2f_rm(i32) -> float;
    fn "llvm.nvvm.ui2f.rn" nvvm_ui2f_rn(i32) -> float;
    fn "llvm.nvvm.ui2f.rp" nvvm_ui2f_rp(i32) -> float;
    fn "llvm.nvvm.ui2f.rz" nvvm_ui2f_rz(i32) -> float;
    fn "llvm.nvvm.ull2d.rm" nvvm_ull2d_rm(i64) -> double;
    fn "llvm.nvvm.ull2d.rn" nvvm_ull2d_rn(i64) -> double;
    fn "llvm.nvvm.ull2d.rp" nvvm_ull2d_rp(i64) -> double;
    fn "llvm.nvvm.ull2d.rz" nvvm_ull2d_rz(i64) -> double;
    fn "llvm.nvvm.ull2f.rm" nvvm_ull2f_rm(i64) -> float;
    fn "llvm.nvvm.ull2f.rn" nvvm_ull2f_rn(i64) -> float;
    fn "llvm.nvvm.ull2f.rp" nvvm_ull2f_rp(i64) -> float;
    fn "llvm.nvvm.ull2f.rz" nvvm_ull2f_rz(i64) -> float;
}

fn acc(dev : int, dim : (int, int, int), block : (int, int, int), body : fn() -> ()) -> () { nvvm(dev, dim, block, body) }
fn acc_tidx() -> int    { nvvm_read_ptx_sreg_tid_x() }
fn acc_tidy() -> int    { nvvm_read_ptx_sreg_tid_y() }
fn acc_tidz() -> int    { nvvm_read_ptx_sreg_tid_z() }
fn acc_bidx() -> int    { nvvm_read_ptx_sreg_ctaid_x() }
fn acc_bidy() -> int    { nvvm_read_ptx_sreg_ctaid_y() }
fn acc_bidz() -> int    { nvvm_read_ptx_sreg_ctaid_z() }
fn acc_bdimx() -> int   { nvvm_read_ptx_sreg_ntid_x() }
fn acc_bdimy() -> int   { nvvm_read_ptx_sreg_ntid_y() }
fn acc_bdimz() -> int   { nvvm_read_ptx_sreg_ntid_z() }
fn acc_gdimx() -> int   { nvvm_read_ptx_sreg_nctaid_x() }
fn acc_gdimy() -> int   { nvvm_read_ptx_sreg_nctaid_y() }
fn acc_gdimz() -> int   { nvvm_read_ptx_sreg_nctaid_z() }
fn acc_gidx() -> int    { acc_tidx() + acc_bdimx() * acc_bidx() }
fn acc_gidy() -> int    { acc_tidy() + acc_bdimy() * acc_bidy() }
fn acc_gidz() -> int    { acc_tidz() + acc_bdimz() * acc_bidz() }
fn acc_barrier() -> ()  { nvvm_barrier0() }
fn acc_tex() -> int     { 2 }

extern "C" {
    fn __nv_expf(float) -> float;
}

fn expf(a: float) -> float { __nv_expf(a) }

