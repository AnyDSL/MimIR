extern "device" {
    // no declarations are emitted for "device" functions
    fn get_work_dim() -> u32;
    fn get_global_size(u32) -> u64;
    fn get_global_id(u32) -> u64;
    fn get_local_size(u32) -> u64;
    fn get_local_id(u32) -> u64;
    fn get_num_groups(u32) -> u64;
    fn get_group_id(u32) -> u64;
    fn get_global_offset(u32) -> u64;
    fn barrier(u32) -> ();
    fn "exp"        expf(f32) -> f32;
    fn "exp2"       exp2f(f32) -> f32;
    fn "log"        logf(f32) -> f32;
    fn "log2"       log2f(f32) -> f32;
    fn "pow"        powf(f32, f32) -> f32;
    fn "rsqrt"      rsqrtf(f32) -> f32;
    fn "sqrt"       sqrtf(f32) -> f32;
    fn "fabs"       fabsf(f32) -> f32;
    fn "tan"        tanf(f32) -> f32;
    fn "atan2"      atan2f(f32, f32) -> f32;
    fn "sin"        sinf(f32) -> f32;
    fn "cos"        cosf(f32) -> f32;
    fn "asin"       asinf(f32) -> f32;
    fn "acos"       acosf(f32) -> f32;
    fn "erf"        erff(f32) -> f32;
    fn "fmod"       fmodf(f32, f32) -> f32;
    fn "floor"      floorf(f32) -> f32;
    fn "isinf"      isinff(f32) -> i32;
    fn "isnan"      isnanf(f32) -> i32;
    fn "isfinite"   isfinitef(f32) -> i32;
    fn "fma"        fmaf(f32, f32, f32) -> f32;
    fn "mad"        madf(f32, f32, f32) -> f32;
    fn "exp"        exp(f64) -> f64;
    fn "pow"        pow(f64, f64) -> f64;
    fn "rsqrt"      rsqrt(f64) -> f64;
    fn "sqrt"       sqrt(f64) -> f64;
    fn "fabs"       fabs(f64) -> f64;
    fn "tan"        tan(f64) -> f64;
    fn "atan2"      atan2(f64, f64) -> f64;
    fn "sin"        sin(f64) -> f64;
    fn "cos"        cos(f64) -> f64;
    fn "erf"        erf(f64) -> f64;
    fn "fmod"       fmod(f64, f64) -> f64;
    fn "floor"      floor(f64) -> f64;
    fn "fma"        fma(f64, f64, f64) -> f64;
    fn "mad"        mad(f64, f64, f64) -> f64;
    fn "copysignf"  copysignf(f32, f32) -> f32;
    fn "copysign"   copysign(f64, f64) -> f64;
    fn "fmin"       fminf(f32, f32) -> f32;
    fn "fmax"       fmaxf(f32, f32) -> f32;
    fn "fmin"       fmin(f64, f64) -> f64;
    fn "fmax"       fmax(f64, f64) -> f64;
    fn "atomic_add" atomic_add_global(&i32, i32) -> i32;
    fn "atomic_add" atomic_add_local(&i32, i32) -> i32;
    fn "atomic_min" atomic_min_global(&i32, i32) -> i32;
    fn "atomic_min" atomic_min_local(&i32, i32) -> i32;
}

fn work_dim() -> int              { get_work_dim() as int }
fn global_size(idx: int) -> int   { get_global_size(idx as uint) as int }
fn global_offset(idx: int) -> int { get_global_offset(idx as uint) as int }

fn acc(dev: int, dim: (int, int, int), block: (int, int, int), body: fn() -> ()) -> () { opencl(dev, dim, block, body) }
fn acc_tidx() -> int    { get_local_id(0u) as int }
fn acc_tidy() -> int    { get_local_id(1u) as int }
fn acc_tidz() -> int    { get_local_id(2u) as int }
fn acc_bidx() -> int    { get_group_id(0u) as int }
fn acc_bidy() -> int    { get_group_id(1u) as int }
fn acc_bidz() -> int    { get_group_id(2u) as int }
fn acc_bdimx() -> int   { get_local_size(0u) as int }
fn acc_bdimy() -> int   { get_local_size(1u) as int }
fn acc_bdimz() -> int   { get_local_size(2u) as int }
fn acc_gdimx() -> int   { get_num_groups(0u) as int }
fn acc_gdimy() -> int   { get_num_groups(1u) as int }
fn acc_gdimz() -> int   { get_num_groups(2u) as int }
fn acc_gidx() -> int    { get_global_id(0u) as int }
fn acc_gidy() -> int    { get_global_id(1u) as int }
fn acc_gidz() -> int    { get_global_id(2u) as int }
fn acc_barrier() -> ()  { barrier(1u) }  // CLK_LOCAL_MEM_FENCE -> 1 // CLK_GLOBAL_MEM_FENCE -> 2
fn acc_vector_length() -> int { 32 }
fn acc_mem() -> int     { 1 }
fn acc_tex() -> int     { acc_mem() }
fn acc_spm() -> int     { 3 }
fn acc_cst() -> int     { 4 }
fn acc_dev() -> int     { 1 }

