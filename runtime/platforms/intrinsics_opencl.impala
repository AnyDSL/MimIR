extern "device" {
    // no declarations are emitted for "device" functions
    fn get_work_dim() -> u32;
    fn get_global_size(u32) -> u64;
    fn get_global_id(u32) -> u64;
    fn get_local_size(u32) -> u64;
    fn get_local_id(u32) -> u64;
    fn get_num_groups(u32) -> u64;
    fn get_group_id(u32) -> u64;
    fn get_global_offset(u32) -> u64;
    fn barrier(u32) -> ();
    fn "exp"        expf(f32) -> f32;
    fn "exp2"       exp2f(f32) -> f32;
    fn "log"        logf(f32) -> f32;
    fn "log2"       log2f(f32) -> f32;
    fn "pow"        powf(f32, f32) -> f32;
    fn "rsqrt"      rsqrtf(f32) -> f32;
    fn "sqrt"       sqrtf(f32) -> f32;
    fn "fabs"       fabsf(f32) -> f32;
    fn "sin"        sinf(f32) -> f32;
    fn "cos"        cosf(f32) -> f32;
    fn "tan"        tanf(f32) -> f32;
    fn "asin"       asinf(f32) -> f32;
    fn "acos"       acosf(f32) -> f32;
    fn "atan"       atanf(f32) -> f32;
    fn "erf"        erff(f32) -> f32;
    fn "atan2"      atan2f(f32, f32) -> f32;
    fn "fmod"       fmodf(f32, f32) -> f32;
    fn "floor"      floorf(f32) -> f32;
    fn "isinf"      isinff(f32) -> i32;
    fn "isnan"      isnanf(f32) -> i32;
    fn "isfinite"   isfinitef(f32) -> i32;
    fn "fma"        fmaf(f32, f32, f32) -> f32;
    fn "mad"        madf(f32, f32, f32) -> f32;
    fn "exp"        exp(f64) -> f64;
    fn "pow"        pow(f64, f64) -> f64;
    fn "rsqrt"      rsqrt(f64) -> f64;
    fn "sqrt"       sqrt(f64) -> f64;
    fn "fabs"       fabs(f64) -> f64;
    fn "sin"        sin(f64) -> f64;
    fn "cos"        cos(f64) -> f64;
    fn "tan"        tan(f64) -> f64;
    fn "asin"       asin(f32) -> f32;
    fn "acos"       acos(f32) -> f32;
    fn "atan"       atan(f64) -> f64;
    fn "erf"        erf(f64) -> f64;
    fn "atan2"      atan2(f64, f64) -> f64;
    fn "fmod"       fmod(f64, f64) -> f64;
    fn "floor"      floor(f64) -> f64;
    fn "fma"        fma(f64, f64, f64) -> f64;
    fn "mad"        mad(f64, f64, f64) -> f64;
    fn "copysignf"  copysignf(f32, f32) -> f32;
    fn "copysign"   copysign(f64, f64) -> f64;
    fn "fmin"       fminf(f32, f32) -> f32;
    fn "fmax"       fmaxf(f32, f32) -> f32;
    fn "fmin"       fmin(f64, f64) -> f64;
    fn "fmax"       fmax(f64, f64) -> f64;
    fn "atomic_add" atomic_add_global(&[1]i32, i32) -> i32;
    fn "atomic_add" atomic_add_local(&[3]i32, i32) -> i32;
    fn "atomic_min" atomic_min_global(&[1]i32, i32) -> i32;
    fn "atomic_min" atomic_min_local(&[3]i32, i32) -> i32;
}

fn work_dim() -> i32              { get_work_dim() as i32 }
fn global_size(idx: i32) -> i32   { get_global_size(idx as u32) as i32 }
fn global_offset(idx: i32) -> i32 { get_global_offset(idx as u32) as i32 }

fn acc(dev: i32, dim: (i32, i32, i32), block: (i32, i32, i32), body: fn() -> ()) -> () { opencl(dev, dim, block, body) }
fn acc_alloc(dev: i32, size: i32) -> Buffer { alloc_opencl(dev, size) }
fn acc_alloc_unified(dev: i32, size: i32) -> Buffer { alloc_opencl_unified(dev, size) }
fn acc_tidx() -> i32     { get_local_id(0u) as i32 }
fn acc_tidy() -> i32     { get_local_id(1u) as i32 }
fn acc_tidz() -> i32     { get_local_id(2u) as i32 }
fn acc_bidx() -> i32     { get_group_id(0u) as i32 }
fn acc_bidy() -> i32     { get_group_id(1u) as i32 }
fn acc_bidz() -> i32     { get_group_id(2u) as i32 }
fn acc_bdimx() -> i32    { get_local_size(0u) as i32 }
fn acc_bdimy() -> i32    { get_local_size(1u) as i32 }
fn acc_bdimz() -> i32    { get_local_size(2u) as i32 }
fn acc_gdimx() -> i32    { get_num_groups(0u) as i32 }
fn acc_gdimy() -> i32    { get_num_groups(1u) as i32 }
fn acc_gdimz() -> i32    { get_num_groups(2u) as i32 }
fn acc_gidx() -> i32     { get_global_id(0u) as i32 }
fn acc_gidy() -> i32     { get_global_id(1u) as i32 }
fn acc_gidz() -> i32     { get_global_id(2u) as i32 }
fn acc_barrier() -> ()   { barrier(1u) }  // CLK_LOCAL_MEM_FENCE -> 1 // CLK_GLOBAL_MEM_FENCE -> 2
fn acc_use_tex() -> bool { false }
fn acc_dev() -> i32      { 1 }

fn ldg_f32(a: &[1]f32) -> f32 { *a }
fn ldg_i32(a: &[1]i32) -> i32 { *a }

