extern "device" {
    // no declarations are emitted for "device" functions
    fn __syncthreads() -> ();
    fn expf(f32) -> f32;
    fn exp2f(f32) -> f32;
    fn logf(f32) -> f32;
    fn log2f(f32) -> f32;
    fn powf(f32, f32) -> f32;
    fn rsqrtf(f32) -> f32;
    fn sqrtf(f32) -> f32;
    fn fabsf(f32) -> f32;
    fn sinf(f32) -> f32;
    fn cosf(f32) -> f32;
    fn tanf(f32) -> f32;
    fn asinf(f32) -> f32;
    fn acosf(f32) -> f32;
    fn atanf(f32) -> f32;
    fn erff(f32) -> f32;
    fn atan2f(f32, f32) -> f32;
    fn copysignf(f32, f32) -> f32;
    fn fmaf(f32, f32, f32) -> f32;
    fn fmaxf(f32, f32) -> f32;
    fn fminf(f32, f32) -> f32;
    fn fmodf(f32, f32) -> f32;
    fn floorf(f32) -> f32;
    fn "isinf"    isinff(f32) -> i32;
    fn "isnan"    isnanf(f32) -> i32;
    fn "isfinite" isfinitef(f32) -> i32;
    fn exp(f64) -> f64;
    fn exp2(f64) -> f64;
    fn log(f64) -> f64;
    fn log2(f64) -> f64;
    fn pow(f64, f64) -> f64;
    fn rsqrt(f64) -> f64;
    fn sqrt(f64) -> f64;
    fn fabs(f64) -> f64;
    fn sin(f64) -> f64;
    fn cos(f64) -> f64;
    fn tan(f64) -> f64;
    fn asin(f64) -> f64;
    fn acos(f64) -> f64;
    fn atan(f64) -> f64;
    fn erf(f64) -> f64;
    fn atan2(f64, f64) -> f64;
    fn copysign(f64, f64) -> f64;
    fn fma(f64, f64, f64) -> f64;
    fn fmax(f64, f64) -> f64;
    fn fmin(f64, f64) -> f64;
    fn fmod(f64, f64) -> f64;
    fn floor(f64) -> f64;
    fn "isinf"     isinf(f64) -> i32;
    fn "isnan"     isnan(f64) -> i32;
    fn "isfinite"  isfinite(f64) -> i32;
    fn "atomicAdd" atomic_add_global(&[1]i32, i32) -> i32;
    fn "atomicAdd" atomic_add_local(&[3]i32, i32) -> i32;
    fn "atomicMin" atomic_min_global(&[1]i32, i32) -> i32;
    fn "atomicMin" atomic_min_local(&[3]i32, i32) -> i32;
    fn "__ldg" __ldg_f32(&[1]f32) -> f32;
    fn "__ldg" __ldg_i32(&[1]i32) -> i32;
    fn "__ldg" __ldg4_f32(&simd[f32 * 4]) -> simd[f32 * 4];
    fn "__ldg" __ldg4_i32(&simd[i32 * 4]) -> simd[i32 * 4];
    fn min(a: i32, b: i32) -> i32;
    fn max(a: i32, b: i32) -> i32;
    // wrappers for threadIdx.x etc. are provided
    fn threadIdx_x() -> i32;
    fn threadIdx_y() -> i32;
    fn threadIdx_z() -> i32;
    fn blockIdx_x() -> i32;
    fn blockIdx_y() -> i32;
    fn blockIdx_z() -> i32;
    fn blockDim_x() -> i32;
    fn blockDim_y() -> i32;
    fn blockDim_z() -> i32;
    fn gridDim_x() -> i32;
    fn gridDim_y() -> i32;
    fn gridDim_z() -> i32;
}

fn acc(dev: i32, dim: (i32, i32, i32), block: (i32, i32, i32), body: fn() -> ()) -> () { cuda(dev, dim, block, body) }
fn acc_alloc(dev: i32, size: i32) -> Buffer { alloc_cuda(dev, size) }
fn acc_alloc_unified(dev: i32, size: i32) -> Buffer { alloc_cuda_unified(dev, size) }
fn acc_tidx() -> i32     { threadIdx_x() }
fn acc_tidy() -> i32     { threadIdx_y() }
fn acc_tidz() -> i32     { threadIdx_z() }
fn acc_bidx() -> i32     { blockIdx_x() }
fn acc_bidy() -> i32     { blockIdx_y() }
fn acc_bidz() -> i32     { blockIdx_z() }
fn acc_bdimx() -> i32    { blockDim_x() }
fn acc_bdimy() -> i32    { blockDim_y() }
fn acc_bdimz() -> i32    { blockDim_z() }
fn acc_gdimx() -> i32    { gridDim_x() }
fn acc_gdimy() -> i32    { gridDim_y() }
fn acc_gdimz() -> i32    { gridDim_z() }
fn acc_gidx() -> i32     { acc_tidx() + acc_bdimx() * acc_bidx() }
fn acc_gidy() -> i32     { acc_tidy() + acc_bdimy() * acc_bidy() }
fn acc_gidz() -> i32     { acc_tidz() + acc_bdimz() * acc_bidz() }
fn acc_barrier() -> ()   { __syncthreads() }
fn acc_use_tex() -> bool { true }
fn acc_dev() -> i32      { 0 }

fn ldg_f32(a: &[1]f32) -> f32 { __ldg_f32(a) }
fn ldg_i32(a: &[1]i32) -> i32 { __ldg_i32(a) }
fn ldg4_f32(a: &simd[f32 * 4]) -> simd[f32 * 4] { __ldg4_f32(a) }
fn ldg4_i32(a: &simd[i32 * 4]) -> simd[i32 * 4] { __ldg4_i32(a) }
fn minmin(a: i32, b: i32, c: i32) -> i32 { min(min(a, b), c) }
fn maxmax(a: i32, b: i32, c: i32) -> i32 { max(max(a, b), c) }
fn minmax(a: i32, b: i32, c: i32) -> i32 { max(min(a, b), c) }
fn maxmin(a: i32, b: i32, c: i32) -> i32 { min(max(a, b), c) }
fn madf(a: f32, b: f32, c: f32) -> f32 { fmaf(a, b, c) }
fn mad(a: f64, b: f64, c: f64) -> f64 { fma(a, b, c) }

