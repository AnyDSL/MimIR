extern "device" {
    // no declarations are emitted for "device" functions
    fn __syncthreads() -> ();
    fn expf(f32) -> f32;
    fn exp2f(f32) -> f32;
    fn logf(f32) -> f32;
    fn log2f(f32) -> f32;
    fn powf(f32, f32) -> f32;
    fn rsqrtf(f32) -> f32;
    fn sqrtf(f32) -> f32;
    fn fabsf(f32) -> f32;
    fn tanf(f32) -> f32;
    fn atan2f(f32, f32) -> f32;
    fn sinf(f32) -> f32;
    fn cosf(f32) -> f32;
    fn asinf(f32) -> f32;
    fn acosf(f32) -> f32;
    fn erff(f32) -> f32;
    fn fmodf(f32, f32) -> f32;
    fn floorf(f32) -> f32;
    fn fmaf(f32, f32, f32) -> f32;
    fn "isinf"    isinff(f32) -> i32;
    fn "isnan"    isnanf(f32) -> i32;
    fn "isfinite" isfinitef(f32) -> i32;
    fn exp(f64) -> f64;
    fn pow(f64, f64) -> f64;
    fn rsqrt(f64) -> f64;
    fn sqrt(f64) -> f64;
    fn fabs(f64) -> f64;
    fn tan(f64) -> f64;
    fn atan2(f64, f64) -> f64;
    fn sin(f64) -> f64;
    fn cos(f64) -> f64;
    fn erf(f64) -> f64;
    fn fmod(f64, f64) -> f64;
    fn floor(f64) -> f64;
    fn fma(f64, f64, f64) -> f64;
    fn copysignf(f32, f32) -> f32;
    fn copysign(f64, f64) -> f64;
    fn fminf(f32, f32) -> f32;
    fn fmaxf(f32, f32) -> f32;
    fn fmin(f64, f64) -> f64;
    fn fmax(f64, f64) -> f64;
    fn "atomicAdd" atomic_add_global(&i32, i32) -> i32;
    fn "atomicAdd" atomic_add_local(&i32, i32) -> i32;
    fn "atomicMin" atomic_min_global(&i32, i32) -> i32;
    fn "atomicMin" atomic_min_local(&i32, i32) -> i32;
    // wrappers for threadIdx.x etc. are provided
    fn threadIdx_x() -> int;
    fn threadIdx_y() -> int;
    fn threadIdx_z() -> int;
    fn blockIdx_x() -> int;
    fn blockIdx_y() -> int;
    fn blockIdx_z() -> int;
    fn blockDim_x() -> int;
    fn blockDim_y() -> int;
    fn blockDim_z() -> int;
    fn gridDim_x() -> int;
    fn gridDim_y() -> int;
    fn gridDim_z() -> int;
}

fn acc(dev: int, dim: (int, int, int), block: (int, int, int), body: fn() -> ()) -> () { cuda(dev, dim, block, body) }
fn acc_tidx() -> int    { threadIdx_x() }
fn acc_tidy() -> int    { threadIdx_y() }
fn acc_tidz() -> int    { threadIdx_z() }
fn acc_bidx() -> int    { blockIdx_x() }
fn acc_bidy() -> int    { blockIdx_y() }
fn acc_bidz() -> int    { blockIdx_z() }
fn acc_bdimx() -> int   { blockDim_x() }
fn acc_bdimy() -> int   { blockDim_y() }
fn acc_bdimz() -> int   { blockDim_z() }
fn acc_gdimx() -> int   { gridDim_x() }
fn acc_gdimy() -> int   { gridDim_y() }
fn acc_gdimz() -> int   { gridDim_z() }
fn acc_gidx() -> int    { acc_tidx() + acc_bdimx() * acc_bidx() }
fn acc_gidy() -> int    { acc_tidy() + acc_bdimy() * acc_bidy() }
fn acc_gidz() -> int    { acc_tidz() + acc_bdimz() * acc_bidz() }
fn acc_barrier() -> ()  { __syncthreads() }
fn acc_vector_length() -> int { 32 }
fn acc_mem() -> int     { 1 }
fn acc_tex() -> int     { 2 }
fn acc_spm() -> int     { 3 }
fn acc_cst() -> int     { 4 }
fn acc_dev() -> int     { 0 }

fn madf(a: f32, b: f32, c: f32) -> f32 { fmaf(a, b, c) }
fn mad(a: f64, b: f64, c: f64) -> f64 { fma(a, b, c) }

