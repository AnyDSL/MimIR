extern "device" {
    // no declarations are emitted for "device" functions
    fn __syncthreads() -> ();
    fn expf(float) -> float;
    fn sqrtf(float) -> float;
    fn fabsf(float) -> float;
    fn tanf(float) -> float;
    fn atan2f(float, float) -> float;
    fn sinf(float) -> float;
    fn cosf(float) -> float;
    // wrappers for threadIdx.x etc. are provided
    fn threadIdx_x() -> int;
    fn threadIdx_y() -> int;
    fn threadIdx_z() -> int;
    fn blockIdx_x() -> int;
    fn blockIdx_y() -> int;
    fn blockIdx_z() -> int;
    fn blockDim_x() -> int;
    fn blockDim_y() -> int;
    fn blockDim_z() -> int;
    fn gridDim_x() -> int;
    fn gridDim_y() -> int;
    fn gridDim_z() -> int;
}

fn acc(dev : int, dim : (int, int, int), block : (int, int, int), body : fn() -> ()) -> () { cuda(dev, dim, block, body) }
fn acc_tidx() -> int    { threadIdx_x() }
fn acc_tidy() -> int    { threadIdx_y() }
fn acc_tidz() -> int    { threadIdx_z() }
fn acc_bidx() -> int    { blockIdx_x() }
fn acc_bidy() -> int    { blockIdx_y() }
fn acc_bidz() -> int    { blockIdx_z() }
fn acc_bdimx() -> int   { blockDim_x() }
fn acc_bdimy() -> int   { blockDim_y() }
fn acc_bdimz() -> int   { blockDim_z() }
fn acc_gdimx() -> int   { gridDim_x() }
fn acc_gdimy() -> int   { gridDim_y() }
fn acc_gdimz() -> int   { gridDim_z() }
fn acc_gidx() -> int    { acc_tidx() + acc_bdimx() * acc_bidx() }
fn acc_gidy() -> int    { acc_tidy() + acc_bdimy() * acc_bidy() }
fn acc_gidz() -> int    { acc_tidz() + acc_bdimz() * acc_bidz() }
fn acc_barrier() -> ()  { __syncthreads() }
fn acc_tex() -> int     { 2 }
fn acc_dev() -> int     { 0 }

