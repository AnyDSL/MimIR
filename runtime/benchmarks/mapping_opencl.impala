fn iteration(width : int, height : int, body : fn(int, int) -> void) -> void {
    let dim = (width, height, 1);
    let block = (32, 4, 1);

    opencl(1, dim, block, || -> void {
        let tid_x = int64_to_int32(get_global_id(0));
        let tid_y = int64_to_int32(get_global_id(1));

        body(tid_x, tid_y);
    });
}

fn iteration_sep(width : int, height : int,
                 body_col : fn(int, int) -> void,
                 body_row : fn(int, int) -> void
                ) -> void {
    let dim = (width, height, 1);
    let block = (128, 1, 1);

    opencl(1, dim, block, || -> void {
        let tid_x = int64_to_int32(get_global_id(0));
        let tid_y = int64_to_int32(get_global_id(1));

        body_col(tid_x, tid_y);
    });
    opencl(1, dim, block, || -> void {
        let tid_x = int64_to_int32(get_global_id(0));
        let tid_y = int64_to_int32(get_global_id(1));

        body_row(tid_x, tid_y);
    });
}

fn iteration_bounds(wlower : int, wupper : int, hlower : int, hupper : int,
                    body : fn(int, int, int, int) -> void) -> void {
    let dim = (wupper - wlower, hupper - hlower, 1);
    let block = (32, 4, 1);

    opencl(1, dim, block, || -> void {
        let tid_x = int64_to_int32(get_global_id(0)) + wlower;
        let tid_y = int64_to_int32(get_global_id(1)) + hlower;

        body(tid_x, tid_y, dim[0], dim[1]);
    });
}

fn iterate_(a : int, b : int, yield : fn(int, fn())) -> void {
    let mut i: int = a;
    while (i < b)
        yield(i++, || { continue; });
}
fn iterate_times_two(a : int, b : int, yield : fn(int, fn())) -> void {
    let mut i: int = a;
    while (i < b)
        yield(i*=2, || { continue; });
}

fn iteration_advanced(width : int, height : int, arr : [float], body : fn(int, int, [float]) -> void) -> void {
    @iterate_times_two(1, 16+1, |unroll : int| -> void {
        let dim = (width, height/unroll, 1);
        let block = (128, 1, 1);

        // 0 -> global
        let gmem = map(arr, 1, 0, (0, 0, 0), (width, height, 0));

        opencl(1, dim, block, || -> void {
            let tid_x = int64_to_int32(get_global_id(0));
            let tid_y = int64_to_int32(get_local_id(1)) + int64_to_int32(get_local_size(1) * get_group_id(1)) * unroll;

            @iterate_(0, unroll, |i : int| -> void {
                body(tid_x, tid_y + i * int64_to_int32(get_local_size(1)), gmem);
            });
        });
    });
}

fn iteration_multi(width : int, height : int, out : [float], arr : [float], body : fn(int, int, [float], [float]) -> void) -> void {
    let dim = (width, height, 1);
    let block = (32, 4, 1);

    let mapCPU = map(arr, 1, 0, (0, 0, 0),        (width, height/2, 0));

    opencl(1, dim, block, || -> void {
        let tid_x = int64_to_int32(get_global_id(0));
        let tid_y = int64_to_int32(get_global_id(1));

        body(tid_x, tid_y, out, mapCPU);
    });

    let mapGPU = map(arr, 2, 0, (0, height/2, 0), (width, height/2, 0));

    opencl(2, dim, block, || -> void {
        let tid_x = int64_to_int32(get_global_id(0));
        let tid_y = int64_to_int32(get_global_id(1));

        body(tid_x, tid_y, out, mapGPU);
    });
}
