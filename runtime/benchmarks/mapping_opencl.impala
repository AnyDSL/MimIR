extern opencl(int, (int, int, int), (int, int, int), fn() -> void) -> void;
extern map([float], int, int, (int, int, int), (int, int, int)) -> [float];
intrinsic int64_to_int32(int64) -> int32;

fn iteration(width : int, height : int, body : fn(int, int) -> void) -> void {
    let dim = (width, height, 1);
    let block = (32, 4, 1);

    opencl(1, dim, block, || -> void {
        let tid_x = int64_to_int32(get_global_id(0));
        let tid_y = int64_to_int32(get_global_id(1));

        body(tid_x, tid_y);
    });
}

fn iteration_bounds(wlower : int, wupper : int, hlower : int, hupper : int,
                    body : fn(int, int, int, int) -> void) -> void {
    let dim = (wupper - wlower, hupper - hlower, 1);
    let block = (32, 4, 1);

    opencl(1, dim, block, || -> void {
        let tid_x = int64_to_int32(get_global_id(0)) + wlower;
        let tid_y = int64_to_int32(get_global_id(1)) + hlower;

        body(tid_x, tid_y, dim[0], dim[1]);
    });
}

fn iteration_multi(width : int, height : int, out : [float], arr : [float], body : fn(int, int, [float], [float]) -> void) -> void {
    let dim = (width, height, 1);
    let block = (32, 4, 1);

    let mapCPU = map(arr, 1, 0, (0, 0, 0),        (width, height/2, 0));

    opencl(1, dim, block, || -> void {
        let tid_x = int64_to_int32(get_global_id(0));
        let tid_y = int64_to_int32(get_global_id(1));

        body(tid_x, tid_y, out, mapCPU);
    });

    let mapGPU = map(arr, 2, 0, (0, height/2, 0), (width, height/2, 0));

    opencl(2, dim, block, || -> void {
        let tid_x = int64_to_int32(get_global_id(0));
        let tid_y = int64_to_int32(get_global_id(1));

        body(tid_x, tid_y, out, mapGPU);
    });
}

