fn iteration(width : int, height : int, body : fn(int, int) -> void) -> void {
    let unroll = 1;
    let dim = (width, height/unroll, 1);
    let block = (128, 1, 1);

    opencl(1, dim, block, || -> void {
        let tid_x = int64_to_int32(get_global_id(0));
        let tid_y = int64_to_int32(get_local_id(1)) + int64_to_int32(get_local_size(1) * get_group_id(1)) * unroll;

        @iterate(0, unroll, |i : int| -> void {
            body(tid_x, tid_y + i * int64_to_int32(get_local_size(1)));
        });
    });
}

fn iteration_bounds(width : int, height : int, range : int,
                    clamp_lower : fn(int, int) -> int,
                    clamp_upper : fn(int, int) -> int,
                    clamp_none : fn(int, int) -> int,
                    body : fn(int, int, fn(int, int) -> int, fn(int, int) -> int, fn(int, int) -> int, fn(int, int) -> int) -> void
                   ) -> void {
    // define the unroll factor
    let unroll = 1;
    // compute the number of blocks required for boundary handling
    let mut bhr = range / 2;
    if (bhr % unroll==0) bhr = bhr / unroll;
    else bhr = bhr / unroll + 1;
    let block = (128, bhr, 1);

    // bounds account for unroll factor
    let hu = height/unroll;
    let Bounds2D = [
        (0               , block[0]        , 0            , block[1]),
        (block[0]        , width - block[0], 0            , block[1]),
        (width - block[0], width           , 0            , block[1]),

        (0               , block[0]        , block[1]     , hu - block[1]),
        (block[0]        , width - block[0], block[1]     , hu - block[1]),
        (width - block[0], width           , block[1]     , hu - block[1]),

        (0               , block[0]        , hu - block[1], hu),
        (block[0]        , width - block[0], hu - block[1], hu),
        (width - block[0], width           , hu - block[1], hu)
    ];

    @iterate(0, 9, |i : int| -> void {
        let mut left = clamp_none;
        let mut right = clamp_none;
        let mut top = clamp_none;
        let mut bottom = clamp_none;
        // 0 --- 1 --- 2
        // 3 --- 4 --- 5
        // 6 --- 7 --- 8

        // left
        if (i == 0) left = clamp_lower;
        if (i == 3) left = clamp_lower;
        if (i == 6) left = clamp_lower;

        // top
        if (i == 0) top = clamp_lower;
        if (i == 1) top = clamp_lower;
        if (i == 2) top = clamp_lower;

        // right
        if (i == 2) right = clamp_upper;
        if (i == 5) right = clamp_upper;
        if (i == 8) right = clamp_upper;

        // bottom
        if (i == 6) bottom = clamp_upper;
        if (i == 7) bottom = clamp_upper;
        if (i == 8) bottom = clamp_upper;

        let bounds = Bounds2D[i];
        let dim = (bounds[1] - bounds[0], bounds[3] - bounds[2], 1);

        opencl(1, dim, block, || -> void {
            let tid_x = int64_to_int32(get_global_id(0));
            let tid_y = int64_to_int32(get_local_id(1)) + int64_to_int32(get_local_size(1) * get_group_id(1)) * unroll;

            @iterate(0, unroll, |i : int| -> void {
                body(tid_x + bounds[0], tid_y + bounds[2] + i * int64_to_int32(get_local_size(1)), left, right, top, bottom);
            });
        });
    });
}

fn iteration_advanced(width : int, height : int,
                      arr : [float], out : [float],
                      body : fn(int, int, [float], [float]) -> void
                     ) -> void {
    @iterate_times_two(1, 16+1, |unroll : int| -> void {
        let dim = (width, height/unroll, 1);
        let block = (128, 1, 1);

        // 0 -> global
        let gmem_arr = map(arr, 1, 0, (0, 0, 0), (width, height, 0));
        let gmem_out = map(out, 1, 0, (0, 0, 0), (width, height, 0));

        opencl(1, dim, block, || -> void {
            let tid_x = int64_to_int32(get_global_id(0));
            let tid_y = int64_to_int32(get_local_id(1)) + int64_to_int32(get_local_size(1) * get_group_id(1)) * unroll;

            @iterate(0, unroll, |i : int| -> void {
                body(tid_x, tid_y + i * int64_to_int32(get_local_size(1)), gmem_arr, gmem_out);
            });
        });
    });
}

fn iteration_sep(width : int, height : int,
                 body_col : fn(int, int) -> void,
                 body_row : fn(int, int) -> void
                ) -> void {
    let dim = (width, height, 1);
    let block = (128, 1, 1);

    opencl(1, dim, block, || -> void {
        let tid_x = int64_to_int32(get_global_id(0));
        let tid_y = int64_to_int32(get_global_id(1));

        body_col(tid_x, tid_y);
    });
    opencl(1, dim, block, || -> void {
        let tid_x = int64_to_int32(get_global_id(0));
        let tid_y = int64_to_int32(get_global_id(1));

        body_row(tid_x, tid_y);
    });
}

fn iteration_sep_bounds(width : int, height : int, range : int,
                    clamp_lower : fn(int, int) -> int,
                    clamp_upper : fn(int, int) -> int,
                    clamp_none : fn(int, int) -> int,
                    body_col : fn(int, int, fn(int, int) -> int, fn(int, int) -> int, fn(int, int) -> int, fn(int, int) -> int) -> void,
                    body_row : fn(int, int, fn(int, int) -> int, fn(int, int) -> int, fn(int, int) -> int, fn(int, int) -> int) -> void
                   ) -> void {
    // define the unroll factor
    let unroll = 1;
    // compute the number of blocks required for boundary handling
    let mut bhr = range / 2;
    if (bhr % unroll==0) bhr = bhr / unroll;
    else bhr = bhr / unroll + 1;
    let block = (128, bhr, 1);

    let hu = height / unroll;
    let Bounds2DCol = [
        (0               , block[1]),
        (block[1]        , hu - block[1]),
        (hu - block[1]   , hu)
    ];

    @iterate(0, 3, |i : int| -> void {
        let mut top = clamp_none;
        let mut bottom = clamp_none;
        // 0
        // 1
        // 2

        // top
        if (i == 0) top = clamp_lower;
        // bottom
        if (i == 2) bottom = clamp_upper;

        let bounds = Bounds2DCol[i];
        let dim = (width, bounds[1] - bounds[0], 1);

        opencl(1, dim, block, || -> void {
            let tid_x = int64_to_int32(get_global_id(0));
            let tid_y = int64_to_int32(get_local_id(1)) + int64_to_int32(get_local_size(1) * get_group_id(1)) * unroll;

            @iterate(0, unroll, |i : int| -> void {
                body_col(tid_x, tid_y + bounds[0] + i * int64_to_int32(get_local_size(1)), clamp_none, clamp_none, top, bottom);
            });
        });
    });

    let Bounds2DRow = [
        (0               , block[0]),
        (block[0]        , width - block[0]),
        (width - block[0], width)
    ];

    @iterate(0, 3, |i : int| -> void {
        let mut left = clamp_none;
        let mut right = clamp_none;
        // 0 --- 1 --- 2

        // left
        if (i == 0) left = clamp_lower;
        // right
        if (i == 2) right = clamp_upper;

        let bounds = Bounds2DRow[i];
        let dim = (bounds[1] - bounds[0], height/unroll, 1);

        opencl(1, dim, block, || -> void {
            let tid_x = int64_to_int32(get_global_id(0));
            let tid_y = int64_to_int32(get_local_id(1)) + int64_to_int32(get_local_size(1) * get_group_id(1)) * unroll;

            @iterate(0, unroll, |i : int| -> void {
                body_row(tid_x + bounds[0], tid_y + i * int64_to_int32(get_local_size(1)), left, right, clamp_none, clamp_none);
            });
        });
    });
}

fn iteration_sep_advanced(width : int, height : int,
                          arr : [float], out : [float],
                          body_col : fn(int, int, [float], [float]) -> void,
                          body_row : fn(int, int, [float], [float]) -> void
                         ) -> void {
    // CPU:   1
    // GPU-0: 2
    // GPU-1: 3
    let dev = 2;
    let dim = (width, height, 1);
    let block = (128, 1, 1);

    let tmp = array(4, width, height);

    let arr_col = map(arr, dev, 0, (0, 0, 0), (width, height, 0));
    let out_col = map(tmp, dev, 0, (0, 0, 0), (width, height, 0));

    opencl(dev, dim, block, || -> void {
        let tid_x = int64_to_int32(get_global_id(0));
        let tid_y = int64_to_int32(get_global_id(1));

        body_col(tid_x, tid_y, arr_col, out_col);
    });

    //unmap(arr_col, dev, 1);
    //unmap(out_col);

    let arr_row = map(tmp, dev, 0, (0, 0, 0), (width, height, 0));
    let out_row = map(out, dev, 0, (0, 0, 0), (width, height, 0));

    opencl(dev, dim, block, || -> void {
        let tid_x = int64_to_int32(get_global_id(0));
        let tid_y = int64_to_int32(get_global_id(1));

        body_row(tid_x, tid_y, arr_row, out_row);
    });

    //unmap(arr_row);
    //unmap(out_row);

    free_array(tmp);
}

fn iteration_multi(width : int, height : int,
                   arr : [float], out : [float],
                   body : fn(int, int, [float], [float]) -> void
                  ) -> void {
    let dim = (width, height/2, 1);
    let block = (128, 1, 1);

    let map_arr_CPU = map(arr, 1, 0, (0, 0, 0),        (width, height/2, 0));
    let map_out_CPU = map(out, 1, 0, (0, 0, 0),        (width, height/2, 0));

    opencl(1, dim, block, || -> void {
        let tid_x = int64_to_int32(get_global_id(0));
        let tid_y = int64_to_int32(get_global_id(1));

        body(tid_x, tid_y, map_arr_CPU, map_out_CPU);
    });

    let map_arr_GPU = map(arr, 2, 0, (0, height/2, 0), (width, height/2, 0));
    let map_out_GPU = map(out, 2, 0, (0, height/2, 0), (width, height/2, 0));

    opencl(2, dim, block, || -> void {
        let tid_x = int64_to_int32(get_global_id(0));
        let tid_y = int64_to_int32(get_global_id(1));

        body(tid_x, tid_y, map_arr_GPU, map_out_GPU);
    });
}
