fn iterate(a : int, b : int, yield : fn(int, fn())) -> void {
    let mut i: int = a;
    while (i < b)
        yield(i++, || { continue; });
}

fn init_zero(arr : [float], width : int, height : int) -> void {
    iterate(0, width*height, |i: int| -> void {
        arr[i] = 0.0f;
    });
}
fn init_rand(arr : [float], width : int, height : int) -> void {
    iterate(0, height, |y: int| -> void {
        iterate(0, width, |x: int| -> void {
            arr[x + y*width] = random_val(width);
        });
    });
}

fn apply_stencil(range : int, stencil : [float * 3 * 3],
                 x : int, y : int, arr : [float], width : int) -> float {
    let mut sum = 0.0f;
    let half_range = range / 2;
    iterate(-half_range, half_range+1, |j : int| -> void {
        iterate(-half_range, half_range+1, |i : int| -> void {
            let stencil_val = stencil[i + half_range][j + half_range];
            if (stencil_val != 0.0f)
                sum += arr[(y+j)*width + x + i] * stencil_val;
            else {
                // additional logic for empty stencil value
            }
        });
    });

    return sum;
}

fn main() -> int {
    let width   = 2048;
    let height  = 2048;
    let range   = 3;
    let a       = 0.2f;
    let b       = 1.0f - 4.0f * a;
    let mut arr = array(4, width, height);
    let mut out = array(4, width, height);
    init_rand(arr, width, height);
    init_zero(out, width, height);

    let stencil : [float * 3 * 3] = [
        [0.0f, b, 0.0f],
        [   b, a, b   ],
        [0.0f, b, 0.0f]];

    //iteration(width, height, |x : int, y : int| -> void {
    //    out[y*width + x] = @apply_stencil(range, stencil, x, y, arr, width);
    //});

    iteration_advanced(width, height, arr, |x : int, y : int, arr : [float]| -> void {
        out[y*width + x] = @apply_stencil(range, stencil, x, y, arr, width);
    });


    let mut passed = 0;

    for (let mut y=1; y<height-1; ++y) {
        for (let mut x=1; x<width-1; ++x) {
            let ref =
                b * arr[x + 0 + (y - 1)*width] +
                b * arr[x - 1 + (y + 0)*width] +
                a * arr[x + 0 + (y + 0)*width] +
                b * arr[x + 1 + (y + 0)*width] +
                b * arr[x + 0 + (y + 1)*width];
            let mut diff = ref - out[x + y*width];
            if (diff < 0.0f) diff = -diff;
            if (diff > 0.01f) passed++;
        }
    }

    return passed;
}
