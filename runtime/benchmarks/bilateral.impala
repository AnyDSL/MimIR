intrinsic int32_to_float(int) -> float;
fn closeness(c_d : float, xf : int, yf : int) -> float {
    return expf(-c_d * int32_to_float(xf*xf)) * expf(-c_d * int32_to_float(yf*yf));
}
fn similarity(c_r : float, xi : float, x : float) -> float {
    let diff = xi - x;
    return expf(-c_r * diff * diff);
}

fn bilateral_filter(sigma_d : int, c_d : float, c_r : float, x : int, y : int,
                    arr : [float], width : int, height : int, region: int
                   ) -> float {
    let mut k = 0.0f;
    let mut p = 0.0f;

    iterate(-2*sigma_d, 2*sigma_d+1, |yf : int| -> void {
        iterate(-2*sigma_d, 2*sigma_d+1, |xf : int| -> void {
            let mut idx_x = x + xf;
            let mut idx_y = y + yf;

            // 0 --- 1 --- 2
            // 3 --- 4 --- 5
            // 6 --- 7 --- 8

            // left
            if (region == 0) idx_x = clamp_lower(idx_x, 0);
            if (region == 3) idx_x = clamp_lower(idx_x, 0);
            if (region == 6) idx_x = clamp_lower(idx_x, 0);

            // right
            if (region == 2) idx_x = clamp_upper(idx_x, width);
            if (region == 5) idx_x = clamp_upper(idx_x, width);
            if (region == 8) idx_x = clamp_upper(idx_x, width);

            // top
            if (region == 0) idx_y = clamp_lower(idx_y, 0);
            if (region == 1) idx_y = clamp_lower(idx_y, 0);
            if (region == 2) idx_y = clamp_lower(idx_y, 0);

            // bottom
            if (region == 6) idx_y = clamp_upper(idx_y, height);
            if (region == 7) idx_y = clamp_upper(idx_y, height);
            if (region == 8) idx_y = clamp_upper(idx_y, height);

            // all in
            if (region == 10) {
                idx_x = clamp_lower(idx_x, 0);
                idx_x = clamp_upper(idx_x, width);
                idx_y = clamp_upper(idx_y, height);
                idx_y = clamp_lower(idx_y, 0);
            }

            let diff = arr[idx_y * width + idx_x] - arr[y * width + x];

            let c = closeness(c_d, xf, yf);
            let s = similarity(c_r, arr[idx_y * width + idx_x], arr[y * width + x]);
            k += c * s;
            p += c * s * arr[idx_y * width + idx_x];
        });
    });

    return p/k;
}

fn bilateral_filter_mask(sigma_d : int, c_r : float, mask : [float * 9 * 9],
                         x : int, y : int, arr : [float],
                         width : int, height : int, region: int
                        ) -> float {
    let mut k = 0.0f;
    let mut p = 0.0f;

    iterate(-2*sigma_d, 2*sigma_d+1, |yf : int| -> void {
        iterate(-2*sigma_d, 2*sigma_d+1, |xf : int| -> void {
            let mut idx_x = x + xf;
            let mut idx_y = y + yf;

            // 0 --- 1 --- 2
            // 3 --- 4 --- 5
            // 6 --- 7 --- 8

            // left
            if (region == 0) idx_x = clamp_lower(idx_x, 0);
            if (region == 3) idx_x = clamp_lower(idx_x, 0);
            if (region == 6) idx_x = clamp_lower(idx_x, 0);

            // right
            if (region == 2) idx_x = clamp_upper(idx_x, width);
            if (region == 5) idx_x = clamp_upper(idx_x, width);
            if (region == 8) idx_x = clamp_upper(idx_x, width);

            // top
            if (region == 0) idx_y = clamp_lower(idx_y, 0);
            if (region == 1) idx_y = clamp_lower(idx_y, 0);
            if (region == 2) idx_y = clamp_lower(idx_y, 0);

            // bottom
            if (region == 6) idx_y = clamp_upper(idx_y, height);
            if (region == 7) idx_y = clamp_upper(idx_y, height);
            if (region == 8) idx_y = clamp_upper(idx_y, height);

            // all in
            if (region == 10) {
                idx_x = clamp_lower(idx_x, 0);
                idx_x = clamp_upper(idx_x, width);
                idx_y = clamp_upper(idx_y, height);
                idx_y = clamp_lower(idx_y, 0);
            }


            let diff = arr[idx_y * width + idx_x] - arr[y * width + x];

            let s = expf(-c_r * diff*diff) * mask[xf + 2*sigma_d][yf + 2*sigma_d];

            k += s;
            p += s * arr[idx_y * width + idx_x];
        });
    });

    return p/k;
}

fn main() -> int {
    let width   = 1024;
    let height  = 1024;
    //let sigma_d = 3;
    //let range = 4*sigma_d + 1;
    let sigma_r = 5.0f;
    //let c_d = 1.0f / (2.0f * sigma_d*sigma_d);
    let c_r = 1.0f / (2.0f * sigma_r*sigma_r);
    let mut arr = array(4, width, height);
    let mut out = array(4, width, height);

    //let sigma_d = 1;
    //let c_d = 1.0f / (2.0f * 1.0f*1.0f);
    //let mask = [
    //    [0.018316f, 0.082085f, 0.135335f, 0.082085f, 0.018316f],
    //    [0.082085f, 0.367879f, 0.606531f, 0.367879f, 0.082085f],
    //    [0.135335f, 0.606531f, 1.000000f, 0.606531f, 0.135335f],
    //    [0.082085f, 0.367879f, 0.606531f, 0.367879f, 0.082085f],
    //    [0.018316f, 0.082085f, 0.135335f, 0.082085f, 0.018316f]];

    let sigma_d = 2;
    let c_d = 1.0f / (2.0f * 2.0f*2.0f);
    let mask = [
        [0.018316f, 0.043937f, 0.082085f, 0.119433f, 0.135335f, 0.119433f, 0.082085f, 0.043937f, 0.018316f],
        [0.043937f, 0.105399f, 0.196912f, 0.286505f, 0.324652f, 0.286505f, 0.196912f, 0.105399f, 0.043937f],
        [0.082085f, 0.196912f, 0.367879f, 0.535261f, 0.606531f, 0.535261f, 0.367879f, 0.196912f, 0.082085f],
        [0.119433f, 0.286505f, 0.535261f, 0.778801f, 0.882497f, 0.778801f, 0.535261f, 0.286505f, 0.119433f],
        [0.135335f, 0.324652f, 0.606531f, 0.882497f, 1.000000f, 0.882497f, 0.606531f, 0.324652f, 0.135335f],
        [0.119433f, 0.286505f, 0.535261f, 0.778801f, 0.882497f, 0.778801f, 0.535261f, 0.286505f, 0.119433f],
        [0.082085f, 0.196912f, 0.367879f, 0.535261f, 0.606531f, 0.535261f, 0.367879f, 0.196912f, 0.082085f],
        [0.043937f, 0.105399f, 0.196912f, 0.286505f, 0.324652f, 0.286505f, 0.196912f, 0.105399f, 0.043937f],
        [0.018316f, 0.043937f, 0.082085f, 0.119433f, 0.135335f, 0.119433f, 0.082085f, 0.043937f, 0.018316f]];

    //let sigma_d = 3;
    //let c_d = 1.0f / (2.0f * 3.0f*3.0f);
    //let mask = [
    //    [0.018316f, 0.033746f, 0.055638f, 0.082085f, 0.108368f, 0.128022f, 0.135335f, 0.128022f, 0.108368f, 0.082085f, 0.055638f, 0.033746f, 0.018316f],
    //    [0.033746f, 0.062177f, 0.102512f, 0.151240f, 0.199666f, 0.235877f, 0.249352f, 0.235877f, 0.199666f, 0.151240f, 0.102512f, 0.062177f, 0.033746f],
    //    [0.055638f, 0.102512f, 0.169013f, 0.249352f, 0.329193f, 0.388896f, 0.411112f, 0.388896f, 0.329193f, 0.249352f, 0.169013f, 0.102512f, 0.055638f],
    //    [0.082085f, 0.151240f, 0.249352f, 0.367879f, 0.485672f, 0.573753f, 0.606531f, 0.573753f, 0.485672f, 0.367879f, 0.249352f, 0.151240f, 0.082085f],
    //    [0.108368f, 0.199666f, 0.329193f, 0.485672f, 0.641180f, 0.757465f, 0.800737f, 0.757465f, 0.641180f, 0.485672f, 0.329193f, 0.199666f, 0.108368f],
    //    [0.128022f, 0.235877f, 0.388896f, 0.573753f, 0.757465f, 0.894839f, 0.945959f, 0.894839f, 0.757465f, 0.573753f, 0.388896f, 0.235877f, 0.128022f],
    //    [0.135335f, 0.249352f, 0.411112f, 0.606531f, 0.800737f, 0.945959f, 1.000000f, 0.945959f, 0.800737f, 0.606531f, 0.411112f, 0.249352f, 0.135335f],
    //    [0.128022f, 0.235877f, 0.388896f, 0.573753f, 0.757465f, 0.894839f, 0.945959f, 0.894839f, 0.757465f, 0.573753f, 0.388896f, 0.235877f, 0.128022f],
    //    [0.108368f, 0.199666f, 0.329193f, 0.485672f, 0.641180f, 0.757465f, 0.800737f, 0.757465f, 0.641180f, 0.485672f, 0.329193f, 0.199666f, 0.108368f],
    //    [0.082085f, 0.151240f, 0.249352f, 0.367879f, 0.485672f, 0.573753f, 0.606531f, 0.573753f, 0.485672f, 0.367879f, 0.249352f, 0.151240f, 0.082085f],
    //    [0.055638f, 0.102512f, 0.169013f, 0.249352f, 0.329193f, 0.388896f, 0.411112f, 0.388896f, 0.329193f, 0.249352f, 0.169013f, 0.102512f, 0.055638f],
    //    [0.033746f, 0.062177f, 0.102512f, 0.151240f, 0.199666f, 0.235877f, 0.249352f, 0.235877f, 0.199666f, 0.151240f, 0.102512f, 0.062177f, 0.033746f],
    //    [0.018316f, 0.033746f, 0.055638f, 0.082085f, 0.108368f, 0.128022f, 0.135335f, 0.128022f, 0.108368f, 0.082085f, 0.055638f, 0.033746f, 0.018316f]];

    // SS
    @iteration(width, height, arr, out,
        |x : int, y : int, arr : [float], out : [float]| -> void {
            //out[y*width + x] = bilateral_filter(sigma_d, c_d, c_r, x, y, arr, width, height, 10);
            out[y*width + x] = bilateral_filter_mask(sigma_d, c_r, mask, x, y, arr, width, height, 10);
        }
    );

    //// SS + BH
    //let range = 4*sigma_d + 1;
    //@iteration_bounds(width, height, range, arr, out,
    //    |x : int, y : int, arr : [float], out : [float], region : int| -> void {
    //        //out[y*width + x] = bilateral_filter(sigma_d, c_d, c_r, x, y, arr, width, height, region);
    //        out[y*width + x] = bilateral_filter_mask(sigma_d, c_r, mask, x, y, arr, width, height, region);
    //    }
    //);

    let mut passed = 0;
    //// compare results
    //let mut rms_err = 0.0f;   // RMS error
    //let EPS = 0.02f;
    //for (let mut y=0; y<height; ++y) {
    //    for (let mut x=0; x<width; ++x) {
    //        let ref = @bilateral_filter_mask(sigma_d, c_r, mask, x, y, arr,
    //                                         width, height, 10);
    //        let mut err = ref - out[y*width + x];
    //        rms_err += err*err;

    //        if (err < 0.0f) err = -err;
    //        if (err > EPS) passed++;
    //    }
    //}
    ////rms_err = sqrtf(rms_err / ((float)(width*height)));

    free_array(arr);
    free_array(out);

    return passed;
}

