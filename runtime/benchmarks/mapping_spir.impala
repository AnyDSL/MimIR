fn iteration(width : int, height : int, body : fn(int, int) -> void) -> void {
    let dim = (width, height, 1);
    let block = (32, 4, 1);

    spir(1, dim, block, || -> void {
        let tid_x = int64_to_int32(get_global_id(0));
        let tid_y = int64_to_int32(get_global_id(1));

        body(tid_x, tid_y);
    });
}

fn iteration_sep(width : int, height : int,
                 body_col : fn(int, int) -> void,
                 body_row : fn(int, int) -> void
                ) -> void {
    let dim = (width, height, 1);
    let block = (128, 1, 1);

    spir(1, dim, block, || -> void {
        let tid_x = int64_to_int32(get_global_id(0));
        let tid_y = int64_to_int32(get_global_id(1));

        body_col(tid_x, tid_y);
    });
    spir(1, dim, block, || -> void {
        let tid_x = int64_to_int32(get_global_id(0));
        let tid_y = int64_to_int32(get_global_id(1));

        body_row(tid_x, tid_y);
    });
}

fn iteration_bounds(wlower : int, wupper : int, hlower : int, hupper : int,
                    body : fn(int, int, int, int) -> void) -> void {
    let dim = (wupper - wlower, hupper - hlower, 1);
    let block = (32, 4, 1);

    spir(1, dim, block, || -> void {
        let tid_x = int64_to_int32(get_global_id(0)) + wlower;
        let tid_y = int64_to_int32(get_global_id(1)) + hlower;

        body(tid_x, tid_y, dim[0], dim[1]);
    });
}

fn iterate_(a : int, b : int, yield : fn(int, fn())) -> void {
    let mut i: int = a;
    while (i < b)
        yield(i++, || { continue; });
}
fn iterate_times_two(a : int, b : int, yield : fn(int, fn())) -> void {
    let mut i: int = a;
    while (i < b)
        yield(i*=2, || { continue; });
}

fn iteration_advanced(width : int, height : int,
                      arr : [float], out : [float],
                      body : fn(int, int, [float], [float]) -> void
                     ) -> void {
    @iterate_times_two(1, 16+1, |unroll : int| -> void {
        let dim = (width, height/unroll, 1);
        let block = (128, 1, 1);

        // 0 -> global
        let gmem_arr = map(arr, 1, 0, (0, 0, 0), (width, height, 0));
        let gmem_out = map(out, 1, 0, (0, 0, 0), (width, height, 0));

        spir(1, dim, block, || -> void {
            let tid_x = int64_to_int32(get_global_id(0));
            let tid_y = int64_to_int32(get_local_id(1)) + int64_to_int32(get_local_size(1) * get_group_id(1)) * unroll;

            @iterate_(0, unroll, |i : int| -> void {
                body(tid_x, tid_y + i * int64_to_int32(get_local_size(1)), gmem_arr, gmem_out);
            });
        });
    });
}

fn iteration_sep_advanced(width : int, height : int,
                          arr : [float], out : [float],
                          body_col : fn(int, int, [float], [float]) -> void,
                          body_row : fn(int, int, [float], [float]) -> void
                         ) -> void {
    // CPU:   1
    // GPU-0: 2
    // GPU-1: 3
    let dev = 2;
    let dim = (width, height, 1);
    let block = (128, 1, 1);

    let tmp = array(4, width, height);

    let arr_col = map(arr, dev, 0, (0, 0, 0), (width, height, 0));
    let out_col = map(tmp, dev, 0, (0, 0, 0), (width, height, 0));

    spir(dev, dim, block, || -> void {
        let tid_x = int64_to_int32(get_global_id(0));
        let tid_y = int64_to_int32(get_global_id(1));

        body_col(tid_x, tid_y, arr_col, out_col);
    });

    //unmap(arr_col, dev, 1);
    //unmap(out_col);

    let arr_row = map(tmp, dev, 0, (0, 0, 0), (width, height, 0));
    let out_row = map(out, dev, 0, (0, 0, 0), (width, height, 0));

    spir(dev, dim, block, || -> void {
        let tid_x = int64_to_int32(get_global_id(0));
        let tid_y = int64_to_int32(get_global_id(1));

        body_row(tid_x, tid_y, arr_row, out_row);
    });

    //unmap(arr_row);
    //unmap(out_row);

    free_array(tmp);
}
