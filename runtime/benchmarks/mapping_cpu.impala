fn range(a: int, b: int, yield: fn(int, fn())) -> void {
    let mut i: int = a;
    while (i < b)
        yield(i++, || { continue; });
}

fn iteration(width: int, height: int, body: fn(int, int) -> void) -> void {
    for (let mut y=0; y<height; ++y)
        for (let mut x=0; x<width; ++x)
            body(x, y);
}

fn iteration_bounds(wlower: int, wupper: int, hlower: int, hupper: int,
                    body: fn(int, int, int, int) -> void) -> void {
    //for (let mut y=hlower; y<hupper; ++y)
        //for (let mut x=wlower; x<wupper; ++x)
            //body(x, y, wupper - wlower, hupper - hlower);
    $range(hlower, hupper, |y: int| -> void {
        $range(wlower, wupper, |x: int| -> void {
            body(x, y, wupper - wlower, hupper - hlower);
        });
    });
}

fn iteration_sep(width : int, height : int,
                 body_col : fn(int, int) -> void,
                 body_row : fn(int, int) -> void
                ) -> void {
    for (let mut y=0; y<height; ++y)
        for (let mut x=0; x<width; ++x)
            body_col(x, y);

    for (let mut y=0; y<height; ++y)
        for (let mut x=0; x<width; ++x)
            body_row(x, y);
}

fn iteration_sep_advanced(width : int, height : int,
                          arr : [float], out : [float], tmp : [float],
                          body_col : fn(int, int, [float], [float]) -> void,
                          body_row : fn(int, int, [float], [float]) -> void
                         ) -> void {
    for (let mut y=0; y<height; ++y) {
        for (let mut x=0; x<width; ++x)
            body_col(x, y, arr, tmp);
        for (let mut x=0; x<width; ++x)
            body_row(x, y, tmp, out);
    }
}
