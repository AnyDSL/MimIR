fn iteration(width : int, height : int,
             arr : [float], out : [float],
             body : fn(int, int, [float], [float]) -> void
            ) -> void {
    getMicroTime();
    $iterate(0, height, |y: int| -> void {
        $iterate(0, width, |x: int| -> void {
            body(x, y, arr, out);
        });
    });
    getMicroTime();
}

fn iteration_bounds(width : int, height : int, ksize : int,
                    arr : [float], out : [float],
                    body : fn(int, int, [float], [float], int) -> void
                   ) -> void {
    let bbh = ksize / 2;
    // (minx, maxx, miny, maxy)
    let Bounds2D = [
        (0          , bbh        , 0         , bbh),
        (bbh        , width - bbh, 0         , bbh),
        (width - bbh, width      , 0         , bbh),

        (0          , bbh        , height - bbh, height),
        (bbh        , width - bbh, height - bbh, height),
        (width - bbh, width      , height - bbh, height),

        (0          , bbh        , bbh         , height - bbh),
        (width - bbh, width      , bbh         , height - bbh),
        (bbh        , width - bbh, bbh         , height - bbh)
    ];

    iterate(0, 9, |region : int| -> void {
        let bounds = Bounds2D[region];
        $iterate(bounds[2], bounds[3], |y: int| -> void {
            $iterate(bounds[0], bounds[1], |x: int| -> void {
                body(x, y, arr, out, region);
            });
        });
    });
}

fn iteration_sep(width : int, height : int,
                 arr : [float], out : [float],
                 body_col : fn(int, int, [float], [float]) -> void,
                 body_row : fn(int, int, [float], [float]) -> void
                ) -> void {
    // allocate temporary array
    let mut tmp = array(4, width, height);
    init_zero(tmp, $width, $height);

    getMicroTime();
    $iterate(0, height, |y: int| -> void {
        $iterate(0, width, |x: int| -> void {
            body_col(x, y, arr, tmp);
        });
    });

    $iterate(0, height, |y: int| -> void {
        $iterate(0, width, |x: int| -> void {
            body_row(x, y, tmp, out);
        });
    });
    getMicroTime();
    free_array(tmp);
}

fn iteration_sep_bounds(width : int, height : int, ksize : int,
                        arr : [float], out : [float],
                        body_col : fn(int, int, [float], [float], int) -> void,
                        body_row : fn(int, int, [float], [float], int) -> void
                       ) -> void {
    // allocate temporary array
    let mut tmp = array(4, width, height);
    init_zero(tmp, $width, $height);

    let bbh = ksize / 2;

    let Bounds2DCol = [
        (0           , bbh),
        (bbh         , height - bbh),
        (height - bbh, height)
    ];

    let Bounds2DRow = [
        (0          , bbh),
        (bbh        , width - bbh),
        (width - bbh, width)
    ];

    getMicroTime();
    iterate(0, 3, |region : int| -> void {
        let bounds = Bounds2DCol[region];
        $iterate(bounds[0], bounds[1], |y: int| -> void {
            $iterate(0, width, |x: int| -> void {
                body_col(x, y, arr, tmp, region);
            });
        });
    });

    iterate(0, 3, |region : int| -> void {
        let bounds = Bounds2DRow[region];
        $iterate(0, height, |y: int| -> void {
            $iterate(bounds[0], bounds[1], |x: int| -> void {
                body_row(x, y, tmp, arr, region);
            });
        });
    });
    getMicroTime();
    free_array(tmp);
}


fn iteration_sep_advanced(width : int, height : int,
                          arr : [float], out : [float],
                          body_col : fn(int, int, [float], [float]) -> void,
                          body_row : fn(int, int, [float], [float]) -> void
                         ) -> void {
    let tmp = array(4, width, 1);

    getMicroTime();
    $iterate(0, height, |y: int| -> void {
        $iterate(0, width, |x: int| -> void {
            body_col(x, y, arr, tmp);
        });
        $iterate(0, width, |x: int| -> void {
            body_row(x, y, tmp, out);
        });
    });

    getMicroTime();
    free_array(tmp);
}

fn iteration_sep_bounds_advanced(width : int, height : int, ksize : int,
                                 arr : [float], out : [float],
                                 body_col : fn(int, int, [float], [float], int) -> void,
                                 body_row : fn(int, int, [float], [float], int) -> void
                               ) -> void {
    let bbh = ksize / 2;

    let Bounds2DCol = [
        (0           , bbh),
        (bbh         , height - bbh),
        (height - bbh, height)
    ];

    let Bounds2DRow = [
        (0          , bbh),
        (bbh        , width - bbh),
        (width - bbh, width)
    ];

    getMicroTime();
    let tmp = array(4, width, 1);

    iterate(0, 3, |region_col : int| -> void {
        let bounds_col = Bounds2DCol[region_col];
        $iterate(bounds_col[0], bounds_col[1], |y: int| -> void {
            iterate(0, 3, |region_row : int| -> void {
                let bounds_row = Bounds2DRow[region_row];
                $iterate(bounds_row[0], bounds_row[1], |x: int| -> void {
                    body_col(x, y, arr, tmp, region_col);
                });
            });
            iterate(0, 3, |region_row : int| -> void {
                let bounds_row = Bounds2DRow[region_row];
                $iterate(bounds_row[0], bounds_row[1], |x: int| -> void {
                    body_row(x, y, tmp, out, region_row);
                });
            });
        });
    });

    free_array(tmp);
    getMicroTime();
}
