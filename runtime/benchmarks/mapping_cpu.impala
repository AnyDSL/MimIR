fn iteration(width: int, height: int, body: fn(int, int) -> void) -> void {
    getMicroTime();
    for (let mut y=0; y<height; ++y)
        for (let mut x=0; x<width; ++x)
            body(x, y);
    getMicroTime();
}

fn iteration_bounds(width : int, height : int, range : int,
                    body : fn(int, int, int) -> void
                   ) -> void {
    let bhr = range / 2;
    // (minx, maxx, miny, maxy)
    let Bounds2D = [
        (0          , bhr        , 0         , bhr),
        (bhr        , width - bhr, 0         , bhr),
        (width - bhr, width      , 0         , bhr),

        (0          , bhr        , height - bhr, height),
        (bhr        , width - bhr, height - bhr, height),
        (width - bhr, width      , height - bhr, height),

        (0          , bhr        , bhr         , height - bhr),
        (width - bhr, width      , bhr         , height - bhr),
        (bhr        , width - bhr, bhr         , height - bhr)
    ];

    @iterate(0, 9, |region : int| -> void {
        let bounds = Bounds2D[region];
        $iterate(bounds[2], bounds[3], |y: int| -> void {
            $iterate(bounds[0], bounds[1], |x: int| -> void {
                body(x, y, region);
            });
        });
    });
}

fn iteration_sep(width : int, height : int,
                 body_col : fn(int, int) -> void,
                 body_row : fn(int, int) -> void
                ) -> void {
    getMicroTime();
    for (let mut y=0; y<height; ++y)
        for (let mut x=0; x<width; ++x)
            body_col(x, y);

    for (let mut y=0; y<height; ++y)
        for (let mut x=0; x<width; ++x)
            body_row(x, y);
    getMicroTime();
}

fn iteration_sep_bounds(width : int, height : int, range : int,
                    body_col : fn(int, int, int) -> void,
                    body_row : fn(int, int, int) -> void
                   ) -> void {
    let bhr = range / 2;

    let Bounds2DCol = [
        (0           , bhr),
        (bhr         , height - bhr),
        (height - bhr, height)
    ];

    getMicroTime();
    @iterate(0, 3, |region : int| -> void {
        let bounds = Bounds2DCol[region];
        $iterate(0, height, |y: int| -> void {
            $iterate(bounds[0], bounds[1], |x: int| -> void {
                body_col(x, y, region);
            });
        });
    });

    let Bounds2DRow = [
        (0          , bhr),
        (bhr        , width - bhr),
        (width - bhr, width)
    ];

    @iterate(0, 3, |region : int| -> void {
        let bounds = Bounds2DRow[region];
        $iterate(bounds[0], bounds[1], |y: int| -> void {
            $iterate(0, width, |x: int| -> void {
                body_row(x, y, region);
            });
        });
    });
    getMicroTime();
}


fn iteration_sep_advanced(width : int, height : int,
                          arr : [float], out : [float],
                          body_col : fn(int, int, [float], [float]) -> void,
                          body_row : fn(int, int, [float], [float]) -> void
                         ) -> void {
    let tmp = array(4, width, 1);

    getMicroTime();
    for (let mut y=1; y<height-1; ++y) {
        for (let mut x=0; x<width; ++x)
            body_col(x, y, arr, tmp);
        for (let mut x=0; x<width; ++x)
            body_row(x, y, tmp, out);
    }
    getMicroTime();

    free_array(tmp);
}
