extern array(int) -> [float];
extern reset_and_start_timer() -> void;
extern print_time() -> void;

fn checked_matmul(square: bool, res: [float], mut num_rows: int, mut num_cols: int, a: [float], b: [float], num: int) -> void {
    if (square) {
        num_rows = num;
        num_cols = num;
    }
    fn index_res(x: int, y: int) -> int {
        return num_cols*y + x;
    }
    fn index_a(x: int, y: int) -> int {
        return index_res(x, y);
    }
    fn index_b(x: int, y: int) -> int {
        return num*y + x;
    }

    for (let mut y = 0; y != num_rows; ++y) {
        for (let mut x = 0; x != num_cols; ++x) {
            let mut sum = 0.f;
            for (let mut i = 0; i != num; ++i) {
                sum += a[index_a(i, y)]*b[index_b(x, i)];
            }
            res[index_res(x, y)] = sum;
        }
    }
}

fn matmul2(res: [float], a: [float], b: [float], num: int) -> void {
    @checked_matmul(true, res, num, num, a, b, num);
}

fn matmul(res: [float], num_rows: int, num_cols: int, a: [float], b: [float], num: int) -> void {
    @checked_matmul(false, res, num_rows, num_cols, a, b, num);
}

fn main() -> int {
    let a   = array(3*3);
    let b   = array(3*3);
    let res = array(3*3);
    reset_and_start_timer();
    @matmul2(res, a, b, 9);
    print_time();
    return 0;
}
