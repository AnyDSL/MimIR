extern nvvm(int, (int, int, int), (int, int, int), fn() -> void) -> void;
extern map([float], int, int, (int, int, int), (int, int, int)) -> [float];

fn iteration(width : int, height : int, body : fn(int, int) -> void) -> void {
    let dim = (width, height, 1);
    let block = (128, 1, 1);

    nvvm(1, dim, block, || -> void {
        let tid_x = nvvm_read_ptx_sreg_tid_x() + nvvm_read_ptx_sreg_ntid_x() * nvvm_read_ptx_sreg_ctaid_x();
        let tid_y = nvvm_read_ptx_sreg_tid_y() + nvvm_read_ptx_sreg_ntid_y() * nvvm_read_ptx_sreg_ctaid_y();

        body(tid_x, tid_y);
    });
}

fn iteration_bounds(wlower : int, wupper : int, hlower : int, hupper : int,
                    body : fn(int, int, int, int) -> void) -> void {
    let dim = (wupper - wlower, hupper - hlower, 1);
    let block = (32, 4, 1);

    nvvm(1, dim, block, || -> void {
        let tid_x = nvvm_read_ptx_sreg_tid_x() + nvvm_read_ptx_sreg_ntid_x() * nvvm_read_ptx_sreg_ctaid_x();
        let tid_y = nvvm_read_ptx_sreg_tid_y() + nvvm_read_ptx_sreg_ntid_y() * nvvm_read_ptx_sreg_ctaid_y();

        body(tid_x + wlower, tid_y + hlower, dim[0], dim[1]);
    });
}

fn iterate_(a : int, b : int, yield : fn(int, fn())) -> void {
    let mut i: int = a;
    while (i < b)
        yield(i++, || { continue; });
}
fn iterate_times_two(a : int, b : int, yield : fn(int, fn())) -> void {
    let mut i: int = a;
    while (i < b)
        yield(i*=2, || { continue; });
}

fn iteration_advanced(width : int, height : int, arr : [float], body : fn(int, int, [float]) -> void) -> void {
    @iterate_times_two(1, 256, |unroll : int| -> void {
        let dim = (width, height/unroll, 1);
        let block = (128, 1, 1);

        // 0 -> global
        // 1 -> texture
        // 2 -> shared
        let gmem = map(arr, 1, 0, (0, 0, 0), (width, height, 0));

        nvvm(1, dim, block, || -> void {
            let tid_x = nvvm_read_ptx_sreg_tid_x() + nvvm_read_ptx_sreg_ntid_x() * nvvm_read_ptx_sreg_ctaid_x();
            let tid_y = nvvm_read_ptx_sreg_tid_y() + nvvm_read_ptx_sreg_ntid_y() * nvvm_read_ptx_sreg_ctaid_y() * unroll;

            iterate_(0, unroll, |i : int| -> void {
                body(tid_x, tid_y + i * nvvm_read_ptx_sreg_ntid_y(), gmem);
            });
        });

        //let tex = map(arr, 1, 1, (0, 0, 0), (width, height, 0));

        //nvvm(1, dim, block, || -> void {
        //    let tid_x = nvvm_read_ptx_sreg_tid_x() + nvvm_read_ptx_sreg_ntid_x() * nvvm_read_ptx_sreg_ctaid_x();
        //    let tid_y = nvvm_read_ptx_sreg_tid_y() + nvvm_read_ptx_sreg_ntid_y() * nvvm_read_ptx_sreg_ctaid_y() * unroll;

        //    @iterate_(0, unroll, |i : int| -> void {
        //        body(tid_x, tid_y + i * nvvm_read_ptx_sreg_ntid_y(), tex);
        //    });
        //});
    });
}

