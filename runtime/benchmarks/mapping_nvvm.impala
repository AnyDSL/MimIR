fn iteration(width : int, height : int, body : fn(int, int) -> void) -> void {
    let dim = (width, height, 1);
    let block = (128, 1, 1);

    nvvm(1, dim, block, || -> void {
        let tid_x = nvvm_read_ptx_sreg_tid_x() + nvvm_read_ptx_sreg_ntid_x() * nvvm_read_ptx_sreg_ctaid_x();
        let tid_y = nvvm_read_ptx_sreg_tid_y() + nvvm_read_ptx_sreg_ntid_y() * nvvm_read_ptx_sreg_ctaid_y();

        body(tid_x, tid_y);
    });
}

fn iteration_sep(width : int, height : int,
                 body_col : fn(int, int) -> void,
                 body_row : fn(int, int) -> void
                ) -> void {
    let dim = (width, height, 1);
    let block = (128, 1, 1);

    nvvm(1, dim, block, || -> void {
        let tid_x = nvvm_read_ptx_sreg_tid_x() + nvvm_read_ptx_sreg_ntid_x() * nvvm_read_ptx_sreg_ctaid_x();
        let tid_y = nvvm_read_ptx_sreg_tid_y() + nvvm_read_ptx_sreg_ntid_y() * nvvm_read_ptx_sreg_ctaid_y();

        body_col(tid_x, tid_y);
    });
    nvvm(1, dim, block, || -> void {
        let tid_x = nvvm_read_ptx_sreg_tid_x() + nvvm_read_ptx_sreg_ntid_x() * nvvm_read_ptx_sreg_ctaid_x();
        let tid_y = nvvm_read_ptx_sreg_tid_y() + nvvm_read_ptx_sreg_ntid_y() * nvvm_read_ptx_sreg_ctaid_y();

        body_row(tid_x, tid_y);
    });
}

fn iteration_bounds(wlower : int, wupper : int, hlower : int, hupper : int,
                    body : fn(int, int, int, int) -> void) -> void {
    let dim = (wupper - wlower, hupper - hlower, 1);
    let block = (32, 4, 1);

    nvvm(1, dim, block, || -> void {
        let tid_x = nvvm_read_ptx_sreg_tid_x() + nvvm_read_ptx_sreg_ntid_x() * nvvm_read_ptx_sreg_ctaid_x();
        let tid_y = nvvm_read_ptx_sreg_tid_y() + nvvm_read_ptx_sreg_ntid_y() * nvvm_read_ptx_sreg_ctaid_y();

        body(tid_x + wlower, tid_y + hlower, dim[0], dim[1]);
    });
}

fn iteration_advanced(width : int, height : int,
                      arr : [float], out : [float],
                      body : fn(int, int, [float], [float]) -> void
                     ) -> void {
    @iterate_times_two(1, 16+1, |unroll : int| -> void {
        let dim = (width, height/unroll, 1);
        let block = (128, 1, 1);

        // 0 -> global
        // 1 -> texture
        // 2 -> shared
        let gmem_arr = map(arr, 1, 0, (0, 0, 0), (width, height, 0));
        let gmem_out = map(out, 1, 0, (0, 0, 0), (width, height, 0));

        nvvm(1, dim, block, || -> void {
            let tid_x = nvvm_read_ptx_sreg_tid_x() + nvvm_read_ptx_sreg_ntid_x() * nvvm_read_ptx_sreg_ctaid_x();
            let tid_y = nvvm_read_ptx_sreg_tid_y() + nvvm_read_ptx_sreg_ntid_y() * nvvm_read_ptx_sreg_ctaid_y() * unroll;

            @iterate(0, unroll, |i : int| -> void {
                body(tid_x, tid_y + i * nvvm_read_ptx_sreg_ntid_y(), gmem_arr, gmem_out);
            });
        });

        let tex_arr = map(arr, 1, 1, (0, 0, 0), (width, height, 0));

        nvvm(1, dim, block, || -> void {
            let tid_x = nvvm_read_ptx_sreg_tid_x() + nvvm_read_ptx_sreg_ntid_x() * nvvm_read_ptx_sreg_ctaid_x();
            let tid_y = nvvm_read_ptx_sreg_tid_y() + nvvm_read_ptx_sreg_ntid_y() * nvvm_read_ptx_sreg_ctaid_y() * unroll;

            @iterate(0, unroll, |i : int| -> void {
                body(tid_x, tid_y + i * nvvm_read_ptx_sreg_ntid_y(), tex_arr, gmem_out);
            });
        });
    });
}

fn iteration_sep_advanced(width : int, height : int,
                          arr : [float], out : [float],
                          body_col : fn(int, int, [float], [float]) -> void,
                          body_row : fn(int, int, [float], [float]) -> void
                         ) -> void {
    let dim = (width, height, 1);
    let block = (128, 1, 1);

    let tmp = array(4, width, height);

    let tex_col = map(arr, 1, 1, (0, 0, 0), (width, height, 0));
    let out_col = map(tmp, 1, 0, (0, 0, 0), (width, height, 0));

    nvvm(1, dim, block, || -> void {
        let tid_x = nvvm_read_ptx_sreg_tid_x() + nvvm_read_ptx_sreg_ntid_x() * nvvm_read_ptx_sreg_ctaid_x();
        let tid_y = nvvm_read_ptx_sreg_tid_y() + nvvm_read_ptx_sreg_ntid_y() * nvvm_read_ptx_sreg_ctaid_y();

        body_col(tid_x, tid_y, tex_col, out_col);
    });

    //unmap(tex_col, 1, 1);
    //unmap(out_col);

    let tex_row = map(tmp, 1, 1, (0, 0, 0), (width, height, 0));
    let out_row = map(out, 1, 0, (0, 0, 0), (width, height, 0));

    nvvm(1, dim, block, || -> void {
        let tid_x = nvvm_read_ptx_sreg_tid_x() + nvvm_read_ptx_sreg_ntid_x() * nvvm_read_ptx_sreg_ctaid_x();
        let tid_y = nvvm_read_ptx_sreg_tid_y() + nvvm_read_ptx_sreg_ntid_y() * nvvm_read_ptx_sreg_ctaid_y();

        body_row(tid_x, tid_y, tex_row, out_row);
    });

    //unmap(tex_row);
    //unmap(out_row);

    free_array(tmp);
}

fn iteration_multi(width : int, height : int,
                   arr : [float], out : [float],
                   body : fn(int, int, [float], [float]) -> void
                  ) -> void {
    let dim = (width, height/2, 1);
    let block = (128, 1, 1);

    let map_arr_GPU1 = map(arr, 1, 0, (0, 0, 0),        (width, height/2, 0));
    let map_out_GPU1 = map(out, 1, 0, (0, 0, 0),        (width, height/2, 0));

    nvvm(1, dim, block, || -> void {
        let tid_x = nvvm_read_ptx_sreg_tid_x() + nvvm_read_ptx_sreg_ntid_x() * nvvm_read_ptx_sreg_ctaid_x();
        let tid_y = nvvm_read_ptx_sreg_tid_y() + nvvm_read_ptx_sreg_ntid_y() * nvvm_read_ptx_sreg_ctaid_y();

        body(tid_x, tid_y, map_arr_GPU1, map_out_GPU1);
    });

    let map_arr_GPU2 = map(arr, 2, 0, (0, height/2, 0), (width, height/2, 0));
    let map_out_GPU2 = map(out, 2, 0, (0, height/2, 0), (width, height/2, 0));

    nvvm(2, dim, block, || -> void {
        let tid_x = nvvm_read_ptx_sreg_tid_x() + nvvm_read_ptx_sreg_ntid_x() * nvvm_read_ptx_sreg_ctaid_x();
        let tid_y = nvvm_read_ptx_sreg_tid_y() + nvvm_read_ptx_sreg_ntid_y() * nvvm_read_ptx_sreg_ctaid_y();

        body(tid_x, tid_y, map_arr_GPU2, map_out_GPU2);
    });
}
