fn apply_stencil(range : int, stencil : [float * 5 * 5],
                 x : int, y : int, arr : [float], width : int, height : int,
                 lower_x : fn(int, int) -> int,
                 upper_x : fn(int, int) -> int,
                 lower_y : fn(int, int) -> int,
                 upper_y : fn(int, int) -> int
                ) -> float {
    let mut sum = 0.0f;
    let half_range = range / 2;
    iterate(-half_range, half_range+1, |j : int| -> void {
        iterate(-half_range, half_range+1, |i : int| -> void {
            let stencil_val = stencil[i + half_range][j + half_range];
            if (stencil_val != 0.0f) {
                let mut idx_x = lower_x(x + i, 0);
                        idx_x = upper_x(idx_x, width);
                let mut idx_y = lower_y(y + j, 0);
                        idx_y = upper_y(idx_y, height);
                sum += arr[idx_y * width + idx_x] * stencil_val;
            } else {
                // additional logic for empty stencil value
            }
        });
    });

    return sum;
}

fn apply_stencil_sep(range : int, stencil : [float * 5], x : int, y : int,
                     arr : [float], width : int, height : int, row : bool,
                     lower : fn(int, int) -> int,
                     upper : fn(int, int) -> int
                    ) -> float {
    let mut sum = 0.0f;
    let half_range = range / 2;
    iterate(-half_range, half_range+1, |i : int| -> void {
        let stencil_val = stencil[i + half_range];
        let mut idx_x = row ? x + i : x;
        let mut idx_y = row ? y : y + i;
        if (row) {
            idx_x = lower(idx_x, 0);
            idx_x = upper(idx_x, width);
        } else {
            idx_y = lower(idx_y, 0);
            idx_y = upper(idx_y, height);
        }
        sum += arr[idx_y*width + idx_x] * stencil_val;
    });

    return sum;
}

fn apply_stencil_row_cpu(range : int, stencil : [float * 5],
                         x : int, y : int, arr : [float], width : int) -> float {
    let mut sum = 0.0f;
    let half_range = range / 2;
    iterate(-half_range, half_range+1, |i : int| -> void {
        let stencil_val = stencil[i + half_range];
        sum += arr[x + i] * stencil_val;
    });

    return sum;
}

fn main() -> int {
    let width   = 4096;
    let height  = 4096;
    let range   = 5;
    let mut arr = array(4, width, height);
    let mut out = array(4, width, height);
    init_rand(arr, width, height);
    init_zero(out, width, height);

    let stencil_sep : [float * 5] = [
          0.070766f, 0.244460f, 0.369546f, 0.244460f, 0.070766f ];

    let stencil : [float * 5 * 5] = [
        [ 0.005008f, 0.017300f, 0.026151f, 0.017300f, 0.005008f ],
        [ 0.017300f, 0.059761f, 0.090339f, 0.059761f, 0.017300f ],
        [ 0.026151f, 0.090339f, 0.136565f, 0.090339f, 0.026151f ],
        [ 0.017300f, 0.059761f, 0.090339f, 0.059761f, 0.017300f ],
        [ 0.005008f, 0.017300f, 0.026151f, 0.017300f, 0.005008f ]];


    // SS
    iteration(width, height,
        |x : int, y : int| -> void {
            out[y*width + x] = @apply_stencil(range, stencil, x, y, arr, width, height,
                                              clamp_lower, clamp_upper, clamp_lower, clamp_upper);
        }
    );

    // SS + BH
    iteration_bounds(width, height, range, clamp_lower, clamp_upper, clamp_none,
        |x : int, y : int, left : fn(int, int) -> int, right : fn(int, int) -> int, top : fn(int, int) -> int, bottom : fn(int, int) -> int| -> void {
            out[y*width + x] = @apply_stencil(range, stencil, x, y, arr, width, height,
                                              clamp_lower, clamp_upper, clamp_lower, clamp_upper);
        }
    );

    // SS + SEP
    iteration_sep(width, height,
        |x : int, y : int| -> void {
            // col component
            let is_row = false;
            out[y*width + x] = @apply_stencil_sep(range, stencil_sep, x, y,
                                                  arr, width, height, is_row,
                                                  clamp_lower, clamp_upper);
        },
        |x : int, y : int| -> void {
            // row component
            let is_row = true;
            out[y*width + x] = @apply_stencil_sep(range, stencil_sep, x, y,
                                                  arr, width, height, is_row,
                                                  clamp_lower, clamp_upper);
        }
    );

    // SS + SEP + BH
    let mut tmp = array(4, width, height);
    init_zero(tmp, width, height);
    iteration_sep_bounds(width, height, range, clamp_lower, clamp_upper, clamp_none,
        |x : int, y : int, left : fn(int, int) -> int, right : fn(int, int) -> int, top : fn(int, int) -> int, bottom : fn(int, int) -> int| -> void {
            // col component
            let is_row = false;
            tmp[y*width + x] = @apply_stencil_sep(range, stencil_sep, x, y, arr,
                                                  width, height, is_row,
                                                  top, bottom);
        },
        |x : int, y : int, left : fn(int, int) -> int, right : fn(int, int) -> int, top : fn(int, int) -> int, bottom : fn(int, int) -> int| -> void {
            // row component
            let is_row = true;
            out[y*width + x] = @apply_stencil_sep(range, stencil_sep, x, y, tmp,
                                                  width, height, is_row,
                                                  left, right);
        }
    );
    free_array(tmp);


    //iteration_advanced(width, height, arr, out,
    //    |x : int, y : int, arr : [float], out : [float]| -> void {
    //        out[y*width + x] = @apply_stencil(range, stencil, x, y, arr, width, height,
    //                                          clamp_none, clamp_none,
    //                                          clamp_none, clamp_none);
    //    }
    //);

    //iteration_sep_advanced(width, height, arr, out,
    //    |x : int, y : int, arr : [float], out : [float]| -> void {
    //        // col component
    //        let is_row = false;
    //        out[y*width + x] = @apply_stencil_sep(range, stencil_sep, x, y, arr,
    //                                              width, height, is_row,
    //                                              clamp_none, clamp_none);
    //    },
    //    |x : int, y : int, arr : [float], out : [float]| -> void {
    //        // row component
    //        let is_row = true;
    //        out[y*width + x] = @apply_stencil_sep(range, stencil_sep, x, y, arr,
    //                                              width, height, is_row,
    //                                              clamp_none, clamp_none);
    //    }
    //);

    //// CPU variant
    //iteration_sep_advanced(width, height, arr, out,
    //    |x : int, y : int, arr : [float], out : [float]| -> void {
    //        let is_row = false;
    //        out[x] = @apply_stencil_sep(range, stencil_sep, x, y, arr, width,
    //                                    height, is_row, clamp_none, clamp_none);
    //    },
    //    |x : int, y : int, arr : [float], out : [float]| -> void {
    //        let is_row = true;
    //        out[y*width + x] = @apply_stencil_row_cpu(range, stencil_sep, x, y, arr, width);
    //    }
    //);


    let mut passed = 0;

    for (let mut y=0; y<height; ++y) {
        for (let mut x=0; x<width; ++x) {
            let ref = apply_stencil(range, stencil, x, y, arr, width, height,
                                    clamp_lower, clamp_upper, clamp_lower, clamp_upper);
            let mut diff = ref - out[x + y*width];
            if (diff < 0.0f) diff = -diff;
            if (diff > 0.01f) passed++;
        }
    }

    free_array(arr);
    free_array(out);

    return passed;
}
