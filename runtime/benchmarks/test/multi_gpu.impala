fn write(out: [float], src: [float], i: int) -> void {
    out[i] = src[i];
}

fn iteration_multi(width : int, height : int,
                   arr : [float], out : [float],
                   body : fn(int, int, [float], [float]) -> void
                  ) -> void {
    let dim = (width, height/2, 1);
    let block = (128, 1, 1);

    let map_arr_CPU = map(arr, 1, 0, (0, 0, 0),        (width, height/2, 0));
    let map_out_CPU = map(out, 1, 0, (0, 0, 0),        (width, height/2, 0));

    opencl(1, dim, block, || -> void {
        let tid_x = int64_to_int32(get_global_id(0));
        let tid_y = int64_to_int32(get_global_id(1));

        body(tid_x, tid_y, map_arr_CPU, map_out_CPU);
    });

    let map_arr_GPU = map(arr, 2, 0, (0, height/2, 0), (width, height/2, 0));
    let map_out_GPU = map(out, 2, 0, (0, height/2, 0), (width, height/2, 0));

    opencl(2, dim, block, || -> void {
        let tid_x = int64_to_int32(get_global_id(0));
        let tid_y = int64_to_int32(get_global_id(1));

        body(tid_x, tid_y, map_arr_GPU, map_out_GPU);
    });
}

fn main() -> int {
    let width   = 4096;
    let height  = 4096;
    let mut arr = array(4, width, height);
    let mut out = array(4, width, height);
    init_rand(arr, width, height);
    init_zero(out, width, height);

    iteration_multi(width, height, arr, out,
        |x : int, y : int, out : [float], arr : [float]| -> void {
            out[x + y*width] = arr[x + y*width];
        }
    );

    let mut passed = 0;

    for (let mut y=0; y<height; ++y) {
        for (let mut x=0; x<width; ++x) {
            if (out[x + y*width] != arr[x + y*width]) passed++;
        }
    }

    free_array(arr);
    free_array(out);

    return passed;
}

