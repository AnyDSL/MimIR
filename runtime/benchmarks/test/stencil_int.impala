// DSL implementation

fn range(a : int, b : int, yield : fn(int, fn())) -> void {
    let mut i: int = a;
    while (i < b)
        yield(i++, || { continue; });
}

fn apply_bh(mut index : int,
            bh_lower : fn(int, int) -> int, bh_upper : fn(int, int) -> int,
            lb : int, ub : int) -> int {
    if (index < lb)  index = bh_lower(index, lb);
    if (index >= ub) index = bh_upper(index, ub);
    return index;
}

fn apply_stencil(N : int, in : [float], out : [float], stencil : [float * 3],
                 bh_lower : fn(int, int) -> int, bh_upper : fn(int, int) -> int) -> void {
    let lb : [int * 3] = [0, 1, N - 1];
    let ub : [int * 3] = [1, N - 1, N];
    @range(0, 3, |i : int| -> void {
        let current_lb : int = lb[i];
        let current_ub : int = ub[i];
        range(lb[i], ub[i], |index : int| -> void {
            // apply stencil to pixel
            let mut sum : float = 0.0f;
            @range(-1, 2, |j : int| -> void {
                let adapted_j : int = apply_bh(index + j,
                                               bh_lower, bh_upper,
                                               current_lb, current_ub);
                sum += stencil[j + 1] * in[adapted_j];
            });
            out[index] = sum;
        });
    });
}

// DSL code

fn bh_clamp_lower(mut i : int, lower : int) -> int {
    if (i < lower) i = lower;
    return i;
}

fn bh_clamp_upper(mut i : int, upper : int) -> int {
    if (i >= upper) i = upper - 1;
    return i;
}

fn main() -> [float] {
    let width   = 2048;
    let height  = 2048;
    let a       = 0.2f;
    let b       = 1.0f - 4.0f * a;
    let num_it  = 100;
    let mut arr = array(4, width, height);
    let mut out = array(4, width, height);

    let stencil : [float * 3] = [b, a, b];

    for (let mut iter = 0; iter < num_it; ++iter) {
        @apply_stencil(width, arr, out, stencil,
                       bh_clamp_lower, bh_clamp_upper);

        let mut tmp : [float];
        tmp = arr;
        arr = out;
        out = tmp;
    }

    return out;
}
