SET ( RUNTIME_DEFINITIONS )
SET ( CONF_RUNTIME_LIBRARIES )

# Look for CUDA
FIND_PACKAGE ( CUDA )
IF ( CUDA_FOUND )
    FIND_LIBRARY ( CUDA_NVVM_LIBRARY  nvvm  HINTS ${CUDA_TOOLKIT_ROOT_DIR}/nvvm/lib ${CUDA_TOOLKIT_ROOT_DIR}/nvvm/lib64)
    IF ( NOT (CUDA_VERSION VERSION_LESS "7.00") )
        FIND_LIBRARY ( CUDA_NVRTC_LIBRARY nvrtc HINTS ${CUDA_TOOLKIT_ROOT_DIR}/lib  ${CUDA_TOOLKIT_ROOT_DIR}/lib64)
    ELSE ()
        SET ( CUDA_NVRTC_LIBRARY "" )
    ENDIF ()
    FIND_LIBRARY ( CUDA_LIBRARY       cuda  HINTS ${CUDA_TOOLKIT_ROOT_DIR}/lib      ${CUDA_TOOLKIT_ROOT_DIR}/lib64)
    INCLUDE_DIRECTORIES ( ${CUDA_INCLUDE_DIRS} "${CUDA_TOOLKIT_ROOT_DIR}/nvvm/include")
    SET ( CUDA_PLATFORM cuda_platform.cpp cuda_platform.h )
    SET ( RUNTIME_DEFINITIONS ${RUNTIME_DEFINITIONS} -DENABLE_CUDA '-DLIBDEVICE_DIR="${CUDA_TOOLKIT_ROOT_DIR}/nvvm/libdevice/"' )
    SET ( RUNTIME_DEFINITIONS ${RUNTIME_DEFINITIONS} '-DLIBDEVICE_DIR="${CUDA_TOOLKIT_ROOT_DIR}/nvvm/libdevice/"' )
    SET ( RUNTIME_DEFINITIONS ${RUNTIME_DEFINITIONS} '-DNVCC_BIN="${CUDA_TOOLKIT_ROOT_DIR}/bin/nvcc"' )
    SET ( CONF_RUNTIME_LIBRARIES ${CONF_RUNTIME_LIBRARIES} "${CUDA_LIBRARY}" "${CUDA_NVVM_LIBRARY}" "${CUDA_NVRTC_LIBRARY}")
ELSE ()
    SET ( CUDA_PLATFORM "" )
ENDIF ()

# Look for TBB
FIND_PACKAGE ( Threads REQUIRED )
FIND_PACKAGE ( TBB )
IF ( TBB_FOUND )
    INCLUDE_DIRECTORIES ( ${TBB_INCLUDE_DIRS} )
    SET ( RUNTIME_DEFINITIONS ${RUNTIME_DEFINITIONS} -DENABLE_TBB )
    SET ( CONF_RUNTIME_LIBRARIES ${CONF_RUNTIME_LIBRARIES} "${TBB_LIBRARIES}")
ELSE ()
    SET ( CONF_RUNTIME_LIBRARIES ${CONF_RUNTIME_LIBRARIES} "${CMAKE_THREAD_LIBS_INIT}")
ENDIF ()

# Provide a main function if needed
SET ( PROVIDE_MAIN "OFF" CACHE BOOL "Provide a main function in the runtime")
IF ( PROVIDE_MAIN )
    SET ( RUNTIME_DEFINITIONS ${RUNTIME_DEFINITIONS} -DPROVIDE_MAIN)
ENDIF ()

IF ( NOT MSVC )
    ADD_DEFINITIONS ( "-std=c++11 -Wall -Wunused" )
ENDIF ()

ADD_DEFINITIONS ( ${RUNTIME_DEFINITIONS} )

ADD_LIBRARY ( thorin_runtime
              runtime.cpp
              runtime.h
              thorin_runtime.h
              platform.h
              cpu_platform.h
              dummy_platform.h
              ${CUDA_PLATFORM} )

# Generate the ThorinRuntime.cmake file from the template
CONFIGURE_FILE ( cmake/ThorinRuntime.cmake.in "${CMAKE_BINARY_DIR}/cmake/ThorinRuntime.cmake" @ONLY )

