; ModuleID = './simple-gpu64.spir'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v16:16:16-v24:32:32-v32:32:32-v48:64:64-v64:64:64-v96:128:128-v128:128:128-v192:256:256-v256:256:256-v512:512:512-v1024:1024:1024"
target triple = "spir64-unknown-unknown"

; The SPIR IR is equivalent to the following OpenCL code:
;
; int ave(int a, int b) {
;    return (a+b)/2;
; }
;
; __kernel void simple(__global int *out) {
;    int tid = get_global_id(0);
;    out[tid] = ave(tid, tid);
; }
;
; __kernel void simple(__global int *out, __constant int *cmem) {
;    int tid = get_global_id(0);
;    out[tid] = cmem[get_local_id(0)];
; }
;


define spir_func i32 @ave(i32 %a, i32 %b) nounwind {
  %add = add nsw i32 %a, %b
  %div = sdiv i32 %add, 2
  ret i32 %div
}

define spir_kernel void @simple(i32 addrspace(1)* %out) nounwind {
  %add64 = call spir_func i64 @_Z13get_global_idj(i32 0) nounwind readnone
  %add32 = trunc i64 %add64 to i32
  %call = call spir_func i32 @ave(i32 %add32, i32 %add32)
  %arrayidx = getelementptr inbounds i32 addrspace(1)* %out, i64 %add64
  store i32 %call, i32 addrspace(1)* %arrayidx, align 4
  ret void
}

define spir_kernel void @simple_cmem([0 x i32] addrspace(1)* %out, [0 x i32] addrspace(2)* %cmem) nounwind {
  %add64 = call spir_func i64 @_Z13get_global_idj(i32 0) nounwind readnone
  %lid64 = call spir_func i64 @_Z12get_local_idj(i32 0) nounwind readnone
  %lid32 = trunc i64 %lid64 to i32
  %add32 = trunc i64 %add64 to i32
  %oidx = getelementptr inbounds [0 x i32] addrspace(1)* %out, i64 0, i32 %add32
  %cidx = getelementptr inbounds [0 x i32] addrspace(2)* %cmem, i64 0, i32 %lid32
  %cval = load i32 addrspace(2)* %cidx, align 4
  store i32 %cval, i32 addrspace(1)* %oidx, align 4
  ret void
}

declare spir_func i64 @_Z13get_global_idj(i32) nounwind readnone
declare spir_func i64 @_Z12get_local_idj(i32) nounwind readnone

!opencl.kernels = !{!0, !6}
!opencl.enable.FP_CONTRACT = !{}
!opencl.spir.version = !{!12}
!opencl.ocl.version = !{!13}
!opencl.used.extensions = !{!14}
!opencl.used.optional.core.features = !{!14}
!opencl.compiler.options = !{!14}

!0 = metadata !{void (i32 addrspace(1)*)* @simple, metadata !1, metadata !2, metadata !3, metadata !4, metadata !5}
!1 = metadata !{metadata !"kernel_arg_addr_space", i32 1}
!2 = metadata !{metadata !"kernel_arg_access_qual", metadata !"none"}
!3 = metadata !{metadata !"kernel_arg_type", metadata !"int*"}
!4 = metadata !{metadata !"kernel_arg_type_qual", metadata !""}
!5 = metadata !{metadata !"kernel_arg_name", metadata !"out"}
!6 = metadata !{void ([0 x i32] addrspace(1)*, [0 x i32] addrspace(2)*)* @simple_cmem, metadata !7, metadata !8, metadata !9, metadata !10, metadata !11}
!7 = metadata !{metadata !"kernel_arg_addr_space", i32 1, i32 2}
!8 = metadata !{metadata !"kernel_arg_access_qual", metadata !"none", metadata !"none"}
!9 = metadata !{metadata !"kernel_arg_type", metadata !"[0 x i32]*", metadata !"[0 x i32]*"}
!10 = metadata !{metadata !"kernel_arg_type_qual", metadata !"", metadata !""}
!11 = metadata !{metadata !"kernel_arg_name", metadata !"out", metadata !"cmem"}
!12 = metadata !{i32 1, i32 2}
!13 = metadata !{i32 1, i32 2}
!14 = metadata !{}

