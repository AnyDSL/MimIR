extern array(int, int, int) -> [float];

// DSL implementation

fn range(a : int, b : int, yield : fn(int, fn())) -> void {
    let mut i: int = a;
    while (i < b)
        yield(i++, || { continue; });
}

fn apply_stencil(N : int, in : [float], out : [float], stencil : [float * 3]) -> void {
    let lb : [int * 3] = [0, N - 1, $1];
    let ub : [int * 3] = [1, N, $N - 1];
    @range(0, 3, |i : int| -> void {
        let current_lb : int = lb[i];
        let current_ub : int = ub[i];
        range(current_lb, current_ub, |index : int| -> void {
            // apply stencil to pixel
            let mut sum : float = 0.0f;
            @range(-1, 2, |j : int| -> void {
                sum += stencil[j + 1] * in[j];
            });
            out[index] = sum;
        });
    });
}

// DSL code

//fn main() -> float {
fn main() -> [float] {
    let width   = 1024;
    let a       = 0.2f;
    let b       = 1.0f - 4.0f * a;
    let mut arr = array(4, width, height);
    let mut out = array(4, width, height);

    let stencil : [float * 3] = [b, a, b];
    @apply_stencil(width, arr, out, stencil);

    return out;
}
