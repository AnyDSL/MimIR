extern all_on_gpu([float], fn(fn() -> int, fn() -> int, fn() -> int) -> void) -> int;
extern array(int) -> [float];
extern sqrt(float) -> float;

fn idx(x : int, y: int, width : int, height : int) -> int {
    return x + width * y;
}

fn main() -> [float] {
    let width   = 1024;
    let height  = 1024;
    let range   = 3;
    let a       = 0.2f;
    let b       = 1.0f - 4.0f * a;
    let mut arr = array(width * height);
    let mut out = array(width * height);

    let stencil : [float * 3 * 3] = [
        [0.0f, b, 0.0f],
        [   b, a, b   ],
        [0.0f, b, 0.0f]];

    for (let mut iter=0; iter<100; ++iter) {
        all_on_gpu(out, |x : fn() -> int, y : fn() -> int, z : fn() -> int| -> void {
            let index = x() + width * y() + height;
            //let index = idx(x(), y(), z(), width, height);
            //let sum = @apply_stencil(arr, stencil, 3, x(), y(), width, height);
            let sum = a * arr[index] +
                      b * (
                        arr[index - 1 + 0 * range] +
                        arr[index + 1 + 0 * range] +
                        arr[index + 0 - 1 * range] +
                        arr[index + 0 + 1 * range]);

            out[index] = sum;
        });

        let mut tmp : [float];
        tmp = arr;
        arr = out;
        out = tmp;
    }

    return out;
}

fn apply_stencil(arr : [float], stencil : [float * 3 * 3], range : int, x : int, y : int, width : int, height : int) -> float {
    let mut sum = 0.0f;

    for (let mut yf=-range; yf<range; ++yf) {
        for (let mut xf=-range; xf<range; ++xf) {
            let index = x + xf + width * (y + yf);
            sum += stencil[range + xf][range +yf] * arr[index];
        }
    }

    return sum;
}

