extern all_on_gpu([float], fn(fn() -> int, fn() -> int, fn() -> int) -> void) -> void;
extern array(int) -> [float];

fn bh_clamp_lower(i : int, lower : int) -> int {
    if (idx < lower) idx = lower;
    return idx;
}

fn bh_clamp_upper(i : int, upper : int) -> int {
    if (idx >= upper) idx = upper - 1;
    return idx;
}


fn main() -> [float] {
    let width   = 1024;
    let height  = 1024;
    let range   = 3;
    let a       = 0.2f;
    let b       = 1.0f - 4.0f * a;
    let arr = array(width * height);
    let out = array(width * height);

    let stencil : [float * 3 * 3] = [
        [0.0f, b, 0.0f],
        [   b, a, b   ],
        [0.0f, b, 0.0f]];

    for (let mut iter=0; iter<100; ++iter) {
        all_on_gpu(out, |x : fn() -> int, y : fn() -> int, z : fn() -> int| -> void {
            let index = x() + width * y();
            //let index = idx(x(), y(), z(), width, height);
            //let sum = @apply_stencil(arr, stencil, 3, x(), y(), width, height);
            let index = x() + width * y() + height;
            let sum = a * arr[index] +
                      b * (
                        arr[index - 1 + 0 * range] +
                        arr[index + 1 + 0 * range] +
                        arr[index + 0 - 1 * range] +
                        arr[index + 0 + 1 * range]);

            out[index] = sum;
        });

        //let mut tmp : [float];
        //tmp = arr;
        //arr = out;
        //out = tmp;
    }

    return out;
}

