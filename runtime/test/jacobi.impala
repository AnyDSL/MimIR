extern all_on_gpu([float], fn(fn() -> int, fn() -> int, fn() -> int) -> void) -> void;
extern array(int) -> [float];

fn bh_clamp_lower(mut i : int, lower : int) -> int {
    if (i < lower) i = lower;
    return i;
}

fn bh_clamp_upper(mut i : int, upper : int) -> int {
    if (i >= upper) i = upper - 1;
    return i;
}


fn main() -> [float] {
    let width   = 2048;
    let height  = 2048;
    let range   = 3;
    let a       = 0.2f;
    let b       = 1.0f - 4.0f * a;
    let arr = array(width * height);
    let out = array(width * height);

    let stencil : [float * 3 * 3] = [
        [0.0f, b, 0.0f],
        [   b, a, b   ],
        [0.0f, b, 0.0f]];

    for (let mut iter=0; iter<10; ++iter) {
        all_on_gpu(out, |x : fn() -> int, y : fn() -> int, z : fn() -> int| -> void {
            let index = x() + width * y();

            let sum = a * arr[index] +
                      b * (
                        arr[index - 1 + 0 * width] +
                        arr[index + 1 + 0 * width] +
                        arr[index + 0 - 1 * width] +
                        arr[index + 0 + 1 * width]);

            out[index] = sum;
        });

        //let mut tmp : [float];
        //tmp = arr;
        //arr = out;
        //out = tmp;
    }

    return out;
}


fn main2() -> [float] {
    let width   = 2048;
    let height  = 2048;
    let range   = 3;
    let a       = 0.2f;
    let b       = 1.0f - 4.0f * a;
    let arr = array(width * height);
    let out = array(width * height);

    let stencil : [float * 3 * 3] = [
        [0.0f, b, 0.0f],
        [   b, a, b   ],
        [0.0f, b, 0.0f]];

    for (let mut iter=0; iter<10; ++iter) {
        all_on_gpu(out, |x : fn() -> int, y : fn() -> int, z : fn() -> int| -> void {
            let index = x() + width * y();
            let mut sum = 0.0f;

            for (let mut yf=-1; yf<1; ++yf) {
                for (let mut xf=-1; xf<1; ++xf) {
                    sum += stencil[xf+1][yf+1] * arr[index + xf + yf * width];
                }
            }

            out[index] = sum;
        });

        //let mut tmp : [float];
        //tmp = arr;
        //arr = out;
        //out = tmp;
    }

    return out;
}

