extern accelerator([float], fn(fn() -> int, fn() -> int, fn() -> int, fn() -> int, fn() -> int, fn() -> int) -> void) -> void;
extern array(int) -> [float];
extern stencil_array() -> [float];

fn main() -> [float] {
    let width   = 2048;
    let height  = 2048;
    let range   = 3;
    let a       = 0.2f;
    let b       = 1.0f - 4.0f * a;
    let mut arr = array(width * height);
    let mut out = array(width * height);

    let stencil = stencil_array();
    for (let mut iter=0; iter<10; ++iter) {
        accelerator(out, |x : fn() -> int, y : fn() -> int, bIx : fn() -> int, bIy : fn() -> int, bDx : fn() -> int, bDy : fn() -> int| -> void {
            let index = (x() + bIx() * bDx()) + width * (y() + bIy() * bDy());
            /*
            let mut sum = 0.0f;

            for (let mut yf=-1; yf<1; ++yf) {
                for (let mut xf=-1; xf<1; ++xf) {
                    sum += stencil[xf+1 + 3 * (yf+1)] * arr[index + xf + yf * width];
                }
            }
            */
            let sum = a * arr[index] +
                      b * (
                        arr[index - 1 + 0 * width] +
                        arr[index + 1 + 0 * width] +
                        arr[index + 0 - 1 * width] +
                        arr[index + 0 + 1 * width]);

            out[index] = sum;
        });

        let mut tmp : [float];
        tmp = arr;
        arr = out;
        out = tmp;
    }

    return out;
}

