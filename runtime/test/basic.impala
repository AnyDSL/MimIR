/*
extern all_on_gpu(Array3D, fn(int, int, int) -> void) -> int;

extern malloc(int, int, int) -> Array3D;
extern load_value(Array3D, int, int, int) -> float;
extern store_value(Array3D, int, int, int, float) -> int;

fn main() -> Array3D {
    let mut a : Array3D = malloc(1024, 1024, 1024);
    let mut b : Array3D = malloc(1024, 1024, 1024);
    all_on_gpu(a, |x : int, y : int, z : int| -> void {
        let a2 : float = load_value(a, x, y, z);
        let b2 : float = load_value(b, x, y, z);
        let c2 : float = @convolve(b, 3, x, y, z);
        store_value(a, x, y, z, a2 + b2 + c2);
    });

    return a;
}

fn convolve(arr : Array3D, range : int, x : int, y : int, z : int) -> float {
    let mut sum : float = 0.0f;

    let mut xf : int = -range;
    let mut yf : int = -range;
    while (yf<range) {
        while (xf<range) {
            sum += load_value(arr, x + xf, y + yf, z);
            xf++;
        }
        xf = -range;
        yf++;
    }

    return sum;
}
*/

extern all_on_gpu(float, fn(int, int, int) -> void) -> int;

extern malloc(int, int, int) -> float;
extern load_value(float, int, int, int) -> float;
extern store_value(float, int, int, int, float) -> int;

fn main() -> float {
    let mut a : float = malloc(1024, 1024, 1024);
    let mut b : float = malloc(1024, 1024, 1024);
    all_on_gpu(a, |x : int, y : int, z : int| -> void {
        let a2 : float = load_value(a, x, y, z);
        let b2 : float = load_value(b, x, y, z);
        let c2 : int = @convolve(b, 3, x, y, z);
        store_value(a, x, y, c2, a2 + b2);
    });
    return a;
}

fn convolve(arr : float, range : int, x : int, y : int, z : int) -> int {
    let mut sum : int = 0;

    let mut xf : int = -range;
    let mut yf : int = -range;
    while (yf<range) {
        while (xf<range) {
            sum += (x + xf+ y + yf+ z);
            xf++;
        }
        xf = -range;
        yf++;
    }

    return sum;
}

