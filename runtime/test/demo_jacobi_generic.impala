extern accelerator([float], fn(fn() -> int, fn() -> int, fn() -> int, fn() -> int, fn() -> int, fn() -> int) -> void) -> void;
extern array(int) -> [float];
extern get_stencil_array() -> [float];

fn iter(a : int, b : int, yield : fn(int, fn())) -> void {
    let mut i: int = a;
    while (i < b)
        yield(i++, || { continue; });
}

fn main() -> [float] {
    let width   = 2048;
    let height  = 2048;
    let range   = 2;
    let a       = 0.2f;
    let b       = 1.0f - 4.0f * a;
    let arr = array(width * height);
    let out = array(width * height);
    let stencil = get_stencil_array();

    accelerator(out, |x : fn() -> int, y : fn() -> int, bIx : fn() -> int, bIy : fn() -> int, bDx : fn() -> int, bDy : fn() -> int| -> void {
        let index = (x() + bIx() * bDx()) + width * (y() + bIy() * bDy());
        let mut sum = 0.0f;
        let half_range = range / 2;
        iter(-half_range, range, |i : int| -> void {
            iter(-half_range, range, |j : int| -> void {
                let stencil_index = i + half_range + ((j + half_range) * (range + 1));
                let stencil_val = stencil[stencil_index];
                sum += arr[index + i + j * width] * stencil_val;
            });
        });
        out[index] = sum;
    });

    return out;
}

