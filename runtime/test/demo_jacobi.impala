extern accelerator([float], fn(fn() -> int, fn() -> int, fn() -> int, fn() -> int, fn() -> int, fn() -> int) -> void) -> void;
extern array(int) -> [float];

fn iter(a : int, b : int, yield : fn(int, fn())) -> void {
    let mut i: int = a;
    while (i < b)
        yield(i++, || { continue; });
}

fn apply_stencil(range : int, stencil : [float * 3 * 3],
                 index : int, arr : [float], out : [float],
                 width : int) -> float {
    let mut sum = 0.0f;
    let half_range = range / 2;
    iter(-half_range, range, |i : int| -> void {
        iter(-half_range, range, |j : int| -> void {
            let stencil_val = stencil[i + half_range][j + half_range];
            if(stencil_val != 0.0f)
                sum += arr[index + i + j * width] * stencil_val;
            else {
                // additional logic for empty stencil value
            }
        });
    });
    return sum;
}

fn main() -> [float] {
    let width   = 2048;
    let height  = 2048;
    let range   = 2;
    let a       = 0.2f;
    let b       = 1.0f - 4.0f * a;
    let mut arr = array(width * height);
    let mut out = array(width * height);

    let stencil : [float * 3 * 3] = [
        [0.0f, b, 0.0f],
        [   b, a, b   ],
        [0.0f, b, 0.0f]];

    for (let mut i = 0; i < 10; ++i) {
        accelerator(out, |x : fn() -> int, y : fn() -> int, bIx : fn() -> int, bIy : fn() -> int, bDx : fn() -> int, bDy : fn() -> int| -> void {
            let index = (x() + bIx() * bDx()) + width * (y() + bIy() * bDy());
            out[index] = apply_stencil(range, stencil, index, arr, out, width);
        });
        let mut tmp = out;
        out = arr;
        arr = tmp;
    }

    return out;
}

