fn iterate(a : int, b : int, yield : fn(int, fn())) -> void {
    let mut i: int = a;
    while (i < b)
        yield(i++, || { continue; });
}

fn init_zero(arr : [float], width : int, height : int) -> void {
    iterate(0, width*height, |i: int| -> void {
        arr[i] = 0.0f;
    });
}
fn init_rand(arr : [float], width : int, height : int) -> void {
    iterate(0, height, |y: int| -> void {
        iterate(0, width, |x: int| -> void {
            arr[x + y*width] = random_val(width);
        });
    });
}


fn main() -> int {
    let width   = 2048;
    let height  = 2048;
    let range   = 3;
    let mut arr = array(4, width, height);
    let mut out = array(4, width, height);
    let mut stencil = array(4, range, range);

    // initialize the stencil
    init_rand(arr, width, height);
    init_zero(out, width, height);
    init_zero(stencil, range, range);
    stencil[1] = 0.2f;
    stencil[3] = 0.2f;
    stencil[4] = 0.2f;
    stencil[5] = 0.2f;
    stencil[7] = 0.2f;


    iteration(width, height, |x : int, y : int| -> void {
        let mut sum = 0.0f;
        let half_range = range / 2;
        iterate(-half_range, half_range+1, |j : int| -> void {
            iterate(-half_range, half_range+1, |i : int| -> void {
                let stencil_index = i + half_range + ((j + half_range) * range);
                let stencil_val = stencil[stencil_index];
                sum += arr[(y+j)*width + x + i] * stencil_val;
            });
        });
        out[y*width + x] = sum;
    });


    let mut passed = 0;

    for (let mut y=1; y<height-1; ++y) {
        for (let mut x=1; x<width-1; ++x) {
            let ref =
                0.2f * arr[x + 0 + (y - 1)*width] +
                0.2f * arr[x - 1 + (y + 0)*width] +
                0.2f * arr[x + 0 + (y + 0)*width] +
                0.2f * arr[x + 1 + (y + 0)*width] +
                0.2f * arr[x + 0 + (y + 1)*width];
            let mut diff = ref - out[x + y*width];
            if (diff < 0.0f) diff = -diff;
            if (diff > 0.1f) passed++;
        }
    }

    return passed;
}

