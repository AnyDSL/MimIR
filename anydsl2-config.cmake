# Try to find AnyDSL2 library and include path.
# Once done this will define
#
# ANYDSL2_FOUND
# ANYDSL2_INCLUDE_DIR
# ANYDSL2_LIBRARIES (including dependencies to LLVM/WFV2)
# ANYDSL2_LIBRARY_DIR

SET ( PROJ_NAME ANYDSL2 )

FIND_PACKAGE ( LLVM QUIET )

FIND_PATH ( ANYDSL2_ROOT_DIR anydsl2-config.cmake PATHS ${AYDSL2_DIR} $ENV{AYDSL2_DIR} $ENV{AYDSL2_ROOT} )
SET ( CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${ANYDSL2_ROOT_DIR} )

SET ( ANYDSL2_OUTPUT_LIBS anydsl.lib anydsl.so anydsl.dll libanydsl libanydsl.so libanydsl.a libanydsl.dll )

FIND_PATH ( ANYDSL2_INCLUDE_DIR NAMES anydsl2/world.h PATHS ${ANYDSL2_ROOT_DIR}/src ${ANYDSL2_ROOT_DIR}/include ${ANYDSL2_ROOT_DIR}/build/include )
FIND_PATH ( ANYDSL2_LIBRARY_DIR NAMES ${ANYDSL2_OUTPUT_LIBS} PATHS ${ANYDSL2_ROOT_DIR}/build ${ANYDSL2_ROOT_DIR}/lib ${ANYDSL2_ROOT_DIR}/build/lib )

# include anydsl specific stuff
INCLUDE ( anydsl2-shared )

IF ( ANYDSL2_LIBRARY_DIR )
    FIND_LIBRARY ( ANYDSL2_LIBRARIES NAMES ${ANYDSL2_OUTPUT_LIBS} PATHS ${ANYDSL2_LIBRARY_DIR} )
    # get the dependencies
    get_anydsl2_dependency_libs ( ANYDSL2_TEMP_LIBRARIES )
    SET ( ANYDSL2_LIBRARIES ${ANYDSL2_TEMP_LIBRARIES} ${ANYDSL2_LIBRARIES} )
ENDIF ( ANYDSL2_LIBRARY_DIR )

IF ( ANYDSL2_INCLUDE_DIR AND ANYDSL2_LIBRARIES )
    SET ( ANYDSL2_FOUND TRUE CACHE BOOL "" FORCE )
ELSE ( ANYDSL2_INCLUDE_DIR AND ANYDSL2_LIBRARIES )
    SET ( ANYDSL2_FOUND FALSE CACHE BOOL "" FORCE )
ENDIF ( ANYDSL2_INCLUDE_DIR AND ANYDSL2_LIBRARIES )

MARK_AS_ADVANCED ( ANYDSL2_FOUND )
