# Try to find AnyDSL2 library and include path.
# Once done this will define
#
# ANYDSL2_FOUND
# ANYDSL2_INCLUDE_DIR
# ANYDSL2_LIBRARIES (including dependencies to LLVM/WFV2)
# ANYDSL2_LIBRARIES_DIR

SET ( PROJ_NAME ANYDSL2 )

FIND_PACKAGE ( LLVM QUIET )

FIND_PATH ( ANYDSL2_ROOT_DIR anydsl2-config.cmake PATHS ${ANYDSL2_DIR} $ENV{ANYDSL2_DIR} $ENV{AYDSL2_ROOT} )
SET ( CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${ANYDSL2_ROOT_DIR} )

SET ( ANYDSL2_OUTPUT_LIBS anydsl2.lib anydsl2.so anydsl2.dll libanydsl2 libanydsl2.so libanydsl2.a libanydsl2.dll )

FIND_PATH ( ANYDSL2_INCLUDE_DIR NAMES anydsl2/world.h PATHS ${ANYDSL2_ROOT_DIR}/src ${ANYDSL2_ROOT_DIR}/include ${ANYDSL2_ROOT_DIR}/build/include )
FIND_PATH ( ANYDSL2_LIBRARIES_DIR
	NAMES
		${ANYDSL2_OUTPUT_LIBS}
	PATHS
		${ANYDSL2_ROOT_DIR}/build
		${ANYDSL2_ROOT_DIR}/lib
		${ANYDSL2_ROOT_DIR}/build/lib
	PATH_SUFFIXES
		${CMAKE_CONFIGURATION_TYPES}
)

# include anydsl specific stuff
INCLUDE ( ${CMAKE_CURRENT_LIST_DIR}/anydsl2-shared.cmake )

IF ( ANYDSL2_LIBRARIES_DIR )
    FIND_LIBRARY ( ANYDSL2_LIBRARIES_DEBUG NAMES ${ANYDSL2_OUTPUT_LIBS} PATHS ${ANYDSL2_LIBRARIES_DIR} PATH_SUFFIXES Debug)
    FIND_LIBRARY ( ANYDSL2_LIBRARIES_RELEASE NAMES ${ANYDSL2_OUTPUT_LIBS} PATHS ${ANYDSL2_LIBRARIES_DIR} PATH_SUFFIXES Release )
    SET ( ANYDSL2_LIBRARIES
        optimized ${ANYDSL2_LIBRARIES_RELEASE}
        debug ${ANYDSL2_LIBRARIES_DEBUG}
    )
    # get the dependencies
    get_anydsl2_dependency_libs ( ANYDSL2_TEMP_LIBRARIES )
    SET ( ANYDSL2_LIBRARIES ${ANYDSL2_TEMP_LIBRARIES} ${ANYDSL2_LIBRARIES} )
ENDIF()

IF ( ANYDSL2_INCLUDE_DIR AND ANYDSL2_LIBRARIES )
    SET ( ANYDSL2_FOUND TRUE CACHE BOOL "" FORCE )
ELSE()
    SET ( ANYDSL2_FOUND FALSE CACHE BOOL "" FORCE )
ENDIF()

MARK_AS_ADVANCED ( ANYDSL2_FOUND )
