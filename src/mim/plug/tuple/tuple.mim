/// # The tuple Plugin {#tuple}
///
/// @see mim::plug::tuple
///
/// [TOC]
///
/// ## Dependencies
///
plugin core;
///
/// A minimal tuple plugin
///
/// ## Operations
///
/// ### %%tuple.concat
///
axm %tuple.concat:  {n m: Nat}
                  → {Ts: «n; *», Us: «m; *»}
                  → [«i: n; Ts#i», «i: m; Us#i»]
                  → «i: %core.nat.add (n, m);
                        let nat_i = %core.bitcast Nat i;
                        %core.select (%core.ncmp.l (nat_i, n),
                                      Ts#(%core.bitcast (Idx n) i),
                                      Us#(%core.bitcast (Idx m) (%core.nat.sub (nat_i, n))))
                    », normalize_concat;

lam %tuple.append   {n: Nat}
                    {Ts: «n; *», U: *}
                    (a: «i: n; Ts#i», b: U)
                  : «i: %core.nat.add (n, 1); %core.select (%core.ncmp.l (%core.bitcast Nat i, n), Ts#(%core.bitcast (Idx n) i), U)»
                  = %tuple.concat @(n, 1) (a, b);

lam %tuple.prepend  {m: Nat}
                    {T: *, Us: «m; *»}
                    (a: T, b: «i: m; Us#i»)
                  : «i: %core.nat.add (1, m);
                        let nat_i = %core.bitcast Nat i;
                        %core.select (%core.ncmp.l (nat_i, 1), T, Us#(%core.bitcast (Idx m) (%core.nat.sub (nat_i, 1))))
                    »
                  = %tuple.concat @(1, m) (a, b);
