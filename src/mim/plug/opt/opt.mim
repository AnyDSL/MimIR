/// # The opt Plugin {#opt}
///
/// @see mim::plug::opt
///
/// [TOC]
///
/// Manages the default compilation pipeline of Mim programs using plugins.
///
/// ## Dependencies
///
plugin core;
/// supported plugins with passes
import affine;
import autodiff;
import clos;
import direct;
import matrix;
plugin refly;
import regex;
///
/// ## Passes, Phases, and Pipelines
///
/// ### Pipelines
///
lam cond_phase {n: Nat} (name: «n; I8») (phase: %compile.Phase): %compile.Phase = %core.select (%refly.is_loaded name, phase, %compile.null_phase);
lam cond_pass  {n: Nat} (name: «n; I8») (pass:  %compile.Pass ): %compile.Pass  = %core.select (%refly.is_loaded name, pass , %compile.null_pass );

lam extern _default_compile []: %compile.Pipeline =
    %compile.pipeline
        (%compile.passes_to_phase %compile.scalarize_pass)
        (%compile.passes_to_phase %compile.eta_red_pass)
        (%compile.passes_to_phase %compile.tail_rec_elim_pass)
        (%compile.passes_to_phase (cond_pass "regex" %regex.lower_regex))
        // optimize
        (%compile.pass_phase
            (%compile.combine_pass_list
            (
                optimization_pass_list,
                %compile.pass_list
                (cond_pass "affine" %affine.lower_for_pass),
                mem_opt_pass_list
            ))
        )
        (cond_phase "autodiff"
                (%compile.combined_phase
                    (%compile.phase_list
                        (%compile.passes_to_phase %autodiff.ad_eval_pass)
                        // optimization_phase
                        (%compile.passes_to_phase %autodiff.ad_zero_pass))))
        (cond_phase "direct" direct_phases)
        (cond_phase "matrix"
                (%compile.combined_phase
                    (%compile.phase_list
                        matrix_lower_phase
                        (cond_phase "direct" direct_phases)
                        (cond_phase "affine" (%compile.passes_to_phase %affine.lower_for_pass)))))
        (%compile.passes_to_phase %compile.internal_cleanup_pass)
        (cond_phase "clos" clos_phases)
        (%compile.passes_to_phase %compile.lam_spec_pass)
        (cond_phase "autodiff" ad_cleanup_phase)
        // CodeGenPrep
        (%compile.pass_phase
            (%compile.combine_pass_list
            (
                %compile.pass_list
                %compile.ret_wrap_pass,
                // mem
                %compile.pass_list
                %mem.remem_elim_pass
                %mem.alloc2malloc_pass,
                %compile.pass_list
                (cond_pass "refly" %refly.remove_dbg_perm_pass)
            ))
        );
