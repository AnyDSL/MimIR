/// # The mem Plugin {#mem}
///
/// @see mim::plug::mem
///
/// [TOC]
///
/// ## Dependencies
///
import compile;
///
/// ## Types
///
/// ### %%mem.M {#memM}
///
/// This type tracks all kind of side-effects.
axm %mem.M: *;
///
/// ### %%mem.Ptr
///
/// Pointer type with *pointee* type `T` and *address space* `a`.
/// At the moment, the *address space* is not really used and a placeholder for future work.
axm %mem.Ptr: [*, Nat] → *;

lam %mem.Ptr0(T: *): * = %mem.Ptr (T, 0);
///
/// ## Operations w/ Side Effects
///
/// The following operations have side effects.
/// For this reason, they consume a `%%mem.M` and yield a new `%%mem.M`.
///
/// ### %%mem.load
///
/// Loads from a pointer of type `%%mem.Ptr (T, a)` the pointed value of type `T`.
axm %mem.load: {T: *, Nat} as Ta → [%mem.M, %mem.Ptr Ta] → [%mem.M, T], normalize_load;
///
/// ### %%mem.store
///
/// Stores a value of type `T` to the location pointed to by a pointer of type `%%mem.Ptr (T, a)`,
axm %mem.store: {T: *, Nat} as Ta → [%mem.M, %mem.Ptr Ta, T] → %mem.M, normalize_store;
///
/// ### %%mem.remem
///
/// Creates a new dummy `%%mem.M`-typed value in order to acknowledge the fact that some unspecified side-effect happened.
axm %mem.remem: %mem.M → %mem.M, normalize_remem;
///
/// ### %%mem.alloc
///
/// Allocates memory of type `T` in address space `a`.
axm %mem.alloc: [*, Nat] as Ta → [%mem.M] → [%mem.M, %mem.Ptr Ta];
///
/// ### %%mem.slot
///
/// Reserves a memory slot for type `T` in address space `a`.
/// `id` has to be provided a unique id.
axm %mem.slot: [*, Nat] as Ta → [%mem.M, id: Nat] → [%mem.M, %mem.Ptr Ta];
///
/// ### %%mem.malloc
///
/// Allocates memory of type `T` in address space `a`.
/// The difference to `%%mem.alloc` is that the `size` is automatically inferred.
axm %mem.malloc: [*, Nat] as Ta → [%mem.M, Nat] → [%mem.M, %mem.Ptr Ta];
///
/// ### %%mem.free
///
/// Frees memory of type `T` in address space `a`.
axm %mem.free: {*, Nat} as Ta → [%mem.M, %mem.Ptr Ta] → %mem.M;
///
/// ### %%mem.mslot
///
/// Reserves a memory slot for type `T` in address space `a`.
/// The reserved slot will be `size` bytes large.
/// `id` has to be provided an unique id.
axm %mem.mslot: [*, Nat] as Ta → [%mem.M, size: Nat, id: Nat] → [%mem.M, %mem.Ptr Ta];
///
/// ## Operations w/o Side Effects
///
/// ### %%mem.lea
///
/// Load effective address.
/// Performs address computation by offsetting the passed pointer with index `i`.
axm %mem.lea: {n: Nat, Ts: «n; *», a: Nat} → [%mem.Ptr («j: n; Ts#j», a), i: Idx n] → %mem.Ptr (Ts#i, a), normalize_lea;
///
/// ### %%mem.create/destroy
///
/// Create side effect out of thin or pretend that the side effect does not exists.
/// @warning Use with caution since you completely remove the %%mem.M dependency.
///
let %mem.m = ⊤:%mem.M;
lam %mem.ignore {O: *} (_: %mem.M, o: O): O = o;
lam %mem.rm (n: Nat, Is: «n; *», O: *)
             (f: [%mem.M, «i: n; Is#i»] → [%mem.M, O])
             (is: «i: n; Is#i»): O
    = %mem.ignore (f (%mem.m, is));
///
/// ## Passes and Phases
///
/// ### Misc
///
/// Reshape mode enum.
///
axm %mem.reshape_mode: *;
axm %mem.reshape_flat: %mem.reshape_mode;
axm %mem.reshape_arg:  %mem.reshape_mode;
///
/// ### Passes
///
axm %mem.ssa_pass:                              %compile.Pass;
axm %mem.copy_prop_pass:                 Bool → %compile.Pass;
axm %mem.remem_elim_pass:                       %compile.Pass;
axm %mem.alloc2malloc_pass:                     %compile.Pass;
axm %mem.reshape_pass:      %mem.reshape_mode → %compile.Pass;
///
/// ### Phases
///
axm %mem.add_mem_phase: %compile.Phase;

let mem_opt_passes = (
        %compile.beta_red_pass,
        %compile.eta_red_pass,
        %compile.eta_exp_pass,
        %mem.ssa_pass,
        %mem.copy_prop_pass ff,
    );
