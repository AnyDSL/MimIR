def range_xy<L>(l : L,
                  xn : int, yn : int,
                  body : pi(L, int, int) -> L) -> L
{
    for (y : int = 0; y < yn; ++y)
        for (x : int = 0; x < xn; ++x)
            l = body(l, x, y);

    return l;
}


def initially<G,T,R>(g : G, xn: int, yn : int, make_strand : pi(G) -> T, write_result : pi(int, int, G, R) -> G, update : pi(G, T, int, int, /*loop*/ pi(T), /*stabilize*/ pi(R), /*die*/ pi())) -> G {
    return range_xy(g, xn, yn, lambda(g : G, x : int, y : int, ret : pi(G)) { 
        def loop(strand : T) {
            update(g, strand, x, y, 
                loop, 
                stab,
                die); 
        }

        def stab(res : R) { ret(write_result(x, y, g, res)); }

        def die() { ret(g); }

        loop(make_strand(g));
    });
}

def main(j : int) -> int64 {
    def update(g : int64, t : int16, xn : int, yn : int, loop : pi(int16), stabilize : pi(int16), die : pi()) {
        if (xn + yn < 42)
            die();
        if (t == 23s)
            stabilize(t);
        loop(t + 1s);
    }

    def make_strand(g : int64) -> int16 {
        return 24s;
    }

    def write_result(x : int, y : int, g : int64, r : int16) -> int64 {
        return 25l;
    }

    g : int64 = 26l;

    return initially(g, 100, 200, make_strand, write_result, update);
}
