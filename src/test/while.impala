def fac_while(n : int) -> int 
{
    if (n == 0) 
        return 1;
    if (n == 1) 
        return 1;

    r : int := 1;
    i : int := 2;
    while (i <= n) {
        r *= i;
        ++i;
    }

    return r;
}

def fac_my_while(n : int) -> int 
{
    if (n == 0) 
        return 1;
    if (n == 1) 
        return 1;

    r : int := 1;
    i : int := 2;

    def head(ir : #(int, int), ret : pi(#(int, int, bool))) {
        i : int := ir[0];
        r : int := ir[1];
        return #(i, r, i <= n);
    }
    def body(ir : #(int, int), ret : pi(#(int, int))) {
        i : int := ir[0];
        r : int := ir[1];
        r *= i;
        ++i;
        return #(i, r);
    }
    def next(r) -> noret {
        //...
    }
    my_while(#(i, r), head, body, next);


    n = 42;
}

def my_while<L, B>(l : L,
                   head : pi(L, pi(B, bool)), 
                   body : pi(B, pi(L)), 
                   next : pi(B)) 
{
    b : B, cond : bool = := head(l);

    if (cond)
        my_while(body(b), head, body, next);
    else
        next(b);
}


monadic
def my_while<O>(head : pi(pi(bool)), 
                body : pi(pi()), 
                next : pi(O)) 
{
    if (head())
        my_while(body(), head, body, next);
    else
        next();
}




def monadic<mem> f(i : int) -> int {
    j : var(int) = 42;
}
