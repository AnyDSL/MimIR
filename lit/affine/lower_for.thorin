// RUN: rm -f %t.ll ; \
// RUN: %thorin -d affine %s --output-ll %t.ll -o - | FileCheck %s
// RUN: clang %t.ll -o %t -Wno-override-module
// RUN: %t ; test $? -eq 0
// RUN: %t 1 2 3 ; test $? -eq 6

.import affine;
.import mem;
.import core;

.cn .extern main (mem : %mem.M, argc : .Idx 4294967296, argv : %mem.Ptr (%mem.Ptr (.Idx 256, 0), 0), return : .Cn [%mem.M, .Idx 4294967296]) = {
    .cn for_exit [acc : .Idx 4294967296] = {
        return (mem, acc)
    };

    .cn for_body [i : .Idx 4294967296, acc : .Idx 4294967296, continue : .Cn [.Idx 4294967296]] = {
        continue (%core.wrap.add (0, 4294967296) (i, acc))
    };
    %affine.For (4294967296, 1, (.Idx 4294967296)) (0:(.Idx 4294967296), argc, 1:(.Idx 4294967296), (0:(.Idx 4294967296)), for_body, for_exit)
};

// CHECK-DAG: .cn .extern main _[[mainVar:[0-9_]+]]::[mem_[[memVar:[0-9_]+]]: %mem.M, argc_[[argcId:[0-9_]+]]: (.Idx 4294967296), %mem.Ptr (%mem.Ptr ((.Idx 256), 0), 0), return_[[returnId:[0-9_]+]]: .Cn [%mem.M, (.Idx 4294967296)]] = {

// CHECK-DAG: .cn return_[[returnId:[0-9_]+]] _[[returnVarId:[0-9_]+]]: [%mem.M, (.Idx 4294967296)]

// CHECK-DAG: .cn for_[[forId:[0-9_]+]] _[[forVarId:[0-9_]+]]::[_[[forIdxId:[0-9_]+]]: (.Idx 4294967296), _[[forAccId:[0-9_]+]]: (.Idx 4294967296)]
// CHECK-DAG: _[[cmpId:[0-9_]+]]: (.Idx 2) = %core.icmp.XygLe
// CHECK-DAG: (_[[falseId:[0-9_]+]], for_body_[[bodyId:[0-9_]+]])#_[[cmpId]]

// CHECK-DAG: .cn _{{[0-9]+}} []
// CHECK-DAG: return_[[returnId]] (mem_[[memVar]], _{{[0-9]+}})

// CHECK-DAG: .cn for_body_[[bodyId]] []
// CHECK-DAG: = %core.wrap.add
// CHECK-DAG: = %core.wrap.add
// CHECK-DAG: for_[[forId]]

// CHECK-DAG: for_[[forId]]
// CHECK-NOT: %affine.For
