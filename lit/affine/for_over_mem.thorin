// RUN: rm -f %t.ll
// RUN: %thorin %s --output-ll %t.ll -o - | FileCheck %s
// RUN: clang %t.ll -o %t -Wno-override-module
// RUN: %t 0 1 2 3 ; test $? -eq 1
// RUN: %t 0 1 2 3 4 5 6 7 ; test $? -eq 15

.plugin core;
.plugin affine;

.con .extern main [mem : %mem.M, argc : %core.I32, argv : %mem.Ptr (%mem.Ptr (%core.I32, 0), 0), return : .Cn [%mem.M, %core.I32]] = {
    // .let arr_size = 16;
    .let arr_size = ‚ä§:.Nat;
    .let (alloc_mem, ptr) = %mem.alloc (<<%core.bitcast .Nat argc; %core.I32>>, 0) (mem);
    .con for_exit acc :: [mem : %mem.M, %core.I32, %core.I32] = {
        .let lea = %mem.lea_unsafe (ptr, %core.conv.u arr_size (%core.wrap.sub 0 (argc, 4:%core.I32)));
        .let (load_mem, val) = %mem.load (mem, lea);
        return (load_mem, val)
    };
    .con for_body [i : %core.I32, [mem : %mem.M, acc_a : %core.I32, acc_b : %core.I32], continue : .Cn [%mem.M, %core.I32, %core.I32]] = {
        .let a : %core.I32 = %core.wrap.add 0 (i, acc_a);
        .let b : %core.I32 = %core.wrap.sub 0 (i, acc_b);
        .let lea = %mem.lea_unsafe (ptr, %core.conv.u arr_size i);
        .let store_mem = %mem.store (mem, lea, a);
        continue (store_mem, a, b)
    };
    %affine.For (%core.i32, 3, (%mem.M, %core.I32, %core.I32)) (0:(%core.I32), argc, 1:(%core.I32), (alloc_mem, 0:(%core.I32), 0:(%core.I32)), for_body, for_exit)
};

// CHECK-NOT: affine.For
