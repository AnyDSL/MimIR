// RUN: rm -f %t.ll ; \
// RUN: %thorin -d affine %s --output-ll %t.ll -o - | FileCheck %s
// RUN: clang %t.ll -o %t -Wno-override-module
// RUN: %t 0 1 2 3 ; test $? -eq 1
// RUN: %t 0 1 2 3 4 5 6 7 ; test $? -eq 15

.import affine;
.import mem;
.import core;

.let _32 = 4294967296;
.let I32 = .Idx _32;

.con .extern main [mem : %mem.M, argc : I32, argv : %mem.Ptr (%mem.Ptr (I32, 0), 0), return : .Cn [%mem.M, I32]] = {
    // .let arr_size = 16;
    .let arr_size = ‚ä§:.Nat;
    .let (alloc_mem, ptr) = %mem.alloc (<<%core.bitcast (.Nat, I32) argc; I32>>, 0) (mem);
    .con for_exit acc :: [mem : %mem.M, I32, I32] = {
        .let lea = %mem.lea (arr_size, <arr_size; I32>, 0) (ptr, %core.conv.u2u _32 arr_size (%core.wrap.sub _32 0 (argc, 4:I32)));
        .let (load_mem, val) = %mem.load (I32, 0) (mem, lea);
        return (load_mem, val)
    };
    .con for_body [i : I32, [mem : %mem.M, acc_a : I32, acc_b : I32], continue : .Cn [%mem.M, I32, I32]] = {
        .let a : I32 = %core.wrap.add _32 0 (i, acc_a);
        .let b : I32 = %core.wrap.sub _32 0 (i, acc_b);
        .let lea = %mem.lea (arr_size, <arr_size; I32>, 0) (ptr, %core.conv.u2u _32 arr_size i);
        .let store_mem = %mem.store (I32, 0) (mem, lea, a);
        continue (store_mem, a, b)
    };
    %affine.For (_32, 3, (%mem.M, I32, I32)) (0:(I32), argc, 1:(I32), (alloc_mem, 0:(I32), 0:(I32)), for_body, for_exit)
};

// CHECK-NOT: affine.For
