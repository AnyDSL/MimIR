// RUN: rm -f %t.ll ; \
// RUN: %thorin -d affine %s --output-ll %t.ll --output-thorin - | FileCheck %s
// RUN: clang %t.ll -o %t -Wno-override-module
// RUN: %t ; test $? -eq 0
// RUN: %t 1 2 3 ; test $? -eq 6

.import affine;
.import mem;
.import core;

.cn .extern main [mem : %mem.M, argc : %Int 4294967296, argv : %mem.Ptr (%mem.Ptr (%Int 4294967296, 0:.Nat), 0:.Nat), return : .Cn [%mem.M, %Int 4294967296]] = {
    .cn for_exit [acc : [%Int 4294967296, %Int 4294967296]] = {
        return (mem, acc#.ff)
    };

    .cn for_body [i : %Int 4294967296, acc : [%Int 4294967296, %Int 4294967296], continue : .Cn [[%Int 4294967296, %Int 4294967296]]] = {
        .let a : %Int 4294967296 = %core.wrap.add (0:.Nat, 4294967296:.Nat) (i, acc#.ff);
        .let b : %Int 4294967296 = %core.wrap.sub (0:.Nat, 4294967296:.Nat) (i, acc#.tt);
        continue (a, b)
    };
    %affine.For (4294967296, 2, (%Int 4294967296, %Int 4294967296)) (0:(%Int 4294967296), argc, 1:(%Int 4294967296), (0:(%Int 4294967296), 0:(%Int 4294967296)), for_body, for_exit)
};

// CHECK-NOT: affine.for
