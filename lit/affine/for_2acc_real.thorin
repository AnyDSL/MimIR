// RUN: rm -f %t.ll ; \
// RUN: %thorin -d affine %s --output-ll %t.ll --output-thorin - | FileCheck %s
// RUN: clang %t.ll -o %t -Wno-override-module
// RUN: %t ; test $? -eq 0
// RUN: %t 1 2 3 ; test $? -eq 6

.import core;
.import mem;
.import affine;

.lam .extern main: .Cn [mem : %mem.M, argc : %Int 4294967296, argv : %mem.Ptr (%mem.Ptr (%Int 4294967296, 0:.Nat), 0:.Nat), return : .Cn [%mem.M, %Int 0]] = {
    0: (%Int 2), 
    .lam for_exit: .Cn [mem : %mem.M , acc : [%Int 4294967296, %Real 64]] = {
        0: (%Int 2),
        return (mem, %core.conv.r2u (0, 64) acc#.tt)
    };

    .lam for_body: .Cn [mem : %mem.M , i : %Int 4294967296, acc : [%Int 4294967296, %Real 64], continue : .Cn [%mem.M , [%Int 4294967296, %Real 64]]] = {
        0: (%Int 2),
        .let a : %Int 4294967296 = %core.wrap.add (0:.Nat, 4294967296:.Nat) (i, acc#.ff);
        .let b : %Real 64 = %core.conv.u2r (64, 0) (%core.wrap.add (0:.Nat, 0:.Nat) (%core.conv.u2u (0, 4294967296) i, %core.conv.r2u (0, 64) acc#.tt));
        continue (mem, (a, b))
    };
    %affine.For (4294967296, 2, (%Int 4294967296, %Real 64)) (mem, 0:(%Int 4294967296), argc, 1:(%Int 4294967296), (0:(%Int 4294967296), 0:(%Real 64)), for_body, for_exit)
};

// CHECK-NOT: affine.for
// CHECK: %core.conv.r2u
