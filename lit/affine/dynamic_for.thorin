// RUN: rm -f %t.ll
// RUN: %thorin %s --output-ll %t.ll -o - | FileCheck %s
// RUN: clang %t.ll -o %t -Wno-override-module
// RUN: %t 1 3 1; test $? -eq 3
// RUN: %t 0 5 2 ; test $? -eq 6

.plugin core;
.plugin affine;

.ccon atoi [%mem.M, %mem.Ptr («⊤:.Nat; .I8», 0), .Cn [%mem.M, .I32]];

.con .extern main [mem : %mem.M, argc : .I32, argv : %mem.Ptr («⊤:.Nat; %mem.Ptr («⊤:.Nat; .I8», 0)», 0), return : .Cn [%mem.M, .I32]] = {
    .con for_body [i : .I32, [acc_a : .I32, acc_b : .I32], continue : .Cn [.I32, .I32]] = {
        .let a : .I32 = %core.wrap.add 0 (i, acc_a);
        .let b : .I32 = %core.wrap.sub 0 (i, acc_b);
        continue (a, b)
    };

    .con atoi_cont_begin [mem : %mem.M, start : .I32] = {
        .let _19234: %mem.Ptr (%mem.Ptr («⊤:.Nat; .I8», 0), 0) = %mem.lea (⊤:.Nat, ‹⊤:.Nat; %mem.Ptr («⊤:.Nat; .I8», 0)›, 0) (argv, 2I32);
        .let _19247: [%mem.M, %mem.Ptr («⊤:.Nat; .I8», 0)] = %mem.load (mem, _19234);

        .con atoi_cont_end [mem : %mem.M, stop : .I32] = {
            .let _19318: %mem.Ptr (%mem.Ptr («⊤:.Nat; .I8», 0), 0) = %mem.lea (⊤:.Nat, ‹⊤:.Nat; %mem.Ptr («⊤:.Nat; .I8», 0)›, 0) (argv, 3I32);
            .let _19331: [%mem.M, %mem.Ptr («⊤:.Nat; .I8», 0)] = %mem.load (mem, _19318);
            .con atoi_cont_step [mem : %mem.M, step : .I32] = {
                .con for_exit [acc : [.I32, .I32]] = {
                    return (mem, acc#.ff)
                };

                %affine.For (.i32, 2, (.I32, .I32)) (start, stop, step, (0I32, 5I32), for_body, for_exit)
            };
            atoi (_19331#.ff, _19331#.tt, atoi_cont_step)
        };
        atoi (_19247#.ff, _19247#.tt, atoi_cont_end)
    };

    .let _19093: %mem.Ptr (%mem.Ptr («⊤:.Nat; .I8», 0), 0) = %mem.lea (⊤:.Nat, ‹⊤:.Nat; %mem.Ptr («⊤:.Nat; .I8», 0)›, 0) (argv, 1I32);
    .let _19163: [%mem.M, %mem.Ptr («⊤:.Nat; .I8», 0)] = %mem.load (mem, _19093);
    atoi (_19163#.ff, _19163#.tt, atoi_cont_begin)
};

// CHECK-NOT: affine.for
