// RUN: rm -f %t.ll ; \
// RUN: %thorin -d affine %s --output-ll %t.ll --output-thorin - | FileCheck %s
// RUN: clang %t.ll -o %t -Wno-override-module
// RUN: %t 1 3 1; test $? -eq 3
// RUN: %t 0 5 2 ; test $? -eq 6

.import affine;
.import mem;

.lam atoi: .Cn [%mem.M, %mem.Ptr («⊤:.Nat; %Int 256», 0:.Nat), .Cn [%mem.M, %Int 4294967296]];

.lam .extern main: .Cn [mem : %mem.M, argc : %Int 4294967296, argv : %mem.Ptr («⊤:.Nat; %mem.Ptr («⊤:.Nat; %Int 256», 0:.Nat)», 0:.Nat), return : .Cn [%mem.M, %Int 4294967296]] = {
    0: (%Int 2), 
    .lam for_exit: .Cn [mem : %mem.M , acc : [%Int 4294967296, %Int 4294967296]] = {
        0: (%Int 2),
        return (mem, acc#.ff)
    };

    .lam for_body: .Cn [mem : %mem.M , i : %Int 4294967296, acc : [%Int 4294967296, %Int 4294967296], continue : .Cn [%mem.M , [%Int 4294967296, %Int 4294967296]]] = {
        0: (%Int 2),
        .let a : %Int 4294967296 = %Wrap_add (0:.Nat, 4294967296:.Nat) (i, acc#.ff);
        .let b : %Int 4294967296 = %Wrap_sub (0:.Nat, 4294967296:.Nat) (i, acc#.tt);
        continue (mem, (a, b))
    };
    
    .lam atoi_cont_begin: .Cn [mem : %mem.M, start : %Int 4294967296] = {
        .ff,
        .let _19234: %mem.Ptr (%mem.Ptr («⊤:.Nat; %Int 256», 0:.Nat), 0:.Nat) = %mem.lea (⊤:.Nat, ‹⊤:.Nat; %mem.Ptr («⊤:.Nat; %Int 256», 0:.Nat)›, 0:.Nat) (argv, 2:(%Int 4294967296));
        .let _19247: [%mem.M, %mem.Ptr («⊤:.Nat; %Int 256», 0:.Nat)] = %mem.load (%mem.Ptr («⊤:.Nat; %Int 256», 0:.Nat), 0:.Nat) (mem, _19234);

        .lam atoi_cont_end: .Cn [mem : %mem.M, stop : %Int 4294967296] = {
            .ff,
            .let _19318: %mem.Ptr (%mem.Ptr («⊤:.Nat; %Int 256», 0:.Nat), 0:.Nat) = %mem.lea (⊤:.Nat, ‹⊤:.Nat; %mem.Ptr («⊤:.Nat; %Int 256», 0:.Nat)›, 0:.Nat) (argv, 3:(%Int 4294967296));
            .let _19331: [%mem.M, %mem.Ptr («⊤:.Nat; %Int 256», 0:.Nat)] = %mem.load (%mem.Ptr («⊤:.Nat; %Int 256», 0:.Nat), 0:.Nat) (mem, _19318);
            .lam atoi_cont_step: .Cn [mem : %mem.M, step : %Int 4294967296] = {
                .ff,
                %affine.For (4294967296:.Nat, 2:.Nat, (%Int 4294967296, %Int 4294967296)) (mem, start, stop, step, (0:(%Int 4294967296), 5:(%Int 4294967296)), for_body, for_exit)
            };
            atoi (_19331#.ff, _19331#.tt, atoi_cont_step)
        };
        atoi (_19247#.ff, _19247#.tt, atoi_cont_end)
    };

    .let _19093: %mem.Ptr (%mem.Ptr («⊤:.Nat; %Int 256», 0:.Nat), 0:.Nat) = %mem.lea (⊤:.Nat, ‹⊤:.Nat; %mem.Ptr («⊤:.Nat; %Int 256», 0:.Nat)›, 0:.Nat) (argv, 1:(%Int 4294967296));
    .let _19163: [%mem.M, %mem.Ptr («⊤:.Nat; %Int 256», 0:.Nat)] = %mem.load (%mem.Ptr («⊤:.Nat; %Int 256», 0:.Nat), 0:.Nat) (mem, _19093);
    atoi (_19163#.ff, _19163#.tt, atoi_cont_begin)
};

// CHECK-NOT: affine.for
