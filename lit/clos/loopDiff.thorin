// RUN: rm -f %t.ll
// RUN: %thorin -p clos %s --output-ll %t.ll -o -

.plugin core;

.let void_ptr = %mem.Ptr («⊤:.Nat; []», 0);

.con printInteger [mem: %mem.M, val: %core.I32, return : .Cn [%mem.M]];
.con printNL [mem: %mem.M, return : .Cn [%mem.M]];
.con time [mem: %mem.M, return : .Cn [%mem.M, void_ptr]];
.con print_time_diff [mem: %mem.M, t1: void_ptr, t2: void_ptr, return : .Cn [%mem.M]];

.let size = 100;

.con printArr [mem: %mem.M, arr : %mem.Ptr (<<size; %core.I32>>, 0), return : .Cn [%mem.M]] = {
    .let arr_size = ⊤:.Nat;

    .con loop_body [mem: %mem.M, i : %core.I32, continue : .Cn %mem.M] = {
        .let lea = %mem.lea_unsafe (arr, i);
        .let (load_mem, val) = %mem.load (mem, lea);
        printInteger(load_mem, val, continue)
    };

    .con loop_head [mem: %mem.M, i : %core.I32] = {
        .con yield [mem: %mem.M] = {
            loop_head( mem, %core.wrap.add 0 (i, 1:%core.I32) )
        };

        .con enter [mem: %mem.M] = {
            loop_body ( mem, i, yield )
        };

        .con exit [mem: %mem.M] = {
            printNL (mem, return)
        };

        .let condition = %core.icmp.ul (i, %core.bitcast %core.I32 size);
        .let target = (exit, enter)#condition;
        target ( mem )
    };

    loop_head ( mem, 0:%core.I32 )
};

.con init [mem: %mem.M, arr : %mem.Ptr (<<size; %core.I32>>, 0), offset : %core.I32, return : .Cn [%mem.M]] = {
    .let arr_size = ⊤:.Nat;

    .con loop_body [mem: %mem.M, i : %core.I32, continue : .Cn %mem.M] = {
        .let lea = %mem.lea_unsafe (arr, i);
        .let add = %core.wrap.add 0 (offset, i);
        .let store_mem = %mem.store (mem, lea, add);
        continue(store_mem)
    };

    .con loop_head [mem: %mem.M, i : %core.I32] = {
        .con yield [mem: %mem.M] = {
            loop_head( mem, %core.wrap.add 0 (i, 1:%core.I32) )
        };

        .con enter [mem: %mem.M] = {
            loop_body ( mem, i, yield )
        };

        .let condition = %core.icmp.ul (i, %core.bitcast %core.I32 size);
        .let target = (return, enter)#condition;
        target ( mem )
    };

    loop_head ( mem, 0:%core.I32 )
};


.con const [mem: %mem.M, arr : %mem.Ptr (<<size; %core.I32>>, 0), constValue : %core.I32, return : .Cn [%mem.M]] = {
    .let arr_size = ⊤:.Nat;

    .con loop_body [mem: %mem.M, i : %core.I32, continue : .Cn %mem.M] = {
        .let lea = %mem.lea_unsafe (arr, i);

        .let store_mem = %mem.store (mem, lea, constValue);
        continue(store_mem)
    };

    .con loop_head [mem: %mem.M, i : %core.I32] = {
        .con yield [mem: %mem.M] = {
            loop_head( mem, %core.wrap.add 0 (i, 1:%core.I32) )
        };

        .con enter [mem: %mem.M] = {
            loop_body ( mem, i, yield )
        };

        .let condition = %core.icmp.ul (i, %core.bitcast %core.I32 size);
        .let target = (return, enter)#condition;
        target ( mem )
    };

    loop_head ( mem, 0:%core.I32 )
};


.con outer [mem: %mem.M, x : %core.I32, return : .Cn [%mem.M]] = {
    .let arr_size = ⊤:.Nat;

    .let (alloc_mem_a, a_arr) = %mem.alloc (<<size; %core.I32>>, 0) (mem);
    .let (alloc_mem_b, b_arr) = %mem.alloc (<<size; %core.I32>>, 0) (alloc_mem_a);
    .let (alloc_mem_c, c_arr) = %mem.alloc (<<size; %core.I32>>, 0) (alloc_mem_b);

    .let (alloc_mem_ad, ad_arr) = %mem.alloc (<<size; %core.I32>>, 0) (alloc_mem_c);
    .let (alloc_mem_bd, bd_arr) = %mem.alloc (<<size; %core.I32>>, 0) (alloc_mem_ad);
    .let (alloc_mem_cd, cd_arr) = %mem.alloc (<<size; %core.I32>>, 0) (alloc_mem_bd);

    .con end [mem: %mem.M, return : .Cn [%mem.M]] = {
        return (mem)
    };

    .let pb_type = .Cn [%mem.M, .Cn [%mem.M]];
    .let (alloc_pb_mem, pb_ptr) = %mem.malloc (pb_type, 0) (alloc_mem_cd, 32); // besser slot
    .let pb_arr = %core.bitcast (%mem.Ptr («⊤:.Nat; pb_type», 0)) pb_ptr;
    .let lea_pb = %mem.lea_unsafe (pb_arr, 0:%core.I32);
    .let mem_assign_pb_anchor = %mem.store (alloc_pb_mem, lea_pb, end);

    .let finish_mem = mem_assign_pb_anchor;

    .con loop_body [mem: %mem.M, i : %core.I32, return : .Cn %mem.M] = {
        .let a_lea = %mem.lea_unsafe (a_arr, i);
        .let b_lea = %mem.lea_unsafe (b_arr, i);
        .let c_lea = %mem.lea_unsafe (c_arr, i);

        .let (a_load_mem, a_val) = %mem.load (mem, a_lea);
        .let (b_load_mem, b_val) = %mem.load (a_load_mem, b_lea);

        .let prod = %core.wrap.mul 0 (a_val, b_val);

        .let c_store_mem = %mem.store (b_load_mem, c_lea, prod);

        .let (load_pb_mem, last_pb) = %mem.load (c_store_mem, lea_pb);

        .con pb [mem: %mem.M, end: .Cn [%mem.M]] = {
            .let ad_lea = %mem.lea_unsafe (ad_arr, i);
            .let bd_lea = %mem.lea_unsafe (bd_arr, i);
            .let cd_lea = %mem.lea_unsafe (cd_arr, i);

            .let (cd_load_mem, cd_val) = %mem.load (mem, cd_lea);
            .let cd_store_mem = %mem.store (cd_load_mem, cd_lea, 0:%core.I32);

            .let (ad_load_mem, ad_val) = %mem.load (cd_store_mem, ad_lea);
            .let cd_b_mul = %core.wrap.mul 0 (cd_val, b_val);
            .let ad_b_add = %core.wrap.add 0 (ad_val, cd_b_mul);
            .let ad_store_mem = %mem.store (ad_load_mem, ad_lea, ad_b_add);

            .let (bd_load_mem, bd_val) = %mem.load (ad_store_mem, bd_lea);
            .let cd_a_mul = %core.wrap.mul 0 (cd_val, a_val);
            .let bd_a_add = %core.wrap.add 0 (bd_val, cd_a_mul);
            .let bd_store_mem = %mem.store (bd_load_mem, bd_lea, bd_a_add);

            last_pb (bd_store_mem, end)
        };

        .let store_pb_mem = %mem.store (load_pb_mem, lea_pb, pb);

        return(store_pb_mem)
    };


    .con print_c [mem: %mem.M] = {
        printArr(mem, c_arr, return)
    };

    .con print_b [mem: %mem.M] = {
        printArr(mem, b_arr, print_c)
    };

    .con print_a [mem: %mem.M] = {
        printArr(mem, a_arr, print_b)
    };

    .con print_cd [mem: %mem.M] = {
        printArr(mem, cd_arr, print_a)
    };

     .con print_bd [mem: %mem.M] = {
        printArr(mem, bd_arr, print_cd)
    };

    .con print_ad [mem: %mem.M] = {
        printArr(mem, ad_arr, print_bd)
    };


    .con time_start_cont [mem:%mem.M, start_time:void_ptr] = {
        .con timer [mem:%mem.M] = {
            .con time_end_cont [mem:%mem.M, end_time:void_ptr] = {
                print_time_diff (mem, start_time, end_time, print_ad)
            };
            time (mem, time_end_cont)
            // print_ad(mem)
        };

        .con loop_head [mem: %mem.M, i : %core.I32] = {
            .con exit [mem: %mem.M] = {
                .let (backward_pass_mem, backward_pass) = %mem.load (mem, lea_pb);
                backward_pass (backward_pass_mem, timer)
            };

            .con yield [mem: %mem.M] = {
                // loop_head( mem, %core.wrap.add (0, %core.i32) (i, 1:%core.I32) )
                loop_head( mem, %core.wrap.add 0 (i, 1:%core.I32) )
            };

            .con enter [mem: %mem.M] = {
                loop_body ( mem, i, yield )
            };

            .let condition = %core.icmp.ul (i, %core.bitcast %core.I32 size);
            .let target = (exit, enter)#condition;
            target ( mem )
        };

        loop_head ( mem, 0:%core.I32 )
    };

    .con init_a [mem: %mem.M] = {
        .con init_b [mem: %mem.M] = {
            .con init_c [mem: %mem.M] = {
                .con init_ad [mem: %mem.M] = {
                    .con init_bd [mem: %mem.M] = {
                        .con init_cd [mem: %mem.M] = {
                            time (mem, time_start_cont)
                        };

                        const(mem, cd_arr, 1:%core.I32, init_cd)
                    };

                    const(mem, bd_arr,  0:%core.I32, init_bd)
                };

                const(mem, ad_arr,  0:%core.I32, init_ad)
            };

            const(mem, c_arr, 0:%core.I32, init_c)
        };

        init(mem, b_arr, 1:%core.I32, init_b)
    };

    init(finish_mem, a_arr, 0:%core.I32, init_a)
};

.con .extern main [mem: %mem.M, argc: %core.I32, argv : %mem.Ptr («⊤:.Nat; %mem.Ptr («⊤:.Nat; %core.I8», 0)», 0), return : .Cn [%mem.M, %core.I32]] = {
    .con callback (mem: %mem.M) = {
        return (mem, 1:%core.I32)
    };

    outer(mem, 1:%core.I32, callback)
};
