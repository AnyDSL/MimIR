
.import mem;
.import core;
.import direct;

.let i32 = %Int 4294967296;
.let i8 = %Int 256;
.let pb_type = .Cn [%mem.M];

.cn .extern main [mem: %mem.M, argc: i32, argv : %mem.Ptr («⊤:.Nat; %mem.Ptr («⊤:.Nat; %Int 256», 0:.Nat)», 0:.Nat), return : .Cn [%mem.M, i32]] = {
    .cn callback (mem: %mem.M) = {
        return (mem, 1:i32)
    };

    .let (alloc_pb_mem, pb_ptr) = %mem.malloc (pb_type, 0) (mem, 1);

    .let pb_arr = %core.bitcast (%mem.Ptr («⊤:.Nat; pb_type», 0), %mem.Ptr (pb_type, 0)) pb_ptr;

    .let lea_pb = %mem.lea (⊤:.Nat, <⊤:.Nat; pb_type>, 0) (pb_arr, 0:i32);
    .let store_return_mem = %mem.store (pb_type, 0) (alloc_pb_mem, lea_pb, callback);

    .let (load_clos_mem, load_clos) = %mem.load (pb_type, 0) (store_return_mem, lea_pb);
    load_clos(load_clos_mem)
};
