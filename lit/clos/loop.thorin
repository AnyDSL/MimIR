
.import mem;
.import core;
.import direct;

.let i32 = %Int 4294967296;
.let i8 = %Int 256;

.cn printInteger [mem: %mem.M, val: i32, return : .Cn [%mem.M]];


.cn init [mem: %mem.M, arr : %mem.Ptr (<<4; i32>>, 0:.Nat), return : .Cn [%mem.M]] = {
    .let arr_size = ⊤:.Nat;

    .cn loop_body [mem: %mem.M, i : i32, continue : .Cn %mem.M] = {
        .let lea = %mem.lea (arr_size, <arr_size; i32>, 0) (arr, i);

        .let store_mem = %mem.store (i32, 0) (mem, lea, i);
        continue(store_mem)
    };


    .cn loop_head [mem: %mem.M, i : i32] = {
        .cn yield [mem: %mem.M] = {
            loop_head( mem, %core.wrap.add (0, 4294967296) (i, 1:i32) )
        };

        .cn enter [mem: %mem.M] = {
            loop_body ( mem, i, yield )
        };

        .let condition = %core.icmp.ul 4294967296 (i, 19:i32);
        .let target = (return, enter)#condition;
        target ( mem )
    };

    loop_head ( mem, 0:i32 )
};


.cn outer [mem: %mem.M, x : i32, return : .Cn [%mem.M, i32]] = {

    .let arr_size = ⊤:.Nat;

    .let (alloc_mem_a, a_arr) = %mem.alloc (<<%core.bitcast (.Nat, i32) 4:i32; i32>>, 0) (mem);
    .let (alloc_mem_b, b_arr) = %mem.alloc (<<%core.bitcast (.Nat, i32) 4:i32; i32>>, 0) (alloc_mem_a);
    .let (alloc_mem_c, c_arr) = %mem.alloc (<<%core.bitcast (.Nat, i32) 4:i32; i32>>, 0) (alloc_mem_b);



    .cn loop_body [mem: %mem.M, i : i32, continue : .Cn %mem.M] = {
        .let a_lea = %mem.lea (arr_size, <arr_size; i32>, 0) (a_arr, i);
        .let b_lea = %mem.lea (arr_size, <arr_size; i32>, 0) (b_arr, i);
        .let c_lea = %mem.lea (arr_size, <arr_size; i32>, 0) (c_arr, i);

        .let (a_load_mem, a_val) = %mem.load (i32, 0) (mem, a_lea);
        .let (b_load_mem, b_val) = %mem.load (i32, 0) (a_load_mem, a_lea);

        .let prod = %core.wrap.mul (0, 4294967296) (a_val, b_val);

        .let c_store_mem = %mem.store (i32, 0) (b_load_mem, c_lea, prod);

        printInteger(c_store_mem, prod, continue)
        //continue(c_store_mem)
    };


    .cn loop_head [mem: %mem.M, i : i32] = {
        .cn exit [mem: %mem.M] = {
            return (mem, i)
        };

        .cn yield [mem: %mem.M] = {
            loop_head( mem, %core.wrap.add (0, 4294967296) (i, 1:i32) )
        };

        .cn enter [mem: %mem.M] = {
            loop_body ( mem, i, yield )
        };

        .let condition = %core.icmp.ul 4294967296 (i, 19:i32);
        .let target = (exit, enter)#condition;
        target ( mem )
    };

    .cn init_a [mem: %mem.M] = {
        .cn init_b [mem: %mem.M] = {
            .cn init_c [mem: %mem.M] = {
                loop_head ( mem, 0:i32 )
            };

            init(mem, c_arr, init_c)
        };

        init(mem, b_arr, init_b)
    };

    init(alloc_mem_c, a_arr, init_a)
};

.cn .extern main [mem: %mem.M, argc: i32, argv : %mem.Ptr («⊤:.Nat; %mem.Ptr («⊤:.Nat; %Int 256», 0:.Nat)», 0:.Nat), return : .Cn [%mem.M, i32]] = {
    .cn callback (mem: %mem.M, x : i32) = {
        return (mem, x)
    };

    outer(mem, 1:i32, callback)
};
