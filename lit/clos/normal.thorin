
.import mem;
.import core;
.import direct;

.let i32 = %Int 4294967296;
.let i8 = %Int 256;
.let pb_type = .Cn [%mem.M, .Cn [%mem.M, i32]];


.cn .extern main [mem: %mem.M, argc: i32, argv : %mem.Ptr («⊤:.Nat; %mem.Ptr («⊤:.Nat; %Int 256», 0:.Nat)», 0:.Nat), return : .Cn [%mem.M, i32]] = {

    .let test = %core.bitcast ( i32, %mem.Ptr («⊤:.Nat; %mem.Ptr («⊤:.Nat; %Int 256», 0:.Nat)», 0:.Nat) ) argv;

    .cn callback [mem: %mem.M, argc: i32] = {
        return (mem, argc)
    };

    .cn end [mem: %mem.M, return : .Cn [%mem.M, i32]] = {
        .let add = %core.wrap.add (0, 4294967296) (argc, test);
        return (mem, add)
    };

    .let (alloc_pb_mem, pb_ptr) = %mem.malloc (pb_type, 0) (mem, 100);
    .let pb_arr = %core.bitcast ( %mem.Ptr («⊤:.Nat; pb_type», 0), %mem.Ptr (pb_type, 0)) pb_ptr;
    .let lea_pb = %mem.lea (⊤:.Nat, <⊤:.Nat; pb_type>, 0) (pb_arr, 0:i32);
    .let store_pb = %mem.store (pb_type, 0) (alloc_pb_mem, lea_pb, end);
    .let (load_pb_mem, last_pb) = %mem.load (pb_type, 0) (store_pb, lea_pb);
    last_pb ( load_pb_mem, callback )
};
