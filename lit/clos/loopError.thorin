// RUN: rm -f %t.ll ; \
// RUN: %thorin -d clos %s --output-ll %t.ll -o - 

.import mem;
.import core;

.let i32 = .Idx 4294967296;
.let i8 = .Idx 256;

.cn printInteger [mem: %mem.M, val: i32, return : .Cn [%mem.M]];

.cn init [mem: %mem.M, return : .Cn [%mem.M]] = {
    .let arr_size = ⊤:.Nat;

    .cn loop_head [mem: %mem.M, i : i32] = {
        .cn yield [mem: %mem.M] = {
            loop_head( mem, %core.wrap.add (0, 4294967296) (i, 1:i32) )
        };

        .cn print [mem: %mem.M] = {
            printInteger( mem, i, yield )
        };

        .let condition = %core.icmp.ul 4294967296 (i, 42:i32);
        .let target = (return, print)#condition;
        target ( mem )
    };

    loop_head ( mem, 0:i32 )
};

.cn .extern main [mem: %mem.M, argc: i32, argv : %mem.Ptr («⊤:.Nat; %mem.Ptr («⊤:.Nat; .Idx 256», 0:.Nat)», 0:.Nat), return : .Cn [%mem.M, i32]] = {
    .cn init_b [mem: %mem.M] = {
        return ( mem, 0:i32 )
    };

    .cn init_a [mem: %mem.M] = {
        init(mem, init_b)
    };

    init(mem, init_a)
};
