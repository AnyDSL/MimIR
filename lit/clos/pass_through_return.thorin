// RUN: rm -f %t.ll ; \
// RUN: %thorin -d clos %s --output-ll %t.ll -o - 

.import mem;
.import core;
.import direct;

.let i32 = .Idx 4294967296;
.let i8 = .Idx 256;
.let pb_type = .Cn [%mem.M, .Cn [%mem.M]];

.cn end [mem: %mem.M, return : .Cn [%mem.M]] = {
    return (mem)
};

.cn printInteger [mem: %mem.M, val: i32, return : .Cn [%mem.M]];

.cn .extern main [mem: %mem.M, argc: i32, argv : %mem.Ptr («⊤:.Nat; %mem.Ptr («⊤:.Nat; .Idx 256», 0:.Nat)», 0:.Nat), return : .Cn [%mem.M, i32]] = {
    .cn callback (mem: %mem.M) = {
        return (mem, 1:i32)
    };

    .let (alloc_pb_mem, pb_ptr) = %mem.malloc (pb_type, 0) (mem, 100);
    .let pb_arr = %core.bitcast ( %mem.Ptr («⊤:.Nat; pb_type», 0), %mem.Ptr (pb_type, 0)) pb_ptr;
    .let lea_pb = %mem.lea (⊤:.Nat, <⊤:.Nat; pb_type>, 0) (pb_arr, 0:i32);
    .let store_pb = %mem.store (pb_type, 0) (alloc_pb_mem, lea_pb, end);

    .cn loop_head [mem: %mem.M, i : i32] = {
        .cn exit [mem: %mem.M] = {
            .let (backward_pass_mem, backward_pass) = %mem.load (pb_type, 0) (mem, lea_pb); // <- begin backward pass
            backward_pass (backward_pass_mem, callback)
        };

        .cn yield [mem: %mem.M] = {
            loop_head( mem, %core.wrap.add (0, 4294967296) (i, 1:i32) )
        };

        .cn body [mem: %mem.M] = {
            .let (load_pb_mem, last_pb) = %mem.load (pb_type, 0) (mem, lea_pb);
            .cn pb [mem: %mem.M, end: .Cn [%mem.M]] = {
                .cn inner_yield [mem: %mem.M] = {
                    last_pb( mem, end )
                };

                printInteger(mem, i, inner_yield)
                //last_pb (mem, end)  // << call previous backward pass block
            };

            .let store_pb_mem = %mem.store (pb_type, 0) (load_pb_mem, lea_pb, pb); // << stack backward pass block

            printInteger(store_pb_mem, i, yield)
        };

        .let condition = %core.icmp.ul 4294967296 (i, 19:i32);
        .let target = (exit, body)#condition;
        target ( mem )
    };

    loop_head ( store_pb, 0:i32 ) // <-- start forward pass
};
