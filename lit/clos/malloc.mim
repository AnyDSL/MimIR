// RUN: rm -f %t.ll
// RUN: %mim -p clos %s --output-ll %t.ll -o -

plugin core;


con f [mem: %mem.M, x: I32, return: Cn [%mem.M, I32]] = return (mem, %core.wrap.add 0 (x, 42I32));
con g [mem: %mem.M, x: I32, return: Cn [%mem.M, I32]] = return (mem, 1I32);

fun extern main(mem: %mem.M, argc: I32, argv: %mem.Ptr («⊤:Nat; %mem.Ptr («⊤:Nat; I8», 0)», 0)): [%mem.M, I32] =
    con h(mem: %mem.M, x: I32, return: Cn [%mem.M, I32]) = return (mem, %core.wrap.add 0 (x, argc));

    let pb_type  = Cn [%mem.M, I32, Cn [%mem.M, I32]];
    let Tas      = (pb_type, 0);
    let arr_size = ⊤:Nat;

    let (mem, pb_ptr) = %mem.malloc Tas (mem, 32);
    let pb_arr        = %core.bitcast (%mem.Ptr («⊤:Nat; Cn [%mem.M, I32, Cn [%mem.M, I32]]», 0)) pb_ptr;
    let (mem, a_arr)  = %mem.alloc («4; I32», 0) (mem);

    let lea = %mem.lea (pb_arr, %core.idx_unsafe 0);
    let mem = %mem.store (mem, lea, f);
    let lea = %mem.lea (pb_arr, %core.idx_unsafe 1);
    let mem = %mem.store (mem, lea, g);
    let lea = %mem.lea (pb_arr, %core.idx_unsafe 2);
    let mem = %mem.store (mem, lea, h);
    let lea = %mem.lea (a_arr, %core.idx_unsafe 0);
    let mem = %mem.store (mem, lea, %core.idx_unsafe 10);
    let lea = %mem.lea (pb_arr, %core.idx_unsafe 2);
    let (mem, func) = %mem.load (mem, lea);
    let (mem,  val) = %mem.load (mem, lea);

    func(mem, 1I32, cn (mem: %mem.M, x: I32) = return (mem, x));
