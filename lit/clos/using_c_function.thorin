// RUN: rm -f %t.ll
// RUN: %thorin -p clos %s --output-ll %t.ll -o -


// build a linked list/stack/for loop
// in a for loop
// first the integers are printed ascending
// then the stack is called and should print them descending
// the functions are stored and loaded in between each iteration

.plugin core;
.plugin direct;

.let pb_type = .Cn %mem.M;

.ccon printInteger [mem: %mem.M, val: .I32, return : .Cn [%mem.M]];

.con .extern main [mem: %mem.M, argc: .I32, argv : %mem.Ptr («⊤:.Nat; %mem.Ptr («⊤:.Nat; .I8», 0)», 0), return : .Cn [%mem.M, .I32]] = {
    .con end [mem: %mem.M] = return (mem, 99I32);

    .con init22 [mem: %mem.M] = {
        .let (alloc_pb_mem, pb_ptr) = %mem.malloc (pb_type, 0) (mem, 100);
        .let pb_arr = %core.bitcast (%mem.Ptr («⊤:.Nat; pb_type», 0)) pb_ptr;
        .let lea_pb = %mem.lea (⊤:.Nat, <⊤:.Nat; pb_type>, 0) (pb_arr, 0I32);
        .let store_pb = %mem.store (alloc_pb_mem, lea_pb, end);

        .con loop_head [mem: %mem.M, i : .I32] = {
            .con exit [mem: %mem.M] = {
                .let (backward_pass_mem, backward_pass) = %mem.load (mem, lea_pb);  // <- begin backward pass
                backward_pass (backward_pass_mem)
            };

            .con yield [mem: %mem.M] = loop_head( mem, %core.wrap.add 0 (i, 1I32) );

            .con body [mem: %mem.M] = {
                .let (load_pb_mem, last_pb) = %mem.load (mem, lea_pb);
                .con pb [mem: %mem.M] = {
                    //last_pb (mem)  // << call previous backward pass block

                    printInteger(mem, i, last_pb)
                };

                .let store_pb_mem = %mem.store (load_pb_mem, lea_pb, pb);  // << stack backward pass block

                printInteger(store_pb_mem, i, yield)
            };

            .let condition = %core.icmp.ul (i, 19I32);
            .let target = (exit, body)#condition;
            target ( mem )
        };


        loop_head ( store_pb, 0I32 ) // <-- start forward pass
    };

    printInteger(mem, 42I32, init22)
};
