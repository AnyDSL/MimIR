// RUN: rm -f %t.ll
// RUN: %thorin -p clos %s --output-ll %t.ll -o -

/*
TODO: investigate and open error
thorin: /plug/clos/phase/clos_conv.cpp:64: const thorin::Def* thorin::clos::clos_pack_dbg(const thorin::Def*, const thorin::Def*, const thorin::Def*, const thorin::Def*): Assertion `pi && env->type() == pi->dom(Clos_Env_Param)' failed.
*/

.plugin core;
.plugin direct;

.let pb_type = .Cn [%mem.M];

.con .extern main [mem: %mem.M, argc: .I32, argv : %mem.Ptr («⊤:.Nat; %mem.Ptr («⊤:.Nat; .I8», 0)», 0), return : .Cn [%mem.M, .I32]] = {

    .con end [mem: %mem.M] = {
        return (mem, 1I32 // <-- end backward pass
    };

    .let (alloc_pb_mem, pb_ptr) = %mem.malloc (pb_type, 0) (mem, 100);
    .let pb_arr = %core.bitcast %mem.Ptr («⊤:.Nat; pb_type», 0) pb_ptr;
    .let lea_pb = %mem.lea (⊤:.Nat, <⊤:.Nat; pb_type>, 0) (pb_arr, 0I32;
    .let store_pb = %mem.store (alloc_pb_mem, lea_pb, end);

    .con loop_head [mem: %mem.M, i : .I32] = {
        .con exit [mem: %mem.M] = {
            .let (backward_pass_mem, backward_pass) = %mem.load (mem, lea_pb); // <- begin backward pass
            backward_pass (backward_pass_mem)
        };

        .con yield [mem: %mem.M] = {
            loop_head( mem, %core.wrap.add 0 (i, 1I32 )
        };

        .con body [mem: %mem.M] = {
            .let (load_pb_mem, last_pb) = %mem.load (mem, lea_pb);
            .con pb [mem: %mem.M] = {
                last_pb (mem) // << call previous backward pass block
            };

            .let store_pb_mem = %mem.store (load_pb_mem, lea_pb, pb);  // << stack backward pass block
            exit(store_pb_mem) // <######--- if statt while
        };

        .let condition = %core.icmp.ul (i, 19I32;
        .let target = (exit, body)#condition;
        target ( mem )
    };

    loop_head ( store_pb, 0I32 ) // <-- start forward pass
};
