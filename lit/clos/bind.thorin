// RUN: rm -f %t.ll ; \
// RUN: %thorin -d clos %s --output-ll %t.ll
// RUN: clang %S/lib.c %t.ll -o %t -Wno-override-module
// RUN: %t | FileCheck %s

.import mem;
.import core;

.let i32 = .Idx 4294967296;
.let i8 = .Idx 256;
.let pb_type = .Cn [%mem.M, .Cn [%mem.M]];

.con println_i32 [mem: %mem.M, val: i32, return : .Cn [%mem.M]];

.let size = 100:.Nat;

.con recursive [mem: %mem.M, i : i32, last_pullback: pb_type, return: .Cn [%mem.M]] = {
    .con exit [mem: %mem.M] = {
        last_pullback ( mem, return )
    };

    .con loop_body [mem: %mem.M] = {
        .con pb [mem: %mem.M, return: .Cn [%mem.M]] = {
            .con next [mem: %mem.M] = {
                last_pullback (mem, return)
            };

            println_i32( mem, i , next )
        };

        .con next [mem: %mem.M] = {
            recursive( mem, %core.wrap.add 4294967296 0 (i, 1:i32), pb, return )
        };

        println_i32( mem, i , next )
    };

    .let condition = %core.icmp.ul 4294967296 (i, %core.bitcast (i32, .Nat) size);
    .let target = (exit, loop_body)#condition;
    target ( mem )
};

.con outer [mem: %mem.M, x : i32, return : .Cn [%mem.M]] = {
    .con end [mem: %mem.M, return : .Cn [%mem.M]] = {
        return (mem)
    };

    recursive ( mem, 0:i32, end, return )
};

.con .extern main [mem: %mem.M, argc: i32, argv : %mem.Ptr («⊤:.Nat; %mem.Ptr («⊤:.Nat; .Idx 256», 0:.Nat)», 0:.Nat), return : .Cn [%mem.M, i32]] = {
    .con callback (mem: %mem.M) = {
        return (mem, 0:i32)
    };

    outer(mem, 1:i32, callback)
};

// CHECK: 99
// CHECK-COUNT-98: {{[0-9]+}}
// CHECK: 0
