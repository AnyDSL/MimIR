// RUN: rm -f %t.ll
// RUN: %thorin -p clos %s --output-ll %t.ll
// RUN: clang %S/../lib.c %t.ll -o %t -Wno-override-module
// RUN: %t | FileCheck %s

.plugin mem;
.plugin core;

.let pb_type = .Cn [%mem.M, .Cn [%mem.M]];

.ccon println_i32 [mem: %mem.M, val: .I32, return : .Cn [%mem.M]];

.let size = 100;

.con recursive [mem: %mem.M, i : .I32, last_pullback: pb_type, return: .Cn [%mem.M]] = {
    .con exit [mem: %mem.M] = {
        last_pullback ( mem, return )
    };

    .con loop_body [mem: %mem.M] = {
        .con pb [mem: %mem.M, return: .Cn [%mem.M]] = {
            .con next [mem: %mem.M] = {
                last_pullback (mem, return)
            };

            println_i32( mem, i , next )
        };

        .con next [mem: %mem.M] = {
            recursive( mem, %core.wrap.add 0 (i, 1I32), pb, return )
        };

        println_i32( mem, i , next )
    };

    .let condition = %core.icmp.ul (i, %core.bitcast .I32 size);
    .let target = (exit, loop_body)#condition;
    target ( mem )
};

.con outer [mem: %mem.M, x : .I32, return : .Cn [%mem.M]] = {
    .con end [mem: %mem.M, return : .Cn [%mem.M]] = {
        return (mem)
    };

    recursive ( mem, 0I32, end, return )
};

.con .extern main [mem: %mem.M, argc: .I32, argv : %mem.Ptr («⊤:.Nat; %mem.Ptr («⊤:.Nat; .I8», 0)», 0), return : .Cn [%mem.M, .I32]] = {
    .con callback (mem: %mem.M) = return (mem, 0I32);
    outer(mem, 1I32, callback)
};

// CHECK: 99
// CHECK-COUNT-98: {{[0-9]+}}
// CHECK: 0
