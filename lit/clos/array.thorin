// RUN: rm -f %t.ll ; \
// RUN: %thorin -d clos %s --output-ll %t.ll -o - 

.import mem;
.import core;
.import clos;


.let i32 = .Idx 4294967296;
.let f32 = %core.Real 4294967296;
.let i8 = .Idx 256;

.cn f [mem: %mem.M, x : i32, return : .Cn [%mem.M, i32]] = {
    return (mem, %core.wrap.add (0, 4294967296) (x, 42:i32))
};

.cn g [mem: %mem.M, x : i32, return : .Cn [%mem.M, i32]] = {
    return (mem, 1:i32)
};


.cn .extern main [mem: %mem.M, argc: i32, argv : %mem.Ptr («⊤:.Nat; %mem.Ptr («⊤:.Nat; .Idx 256», 0:.Nat)», 0:.Nat), return : .Cn [%mem.M, i32]] = {

    .cn h [mem: %mem.M, x : i32, return : .Cn [%mem.M, i32]] = {
        return (mem, %core.wrap.add (0, 4294967296) (x, argc))
    };

    .let pb_type = .Cn [%mem.M, i32, .Cn [%mem.M, i32]];
    .let Tas = (pb_type, 0);

    .let real_arr_type = (i32, 0);

    .let arr_size = ⊤:.Nat;

    .let (alloc_pb_mem, pb_arr) = %mem.alloc (<<%core.bitcast (.Nat, i32) 4:i32; pb_type>>, 0) (mem);
    .let (alloc_mem, a_arr) = %mem.alloc (<<%core.bitcast (.Nat, i32) 4:i32; i32>>, 0) (alloc_pb_mem);

    .let lea_0 = %mem.lea (arr_size, <arr_size; pb_type>, 0) (pb_arr, 0:i32);
    .let mem2 = %mem.store Tas (alloc_mem, lea_0, f);
    .let lea_1 = %mem.lea (arr_size, <arr_size; pb_type>, 0) (pb_arr, 1:i32);
    .let mem3 = %mem.store Tas (mem2, lea_1, g);
    .let lea_2 = %mem.lea (arr_size, <arr_size; pb_type>, 0) (pb_arr, 2:i32);
    .let mem4 = %mem.store Tas (mem3, lea_2, h);

    .let lea = %mem.lea (arr_size, <arr_size; i32>, 0) (a_arr, 0:i32);

    .let mem5 = %mem.store real_arr_type (mem4, lea, 10:i32);

    .let fn_lea = %mem.lea (arr_size, <arr_size; pb_type>, 0) (pb_arr, 2:i32);
    .let load = %mem.load Tas (mem5, fn_lea);

    .let load_mem = load#0:(.Idx 2);
    .let load2 = %mem.load real_arr_type (load_mem, lea);

    .let func = load#1:(.Idx 2);

    .let load2_mem = load2#0:(.Idx 2);
    .let load2_val = load2#1:(.Idx 2);

    .cn callback [mem: %mem.M, x : i32] = {
        return (mem, x)
    };

    func(load2_mem, 1:i32, callback)
};
