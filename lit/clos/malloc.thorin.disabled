// once this works, replace old malloc.thorin with this one
// RUN: rm -f %t.ll
// RUN: %thorin -p clos %s --output-ll %t.ll -o -

.plugin core;

.lam Ptr T: * = %mem.Ptr (T, 0);

.fun f(mem: %mem.M, x: .I32): [%mem.M, .I32] = return (mem, %core.wrap.add 0 (x, 42I32);
.fun g(mem: %mem.M, x: .I32): [%mem.M, .I32] = return (mem, 1I32;

.fun .extern main(mem: %mem.M, argc: .I32, argv: Ptr «⊤:.Nat; Ptr «⊤:.Nat; .I8»»): [%mem.M, .I32] =
    .fun h(mem: %mem.M, x: .I32): [%mem.M, .I32] = return (mem, %core.wrap.add 0 (x, argc));

    .let pb_type  = .Fn [%mem.M, .I32] -> [%mem.M, .I32];
    .let Tas      = (pb_type, 0);
    .let arr_size = ⊤:.Nat;

    .let (`mem, pb_ptr) = %mem.malloc Tas (mem, 32);
    .let pb_arr         = %core.bitcast (Ptr «⊤:.Nat; .Fn [%mem.M, .I32] -> [%mem.M, .I32]») pb_ptr;
    .let (`mem, a_arr)  = %mem.alloc («4; .I32», 0) (mem);

    .let `lea = %mem.lea (arr_size, ‹arr_size; pb_type›, 0) (pb_arr, 0I32);
    .let `mem = %mem.store (mem, lea, f);
    .let `lea = %mem.lea (arr_size, ‹arr_size; pb_type›, 0) (pb_arr, 1I32);
    .let `mem = %mem.store (mem, lea, g);
    .let `lea = %mem.lea (arr_size, ‹arr_size; pb_type›, 0) (pb_arr, 2I32);
    .let `mem = %mem.store (mem, lea, h);
    .let `lea = %mem.lea (arr_size, ‹arr_size; .I32›, 0) (a_arr, 0I32);
    .let `mem = %mem.store (mem, lea, 10I32;
    .let `lea = %mem.lea (arr_size, ‹arr_size; pb_type›, 0) (pb_arr, 2I32);
    .let (`mem, func) = %mem.load (mem, lea);
    .let (`mem,  val) = %mem.load (mem, lea);

    .ret (`mem, x) = func $ (mem, 1I32;
    return (mem, x);
