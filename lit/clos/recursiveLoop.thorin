
.import mem;
.import core;
.import direct;

.let i32 = .Idx 4294967296;
.let i8 = .Idx 256;
.let pb_type = .Cn [%mem.M, .Cn [%mem.M]];

.cn printInteger [mem: %mem.M, val: i32, return : .Cn [%mem.M]];
.cn printIntegerNL [mem: %mem.M, val: i32, return : .Cn [%mem.M]];
.cn printNL [mem: %mem.M, return : .Cn [%mem.M]];

.let size = 10:.Nat;

.cn recursive [mem: %mem.M, i : i32, last_pullback: pb_type, return: .Cn [%mem.M]] = {
    .cn exit [mem: %mem.M] = {
        last_pullback ( mem, return )
    };

    .cn loop_body [mem: %mem.M] = {
        .cn pb [mem: %mem.M, return: .Cn [%mem.M]] = {
            .cn next [mem: %mem.M] = {
                last_pullback (mem, return)
            };

            printIntegerNL( mem, i , next )
        };

        .cn next [mem: %mem.M] = {
            recursive( mem, %core.wrap.add (0, 4294967296) (i, 1:i32), pb, return )
        };

        printIntegerNL( mem, i , next )
    };

    .let condition = %core.icmp.ul 4294967296 (i, %core.bitcast (i32, .Nat) size);
    .let target = (exit, loop_body)#condition;
    target ( mem )
};

.cn end [mem: %mem.M, return : .Cn [%mem.M]] = {
    return (mem)
};

.cn outer [mem: %mem.M, x : i32, return : .Cn [%mem.M]] = {
    recursive ( mem, 0:i32, end, return )
};

.cn .extern main [mem: %mem.M, argc: i32, argv : %mem.Ptr («⊤:.Nat; %mem.Ptr («⊤:.Nat; .Idx 256», 0:.Nat)», 0:.Nat), return : .Cn [%mem.M, i32]] = {
    .cn callback (mem: %mem.M) = {

        .cn callback2 (mem: %mem.M) = {
            return (mem, 1:i32)
        };

        recursive (mem, 3:i32, end, callback2)
    };

    outer(mem, 1:i32, callback)
};
