// RUN: rm -f %t.ll
// RUN: %thorin -p clos %s --output-ll %t.ll -o -

.plugin core;
.plugin direct;

.let i8 = %core.I8;
.let pb_type = .Cn [%mem.M, .Cn [%mem.M]];

.con printInteger [mem: %mem.M, val: %core.I32, return : .Cn [%mem.M]];
.con printIntegerNL [mem: %mem.M, val: %core.I32, return : .Cn [%mem.M]];
.con printNL [mem: %mem.M, return : .Cn [%mem.M]];

.let size = 10;

.con recursive [mem: %mem.M, i : %core.I32, last_pullback: pb_type, return: .Cn [%mem.M]] = {
    .con exit [mem: %mem.M] = {
        last_pullback ( mem, return )
    };

    .con loop_body [mem: %mem.M] = {
        .con pb [mem: %mem.M, return: .Cn [%mem.M]] = {
            .con next [mem: %mem.M] = {
                last_pullback (mem, return)
            };

            printIntegerNL( mem, i , next )
        };

        .con next [mem: %mem.M] = {
            recursive( mem, %core.wrap.add 0 (i, 1:%core.I32), pb, return )
        };

        printIntegerNL( mem, i , next )
    };

    .let condition = %core.icmp.ul (i, %core.bitcast %core.I32 size);
    .let target = (exit, loop_body)#condition;
    target ( mem )
};

.con end [mem: %mem.M, return : .Cn [%mem.M]] = {
    return (mem)
};

.con outer [mem: %mem.M, x : %core.I32, return : .Cn [%mem.M]] = {
    recursive ( mem, 0:%core.I32, end, return )
};

.con .extern main [mem: %mem.M, argc: %core.I32, argv : %mem.Ptr («⊤:.Nat; %mem.Ptr («⊤:.Nat; %core.I8», 0)», 0), return : .Cn [%mem.M, %core.I32]] = {
    .con callback (mem: %mem.M) = {

        .con callback2 (mem: %mem.M) = {
            return (mem, 1:%core.I32)
        };

        recursive (mem, 3:%core.I32, end, callback2)
    };

    outer(mem, 1:%core.I32, callback)
};
