// RUN: rm -f %t.ll
// RUN: %thorin %s --output-ll %t.ll -o -
// RUN: clang %t.ll -o %t -Wno-override-module
// RUN: %t; test $? -eq 5
// RUN: %t 1; test $? -eq 7
// RUN: %t 1 2; test $? -eq 9

.plugin core;

.let Tas = (.I32, 0);

.con f(mem: %mem.M, p: %mem.Ptr0 .I32, ret: .Cn [%mem.M, .I32]) =
    .let (`mem, v) = %mem.load (mem, p);
    g1 (mem, cont1)
    .where
        .con g1 [mem: %mem.M, ret: .Cn [%mem.M, .I32]] =
            .let b = %core.wrap.add 0 (v, 1I32);
            ret (mem, b);
        .con cont1 [mem: %mem.M, a: .I32] =
            g2 (mem, cont2)
            .where
                .con g2(mem: %mem.M, ret: .Cn [%mem.M, .I32]) =
                    .let c = %core.wrap.add 0 (v, 2I32);
                    ret (mem, c);
                .con cont2 [mem: %mem.M, b: .I32] =
                    .let c = %core.wrap.add 0 (a, b);
                    ret (mem, c);
            .end;
    .end;

.con .extern main [mem: %mem.M, argc: .I32, argv: %mem.Ptr0 (%mem.Ptr0 .I8), return: .Cn [%mem.M, .I32]] =
    .let (`mem, p) = %mem.alloc Tas mem;
    .let `mem      = %mem.store (mem, p, argc);
    f (mem, p, return);

// TODO: check for 1+x, 2+x, a+b
