// RUN: rm -f %t.ll
// RUN: %mim %s --output-ll %t.ll -o -
// RUN: clang %t.ll -o %t -Wno-override-module
// RUN: %t; test $? -eq 5
// RUN: %t 1; test $? -eq 7
// RUN: %t 1 2; test $? -eq 9

plugin core;

let Tas = (I32, 0);

con f [mem: %mem.M, p: %mem.Ptr (I32, 0), return: Cn [%mem.M, I32]] =
    let (`mem, v) = %mem.load (mem, p);
    g1 cont1
    where
        con g1 [return: Cn I32] =
            let b = %core.wrap.add 0 (v, 1I32);
            return b;

        con cont1 [a:I32] =
            g2 cont2
            where
                con g2 [return: Cn I32] =
                    let c = %core.wrap.add 0 (v, 2I32);
                    return c;
                con cont2 [b:I32] =
                    let c = %core.wrap.add 0 (a, b);
                    return (mem, c);
            end;
    end;

con extern main [mem: %mem.M, argc: I32, argv: %mem.Ptr (%mem.Ptr (I8, 0), 0), return: Cn [%mem.M, I32]] =
    let (`mem, p) = %mem.alloc Tas mem;
    let `mem      = %mem.store (mem, p, argc);
    f (mem, p, return);
// TODO: check for 1+x, 2+x, a+b
