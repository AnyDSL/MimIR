// RUN: rm -f %t.ll
// RUN: %mim %s --output-ll %t.ll -o -
// RUN: clang %t.ll -o %t -Wno-override-module
// RUN: %t; test $? -eq 3
// RUN: %t 1 2 3; test $? -eq 12
// RUN: %t 1 2 3 4 5; test $? -eq 18

plugin core;

con extern main(mem: %mem.M, argc: I32, argv: %mem.Ptr («⊤:Nat; %mem.Ptr («⊤:Nat; I8», 0)», 0), return: Cn [%mem.M, I32]) =
    let (mem1,mem2,mem3) = %mem.split 3 mem;
    let (mem, ptr) = %mem.alloc (I32, 0) mem1;
    let (mem2, ptr2) = %mem.alloc (I32, 0) mem2;
    let (mem3, ptr3) = %mem.alloc (I32, 0) mem3;
    let mem1        = %mem.store (mem1, ptr, argc);
    let mem2       = %mem.store (mem2, ptr2, argc);
    let (mem1, val) = %mem.load (mem1, ptr);
    let (mem2, val2) = %mem.load (mem2, ptr2);
    let mem1        = %mem.free (mem1, ptr);
    let mem2       = %mem.free (mem2, ptr2);
    let mem3       = %mem.store (mem3, ptr3, argc);
    let (mem3, val3) = %mem.load (mem3, ptr3);
    let mem3       = %mem.free (mem3, ptr3);
    let mem = %mem.merge (mem1, mem2, mem3);
    let val = %core.wrap.add 0 (val, val2);
    let val = %core.wrap.add 0 (val, val3);
    return (mem, val);
