// RUN: rm -f %t.ll ; \
// RUN: %thorin %s --output-ll %t.ll -o - | FileCheck %s
// RUN: clang %t.ll -o %t -Wno-override-module
// RUN: %t; test $? -eq 1
// RUN: %t 1 2 3; test $? -eq 4
// RUN: %t 1 2 3 4 5; test $? -eq 6

.import mem;

.let i32 = %Int 4294967296;
.cn .extern main(mem: %mem.M, argc: i32, argv: %mem.Ptr («⊤:.Nat; %mem.Ptr («⊤:.Nat; %Int 256», 0:.Nat)», 0:.Nat), return: .Cn [%mem.M, i32]) = {
    .let Tas = (i32, 0);
    .let allocd = %mem.alloc Tas mem;
    .let store = %mem.store Tas (allocd#0:(%Int 2), allocd#1:(%Int 2), argc);
    .let load = %mem.load Tas (store, allocd#1:(%Int 2));
    // todo: free :)
    return load
};

// CHECK-DAG: .cn .extern main _{{[0-9_]+}}::[mem_[[mainMemId:[_0-9]*]]: %mem.M, argc_[[argcId:[0-9_]+]]: (%Int 4294967296), %mem.Ptr («⊤:.Nat; %mem.Ptr («⊤:.Nat; (%Int 256)», 0:.Nat)», 0:.Nat), return_[[returnId:[_0-9]*]]: .Cn [%mem.M, (%Int 4294967296)]] = {
// CHECK-DAG: _[[appMSlotId:[0-9_]+]]: [%mem.M, %mem.Ptr ((%Int 4294967296), 0:.Nat)] = %mem.malloc ((%Int 4294967296), 0:.Nat) (mem_[[mainMemId]], 4:.Nat);
// CHECK-DAG: _[[appStoreId:[0-9_]+]]: %mem.M = %mem.store ((%Int 4294967296), 0:.Nat) (_[[appMSlotId]]#0:(%Int 2), _[[appMSlotId]]#1:(%Int 2), argc_[[argcId]]);
// CHECK-DAG: _[[appLoadId:[0-9_]+]]: [%mem.M, (%Int 4294967296)] = %mem.load ((%Int 4294967296), 0:.Nat) (_[[appStoreId]], _[[appMSlotId]]#1:(%Int 2));
// CHECK-DAG: _[[appExitId:[0-9_]+]]: ⊥:★ = return_[[returnEtaId:[0-9_]+]] _[[appLoadId]];
// CHECK-DAG: _[[appExitId]]

// CHECK-DAG: return_[[returnEtaId]] _[[returnEtaVarId:[0-9_]+]]: [%mem.M, (%Int 4294967296)] = {
// CHECK-DAG: return_[[retAppId:[_0-9]*]]: ⊥:★ = return_[[returnId]] _[[returnEtaVarId]];
// CHECK-DAG: return_[[retAppId]]
