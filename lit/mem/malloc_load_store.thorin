// RUN: rm -f %t.ll ; \
// RUN: %thorin %s --output-ll %t.ll -o - | FileCheck %s
// RUN: clang %t.ll -o %t -Wno-override-module
// RUN: %t; test $? -eq 1
// RUN: %t 1 2 3; test $? -eq 4
// RUN: %t 1 2 3 4 5; test $? -eq 6

.import mem;

.let i32 = .Idx 4294967296;
.con .extern main(mem: %mem.M, argc: i32, argv: %mem.Ptr («⊤:.Nat; %mem.Ptr («⊤:.Nat; .Idx 256», 0)», 0), return: .Cn [%mem.M, i32]) = {
    .let Tas = (i32, 0);
    .let allocd = %mem.malloc Tas (mem, 4);
    .let store = %mem.store Tas (allocd#0:(.Idx 2), allocd#1:(.Idx 2), argc);
    .let load = %mem.load Tas (store, allocd#1:(.Idx 2));
    .let free = %mem.free Tas (load#0:(.Idx 2), allocd#1:(.Idx 2));
    return (free, load#1:(.Idx 2))
};

// CHECK-DAG: .con .extern main _{{[0-9_]+}}::[mem_[[mainMemId:[_0-9]*]]: %mem.M, argc_[[argcId:[0-9_]+]]: .Idx 4294967296, %mem.Ptr («⊤:.Nat; %mem.Ptr («⊤:.Nat; .Idx 256», 0)», 0), return_[[returnId:[_0-9]*]]: .Cn [%mem.M, .Idx 4294967296]] {{(@.*)?}}= {
// CHECK-DAG: _[[appMallocId:[0-9_]+]]: [%mem.M, %mem.Ptr (.Idx 4294967296, 0)] = %mem.malloc (.Idx 4294967296, 0) (mem_[[mainMemId]], 4);
// CHECK-DAG: _[[appStoreId:[0-9_]+]]: %mem.M = %mem.store (.Idx 4294967296, 0) (_[[appMallocId]]#0:(.Idx 2), _[[appMallocId]]#1:(.Idx 2), argc_[[argcId]]);
// CHECK-DAG: _[[appLoadId:[0-9_]+]]: [%mem.M, .Idx 4294967296] = %mem.load (.Idx 4294967296, 0) (_[[appStoreId]], _[[appMallocId]]#1:(.Idx 2));
// CHECK-DAG: _[[appFreeId:[0-9_]+]]: %mem.M = %mem.free (.Idx 4294967296, 0) (_[[appLoadId]]#0:(.Idx 2), _[[appMallocId]]#1:(.Idx 2));

// CHECK-DAG: return_[[returnEtaId:[0-9_]+]] (_[[appFreeId]], _[[appLoadId]]#1:(.Idx 2))

// CHECK-DAG: return_[[returnEtaId]] _[[returnEtaVarId:[0-9_]+]]: [%mem.M, .Idx 4294967296] {{(@.*)?}}= {
// CHECK-DAG: return_[[returnId]] _[[returnEtaVarId]]
