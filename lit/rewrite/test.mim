// RUN: %mim %s

plugin core;
plugin refly;

let zero_neutral = rule (x:Nat) : %core.nat.add (x, 0) => x;

lam test (x:Nat) = %core.nat.add (x, 0);
lam testtest (x:Nat) = %core.nat.add (%core.nat.add (x, 0), 0);
lam id (x:Nat) = x;

let _ = %refly.equiv.struc_eq (test, id);
let _ = %refly.equiv.struc_eq (testtest, id);

let _ = rule (x:Nat) : 42 => 0;
let ohohoh = id 42;
let _ = %refly.equiv.struc_eq (ohohoh, 0);


fun id2(a b:Nat) :Nat = return b;
fun test2(a b:Nat) :Nat = return (%core.nat.add(b,0));
let _ = %refly.equiv.struc_eq (id2, test2);
