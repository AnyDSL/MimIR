// RUN: %mim %s

plugin refly;
plugin core;

lam constant (a:Nat): Nat = %core.nat.mul (a,0);

lam zero (a:Nat) : Nat = 0;
lam id (a:Nat) : Nat = a;

let _ = %refly.equiv.struc_eq (constant, zero );

lam big (x:Nat) : Nat = %core.nat.add (x, %core.nat.add (x, %core.nat.add (x,x)));
lam fast (x:Nat) : Nat = %core.nat.mul (x, 4);

lam w_constant (a:I8) : I8 = %core.wrap.mul 0 (a, 0I8);
lam w_zero (a:I8) : I8 = 0I8;

let _ = %refly.equiv.struc_eq (w_constant, w_zero);

lam w_other_zero (x:I16) : I16 = %core.wrap.sub 0 (x,x);
lam w_16zero (a: I16) : I16 = 0I16;

let _ = %refly.equiv.struc_eq (w_other_zero, w_16zero);

lam big_shift (x:I16) : I16= %core.wrap.shl 0 (x, 24I16);
lam nope (x:I16) : I16 = ‚ä•:I16;


let _ = %refly.equiv.struc_eq (big_shift, nope);
