// RUN: rm -f %t.ll
// RUN: %thorin -d direct -d autodiff %s --output-ll %t.ll -o - | FileCheck %s

.import core;
.import autodiff;
.import mem;


/// if b<=0:
///     1
/// else
///     a*pow(a,b-1)
///
/// pow(a,b,ret):
///     ((pow_else,pow_then)#cmp) ()
/// then():
///    ret 1
/// else():
///     pow(a,b-1,cont)
/// cont(v):
///    ret (a*v)
///
.con f [[a:.I32, b:.I32], ret: .Cn [.I32]] = {
    .con pow_then [] = ret 1I32;

    .con pow_cont [v:.I32] = {
        .let m = %core.wrap.mul (a,v);
        ret m
    };
    .con pow_else [] = {
        .let b_1 = %core.wrap.sub (b,1I32;
        f ((a,b_1),pow_cont)
    };
    // .let cmp = %core.icmp.sle (b,0I32;
    .let cmp = %core.icmp.e (b,0I32;
    ((pow_else, pow_then)#cmp) ()
};

.con .extern main [mem : %mem.M, argc : .I32, argv : %mem.Ptr (%mem.Ptr (.I8, 0), 0), return : .Cn [%mem.M, .I32]] = {

    .con ret_cont [r:.I32,pb:.Cn[.I32,.Cn[.I32,.I32]]] = {
        .con pb_ret_cont [pr_a:.I32,pr_b:.I32] = {
            .let sr = %core.wrap.mul 0 (10000I32, r);
            .let sa = %core.wrap.mul 0 (100I32, pr_a);
            .let sb = pr_b;
            .let sp = %core.wrap.add 0 (sa, sb);
            .let o  = %core.wrap.add 0 (sr, sp);
            return (mem, o)
        };
        pb(1I32,pb_ret_cont)
    };

    .let f_diff = %autodiff.ad f;

    .let c = (4I32,3I32;
    f_diff (c,ret_cont)

    // .con ret_cont r::[.I32] = {
    //     return (mem, r)
    // };

    // .let c = (42I32, 2I32;
    // f (c,ret_cont)
};


    // .let b = %Wrap_mul (0, .i32) (3I32, a);

    // .let c = f 42I32;
    // return (mem, c)

// CHECK-DAG: .con .extern main _{{[0-9_]+}}::[mem_[[memId:[_0-9]*]]: %mem.M, (.I32), %mem.Ptr (%mem.Ptr ((.I8), 0), 0), return_[[returnId:[_0-9]*]]: .Cn [%mem.M, (.I32)]] = {
// CHECK-DAG: _[[appId:[_0-9]*]]: ⊥:★ = return_[[returnEtaId:[_0-9]*]] (mem_[[memId]], 42I32);
// CHECK-DAG: _[[appId]]

// CHECK-DAG: return_[[returnEtaId]] _[[returnEtaVarId:[0-9_]+]]: [%mem.M, (.I32)] = {
// CHECK-DAG: return_[[retAppId:[_0-9]*]]: ⊥:★ = return_[[returnId]] _[[returnEtaVarId]];
// CHECK-DAG: return_[[retAppId]]
