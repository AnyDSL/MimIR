// RUN: rm -f %t.ll ; \
// RUN: %thorin -d direct -d tool -d autodiff %s --output-ll %t.ll --output-thorin - | FileCheck %s

// a call to a autodiff style function
// ./build/bin/thorin -d direct -d tool -d autodiff ./lit/autodiff/simple_autodiff.thorin --output-thorin -
// ./build/bin/thorin -d direct -d tool -d autodiff ./lit/autodiff/simple_autodiff.thorin --output-ll ./lit/autodiff/simple_autodiff.ll --output-thorin - | FileCheck ./lit/autodiff/simple_autodiff.thorin

.import core;
.import autodiff;
.import mem;

.let I32 = .Idx 4294967296;

.cn f [a:I32, ret: .Cn [I32]] = {
    .let b = %core.wrap.mul (0:.Nat, 4294967296:.Nat) (2:I32, a);
    ret b
};

.cn .extern main [mem : %mem.M, argc : I32, argv : %mem.Ptr (%mem.Ptr (.Idx 256, 0:.Nat), 0:.Nat), return : .Cn [%mem.M, I32]] = {


    .cn pb_ret_cont [pr:I32] = {
        return (mem, pr)
    };

    .cn ret_cont [r:I32,pb:.Cn[I32,.Cn[I32]]] = {
        pb((1:I32),pb_ret_cont)
    };

    .let f_diff = %autodiff.autodiff (.Cn [I32,.Cn[I32]]) f;
    .let f_diff_cast = f_diff;

    .let c = (43:I32);
    f_diff_cast (c,ret_cont)
};


// CHECK-DAG: .cn .extern main _{{[0-9_]+}}::[mem_[[memId:[_0-9]*]]: %mem.M, (.Idx 4294967296), %mem.Ptr (%mem.Ptr ((.Idx 256), 0), 0), return_[[returnId:[_0-9]*]]: .Cn [%mem.M, (.Idx 4294967296)]] = {
// CHECK-DAG: return_[[returnEtaId:[_0-9]*]] (mem_[[memId]], 2:(.Idx 4294967296))

// CHECK-DAG: return_[[returnEtaId]] _[[returnEtaVarId:[0-9_]+]]: [%mem.M, (.Idx 4294967296)] = {
// CHECK-DAG: return_[[returnId]] _[[returnEtaVarId]]
