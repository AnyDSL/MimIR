// RUN: rm -f %t.ll ; \
// RUN: %thorin -d direct -d autodiff %s --output-ll %t.ll -o - | FileCheck %s

.import core;
.import autodiff;
.import mem;

.let I32 = .Idx 4294967296;

.cn f [[mem : %mem.M, a:I32], ret: .Cn [%mem.M, I32]] = {
    .let b = %core.wrap.mul (0:.Nat, 4294967296:.Nat) (2:I32, a);
    ret (mem, b)
};

.cn .extern main [mem : %mem.M, argc : I32, argv : %mem.Ptr (%mem.Ptr (.Idx 256, 0:.Nat), 0:.Nat), return : .Cn [%mem.M, I32]] = {

    .cn pb_ret_cont [[%mem.M, pr:I32]] = {
        return (mem, pr)
    };

    .cn ret_cont [[mem: %mem.M, r:I32],pb:.Cn[[%mem.M, I32],.Cn[[%mem.M, I32]]]] = {
        // return (mem, r)
        pb((mem, 1:I32),pb_ret_cont)
    };

    .let f_diff = %autodiff.autodiff (.Cn [[%mem.M, I32],.Cn[[%mem.M, I32]]]) f;

    .let c = (mem, 43:I32);
    f_diff (c,ret_cont)
};


    // .let b = %Wrap_mul (0:.Nat, 4294967296:.Nat) (3:I32, a);

    // .let c = f (42:I32);
    // return (mem, c)

// CHECK-DAG: .cn .extern main _{{[0-9_]+}}::[mem_[[memId:[_0-9]*]]: %mem.M, (.Idx 4294967296), %mem.Ptr (%mem.Ptr ((.Idx 256), 0:.Nat), 0:.Nat), return_[[returnId:[_0-9]*]]: .Cn [%mem.M, (.Idx 4294967296)]] = {
// CHECK-DAG: _[[appId:[_0-9]*]]: ⊥:★ = return_[[returnEtaId:[_0-9]*]] (mem_[[memId]], 42:(.Idx 4294967296));
// CHECK-DAG: _[[appId]]

// CHECK-DAG: return_[[returnEtaId]] _[[returnEtaVarId:[0-9_]+]]: [%mem.M, (.Idx 4294967296)] = {
// CHECK-DAG: return_[[retAppId:[_0-9]*]]: ⊥:★ = return_[[returnId]] _[[returnEtaVarId]];
// CHECK-DAG: return_[[retAppId]]
