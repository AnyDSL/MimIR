.import autodiff;
.import core;
.import debug;
.import direct;
.import mem;
// TODO: w was wrong
// .lam internal_diff_core_wrap_mul_635228 __635252::[_635345: .Nat, w_635253: .Nat] → .Cn [«2; .Idx w_635197», .Cn [.Idx w_635197, .Cn [.Idx w_635197, .Cn «2; .Idx w_635197»]]] = {
.lam internal_diff_core_wrap_mul_635228 __635252::[_635345: .Nat, w_635253: .Nat] → .Cn [«2; .Idx w_635253», .Cn [.Idx w_635253, .Cn [.Idx w_635253, .Cn «2; .Idx w_635253»]]] = {
    .con inner_mul_deriv_cps_635298 __635311::[__635333::[_635337: .Idx w_635253, _635341: .Idx w_635253], ret_635313: .Cn [.Idx w_635253, .Cn [.Idx w_635253, .Cn «2; .Idx w_635253»]]] = {
        .con ret_635310 _635314: [.Idx w_635253, .Cn [.Idx w_635253, .Cn «2; .Idx w_635253»]] = {
            ret_635313 _635314
        };
        .con mul_pb_635361 __635376::[s_635393: .Idx w_635253, pb_ret_635378: .Cn «2; .Idx w_635253»] = {
            .con pb_ret_635375 _635379: «2; .Idx w_635253» = {
                pb_ret_635378 _635379
            };
            .let _635398: .Idx w_635253 = %core.wrap.mul (__635333#1:(.Idx 2), s_635393);
            .let _635408: .Idx w_635253 = %core.wrap.mul (__635333#0:(.Idx 2), s_635393);
            pb_ret_635375 (_635398, _635408)
        };
        .let _635348: .Idx w_635253 = %core.wrap.mul __635333;
        ret_635310 (_635348, mul_pb_635361)
    };
    inner_mul_deriv_cps_635298
};
.lam Uf_635542 _635560: (%core.I32) → ★ = {
    (%core.I32)
};
.con zero_pb_635590 _635592::[(%core.I32), _635594: .Cn (%core.I32)] = {
    .con _635591 _635595: (%core.I32) = {
        _635594 _635595
    };
    _635591 (0:(%core.I32))
};
.lam Uf_635607 _635625: (%core.I32) → ★ = {
    (%core.I32)
};
.con eta_id_pb_635655 _635657::[s_635663: (%core.I32), _635659: .Cn (%core.I32)] = {
    .con _635656 _635660: (%core.I32) = {
        _635659 _635660
    };
    _635656 s_635663
};
.con comp_tup_pb__635491 _635501::[_635503: (%core.I32), _635507: .Cn (%core.I32)] = {
    .con _635505 _635508: (%core.I32) = {
        _635507 _635508
    };
    .con comp_tup_pb__cont_635504 _635600::[_635601: (%core.I32), _635666: (%core.I32)] = {
        .let _635602: (%core.I32) = %direct.cps2ds_dep ((%core.I32), Uf_635542) zero_pb_635590 _635601;
        .let _635667: (%core.I32) = %direct.cps2ds_dep ((%core.I32), Uf_635607) eta_id_pb_635655 _635666;
        .let _635672: (%core.I32) = %core.wrap.add 0 (_635602, _635667);
        _635505 _635672
    };
    .con comp_tup_pb__cont_635497 _635498::[(%core.I32), _635500: .Cn [(%core.I32), .Cn «2; (%core.I32)»]] = {
        _635500 (_635503, comp_tup_pb__cont_635504)
    };
    internal_diff_core_wrap_mul_635228 (0, 4294967296) ((2:(%core.I32), 42:(%core.I32)), comp_tup_pb__cont_635497)
};
.lam Uf_635814 _635832: (%core.I32) → ★ = {
    (%core.I32)
};
.con zero_pb_635860 _635862::[(%core.I32), _635864: .Cn (%core.I32)] = {
    .con _635861 _635865: (%core.I32) = {
        _635864 _635865
    };
    _635861 (0:(%core.I32))
};
.lam Uf_635876 _635894: (%core.I32) → ★ = {
    (%core.I32)
};
.con eta_id_pb_635922 _635924::[s_635930: (%core.I32), _635926: .Cn (%core.I32)] = {
    .con _635923 _635927: (%core.I32) = {
        _635926 _635927
    };
    _635923 s_635930
};
.con comp_tup_pb__635796 _635801::[_635803: (%core.I32), _635807: .Cn (%core.I32)] = {
    .con _635805 _635808: (%core.I32) = {
        _635807 _635808
    };
    .con comp_tup_pb__cont_635804 _635869::[_635870: (%core.I32), _635933: (%core.I32)] = {
        .let _635871: (%core.I32) = %direct.cps2ds_dep ((%core.I32), Uf_635814) zero_pb_635860 _635870;
        .let _635934: (%core.I32) = %direct.cps2ds_dep ((%core.I32), Uf_635876) eta_id_pb_635922 _635933;
        .let _635939: (%core.I32) = %core.wrap.add 0 (_635871, _635934);
        _635805 _635939
    };
    .con comp_tup_pb__cont_635797 _635798::[(%core.I32), _635800: .Cn [(%core.I32), .Cn «2; (%core.I32)»]] = {
        _635800 (_635803, comp_tup_pb__cont_635804)
    };
    internal_diff_core_wrap_mul_635228 (0, 4294967296) ((3:(%core.I32), 42:(%core.I32)), comp_tup_pb__cont_635797)
};
.lam Uf_636018 _636036: «2; (%core.I32)» → ★ = {
    [(.Idx 2), .Cn [(.Idx 2), .Cn «2; (%core.I32)»]]
};
// TODO: wrong w
.lam internal_diff_core_icmp_xYgLE_636113 __636125: .Nat → .Cn [«2; .Idx __636125», .Cn [(.Idx 2), .Cn [(.Idx 2), .Cn «2; .Idx __636125»]]] = {
    .con cmp_pb_636214 __636221::[(.Idx 2), pb_ret_636223: .Cn «2; .Idx __636125»] = {
        .con pb_ret_636220 _636224: «2; .Idx __636125» = {
            pb_ret_636223 _636224
        };
        pb_ret_636220 ‹2; 0:(.Idx __636125)›
    };
    .con inner_cmp_636166 __636173::[__636193::[_636197: .Idx __636125, _636201: .Idx __636125], ret_636175: .Cn [(.Idx 2), .Cn [(.Idx 2), .Cn «2; .Idx __636125»]]] = {
        .con ret_636172 _636176: [(.Idx 2), .Cn [(.Idx 2), .Cn «2; .Idx __636125»]] = {
            ret_636175 _636176
        };
        .let _636204: (.Idx 2) = %core.icmp.xYgLE __636193;
        ret_636172 (_636204, cmp_pb_636214)
    };
    inner_cmp_636166
};
.con tup_pb_636268 _636270::[[], _636272: .Cn (%core.I32)] = {
    .con _636269 _636273: (%core.I32) = {
        _636272 _636273
    };
    _636269 (0:(%core.I32))
};
.con .extern main __635710::[mem_635729: %mem.M, (%core.I32), %mem.Ptr (%mem.Ptr ((%core.I8), 0), 0), return_635714: .Cn [%mem.M, (%core.I32)]] = {
    .con return_635709 _635715: [%mem.M, (%core.I32)] = {
        return_635714 _635715
    };
    .con ret_cont_635465 _635751: (%core.I32) = {
        .con pb_ret_cont_635701 __635733: (%core.I32) = {
            .let _635762: (%core.I32) = %core.wrap.mul 0 (100:(%core.I32), _635751);
            .let _635767: (%core.I32) = %core.wrap.add 0 (__635733, _635762);
            return_635709 (mem_635729, _635767)
        };
        comp_tup_pb__635491 (1:(%core.I32), pb_ret_cont_635701)
    };
    .con aug_twice_cont_635453 _635774::[_635776: (%core.I32), .Cn [(%core.I32), .Cn «2; (%core.I32)»]] = {
        ret_cont_635465 _635776
    };
    // TODO: missing arg binder
    .con aug_twice_635142 [.Cn[[], .Cn (%core.I32)]] = {
        internal_diff_core_wrap_mul_635228 (0, 4294967296) ((2:(%core.I32), 42:(%core.I32)), aug_twice_cont_635453)
    };
    .con ret_cont_635795 _635947: (%core.I32) = {
        .con pb_ret_cont_635945 __635946: (%core.I32) = {
            .let _635958: (%core.I32) = %core.wrap.mul 0 (100:(%core.I32), _635947);
            .let _635963: (%core.I32) = %core.wrap.add 0 (__635946, _635958);
            return_635709 (mem_635729, _635963)
        };
        comp_tup_pb__635796 (1:(%core.I32), pb_ret_cont_635945)
    };
    .con aug_thrice_cont_635794 _635970::[_635972: (%core.I32), .Cn [(%core.I32), .Cn «2; (%core.I32)»]] = {
        ret_cont_635795 _635972
    };
    // TODO: missing arg binder
    .con aug_thrice_635782 [.Cn[[], .Cn (%core.I32)]] = {
        internal_diff_core_wrap_mul_635228 (0, 4294967296) ((3:(%core.I32), 42:(%core.I32)), aug_thrice_cont_635794)
    };
    .let _636262: [(.Idx 2), .Cn [(.Idx 2), .Cn «2; (%core.I32)»]] = %direct.cps2ds_dep («2; (%core.I32)», Uf_636018) (internal_diff_core_icmp_xYgLE_636113 4294967296) (42:(%core.I32), 5:(%core.I32));
    (aug_twice_635142, aug_thrice_635782)#(_636262#0:(.Idx 2)) tup_pb_636268
};
