// RUN: rm -f %t.ll ; \
// RUN: %thorin -d autodiff %s --output-ll %t.ll -o - | FileCheck %s

.import autodiff;
.import core;
.import debug;
.import direct;
.import mem;
.lam Uf_537924 _537942: «2; (%core.I32)» → ★ = {
    [(%core.I32), .Cn [(%core.I32), .Cn «2; (%core.I32)»]]
};
.con inner_mul_deriv_cps_537991 __538006::[__538032::[_538036: (%core.I32), _538040: (%core.I32)], ret_538008: .Cn [(%core.I32), .Cn [(%core.I32), .Cn «2; (%core.I32)»]]] = {
    .con ret_538005 _538009: [(%core.I32), .Cn [(%core.I32), .Cn «2; (%core.I32)»]] = {
        ret_538008 _538009
    };
    .con mul_pb_538056 __538068::[s_538085: (%core.I32), pb_ret_538070: .Cn «2; (%core.I32)»] = {
        .con pb_ret_538067 _538071: «2; (%core.I32)» = {
            pb_ret_538070 _538071
        };
        .let _538090: (%core.I32) = %core.wrap.mul 0 (__538032#1:(.Idx 2), s_538085);
        .let _538100: (%core.I32) = %core.wrap.mul 0 (__538032#0:(.Idx 2), s_538085);
        pb_ret_538067 (_538090, _538100)
    };
    .let _538043: (%core.I32) = %core.wrap.mul 0 __538032;
    ret_538005 (_538043, mul_pb_538056)
};
.lam Uf_538234 _538252: (%core.I32) → ★ = {
    (%core.I32)
};
.con zero_pb_538282 _538284::[(%core.I32), _538286: .Cn (%core.I32)] = {
    .con _538283 _538287: (%core.I32) = {
        _538286 _538287
    };
    _538283 0:(%core.I32)
};
.lam Uf_538299 _538317: (%core.I32) → ★ = {
    (%core.I32)
};
.con id_pb_538347 _538349::[s_538355: (%core.I32), _538351: .Cn (%core.I32)] = {
    .con _538348 _538352: (%core.I32) = {
        _538351 _538352
    };
    _538348 s_538355
};
.con .extern main __538139::[mem_538158: %mem.M, (%core.I32), %mem.Ptr (%mem.Ptr ((%core.I8), 0), 0), return_538143: .Cn [%mem.M, (%core.I32)]] = {
    .con return_538138 _538144: [%mem.M, (%core.I32)] = {
        return_538143 _538144
    };
    .let _538120: [(%core.I32), .Cn [(%core.I32), .Cn «2; (%core.I32)»]] = %direct.cps2ds_dep («2; (%core.I32)», Uf_537924) inner_mul_deriv_cps_537991 (2:(%core.I32), 42:(%core.I32));
    .con comp_tup_pb__cont_538129 _538292::[_538293: (%core.I32), _538358: (%core.I32)] = {
        .let _538199: (%core.I32) = %core.wrap.mul 0 (100:(%core.I32), _538120#0:(.Idx 2));
        .let _538294: (%core.I32) = %direct.cps2ds_dep ((%core.I32), Uf_538234) zero_pb_538282 _538293;
        .let _538359: (%core.I32) = %direct.cps2ds_dep ((%core.I32), Uf_538299) id_pb_538347 _538358;
        .let _538364: (%core.I32) = %core.wrap.add 0 (_538294, _538359);
        .let _538369: (%core.I32) = %core.wrap.add 0 (_538199, _538364);
        return_538138 (mem_538158, _538369)
    };
    _538120#1:(.Idx 2) (1:(%core.I32), comp_tup_pb__cont_538129)
};

// CHECK-DAG: .con .extern main _{{[0-9_]+}}::[mem_[[memId:[_0-9]*]]: %mem.M, (.Idx 4294967296), %mem.Ptr (%mem.Ptr ((.Idx 256), 0), 0), return_[[returnId:[_0-9]*]]: .Cn [%mem.M, (.Idx 4294967296)]] = {
// CHECK-DAG: _[[appId:[_0-9]*]]: ⊥:★ = return_[[returnEtaId:[_0-9]*]] (mem_[[memId]], 42:(.Idx 4294967296));
// CHECK-DAG: _[[appId]]

// CHECK-DAG: return_[[returnEtaId]] _[[returnEtaVarId:[0-9_]+]]: [%mem.M, (.Idx 4294967296)] = {
// CHECK-DAG: return_[[retAppId:[_0-9]*]]: ⊥:★ = return_[[returnId]] _[[returnEtaVarId]];
// CHECK-DAG: return_[[retAppId]]
