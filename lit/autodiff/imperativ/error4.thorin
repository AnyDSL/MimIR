
.import mem;
.import core;
.import direct;

.let i32 = .Idx 4294967296;
.let i8 = .Idx 256;

.cn printIntegerA [mem: %mem.M, val: i32, return : .Cn [%mem.M]];
.cn printIntegerB [mem: %mem.M, val: i32, return : .Cn [%mem.M]];


.cn .extern foo [[mem: %mem.M, ptr:  %mem.Ptr (i8, 0), ptr2:  %mem.Ptr (i8, 0)], return : .Cn [%mem.M, i32]] = {
    return (mem, 1:i32)
};

.cn .extern main [mem: %mem.M, argc: i32, argv : %mem.Ptr («⊤:.Nat; %mem.Ptr («⊤:.Nat; .Idx 256», 0:.Nat)», 0:.Nat), return : .Cn [%mem.M, i32]] = {
    .let bar = %core.bitcast
        (.Cn [[%mem.M, %mem.Ptr («⊤:.Nat; %mem.Ptr («⊤:.Nat; .Idx 256», 0:.Nat)», 0:.Nat), %mem.Ptr («⊤:.Nat; %mem.Ptr («⊤:.Nat; .Idx 256», 0:.Nat)», 0:.Nat)], .Cn [%mem.M, i32]],
            .Cn [[%mem.M, %mem.Ptr (i8, 0),  %mem.Ptr (i8, 0)], .Cn [%mem.M, i32]])
        foo;

    bar ( (mem, argv, argv), return )
};
