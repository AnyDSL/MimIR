// RUN: rm -f %t.ll
// RUN: %thorin -d direct -d autodiff %s --output-ll %t.ll -o - | FileCheck %s

.import core;
.import autodiff;
.import mem;

/*
(3+a)a

3a+aÂ²
3+2a
2
*/

.con g [a:.I32, ret: .Cn [.I32]] = {
    .let b = %core.wrap.add 0 (3I32, a);
    .let c = %core.wrap.mul 0 (a, b);
    ret c
};

.con f [a:.I32, ret: .Cn [.I32]] = {
    .con ret_cont [r:.I32,pb:.Cn[.I32,.Cn[.I32]]] = {
        .con pb_ret_cont [pr:.I32] = {
            ret pr
        };
        pb(1I32,pb_ret_cont)
    };
    .let g_diff = %autodiff.ad g;
    g_diff (a,ret_cont)
};

.con .extern main [mem : %mem.M, argc : .I32, argv : %mem.Ptr (%mem.Ptr (.I8, 0), 0), return : .Cn [%mem.M, .I32]] = {

    .con ret_cont [r:.I32,pb:.Cn[.I32,.Cn[.I32]]] = {
        .con pb_ret_cont [pr:.I32] = {
            .let c = %core.wrap.mul 0 (100I32, r);
            .let d = %core.wrap.add 0 (c, pr);
            return (mem, d)
        };
        // return (mem, r)
        pb(1I32,pb_ret_cont)
    };

    .let f_diff = %autodiff.ad f;
    .let f_diff_cast = f_diff;

    .let c = 42I32;
    f_diff_cast (c,ret_cont)
};

// CHECK-DAG: .con .extern main _{{[0-9_]+}}::[mem_[[memId:[_0-9]*]]: %mem.M, (.I32), %mem.Ptr (%mem.Ptr ((.I8), 0), 0), return_[[returnId:[_0-9]*]]: .Cn [%mem.M, (.I32)]] = {
// CHECK-DAG: return_[[returnEtaId:[_0-9]*]] (mem_[[memId]], 42I32)

// CHECK-DAG: return_[[returnEtaId]] _[[returnEtaVarId:[0-9_]+]]: [%mem.M, (.I32)] = {
// CHECK-DAG: return_[[returnId]] _[[returnEtaVarId]]
