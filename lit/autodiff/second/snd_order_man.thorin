// RUN: rm -f %t.ll ; \
// RUN: %thorin -p direct %s --output-ll %t.ll -o - | FileCheck %s

.plugin core;
.plugin autodiff;


.con g_diff [a:%core.I32, ret: .Cn [%core.I32,.Cn[%core.I32,.Cn[%core.I32]]]] = {
    .con pb [s:%core.I32, pb_ret: .Cn[%core.I32]] = {
        .let b = %core.wrap.mul 0 (2:%core.I32, a);
        .let c = %core.wrap.add 0 (3:%core.I32, b);
        pb_ret c
    };
    .let b = %core.wrap.add 0 (3:%core.I32, a);
    .let c = %core.wrap.mul 0 (a, b);
    ret (c,pb)
};

.con f [a:%core.I32, ret: .Cn [%core.I32]] = {
    .con ret_cont [r:%core.I32,pb:.Cn[%core.I32,.Cn[%core.I32]]] = {
        .con pb_ret_cont [pr:%core.I32] = {
            ret pr
        };
        pb(1:%core.I32,pb_ret_cont)
    };
    g_diff (a,ret_cont)
};

.con .extern main [mem : %mem.M, argc : %core.I32, argv : %mem.Ptr (%mem.Ptr (%core.I8, 0), 0), return : .Cn [%mem.M, %core.I32]] = {

    .con ret_cont [r:%core.I32,pb:.Cn[%core.I32,.Cn[%core.I32]]] = {
        .con pb_ret_cont [pr:%core.I32] = {
            .let c = %core.wrap.mul 0 (100:%core.I32, r);
            .let d = %core.wrap.add 0 (c, pr);
            return (mem, d)
        };
        // return (mem, r)
        pb(1:%core.I32,pb_ret_cont)
    };

    .let f_diff = %autodiff.ad (.Cn [%core.I32,.Cn[%core.I32]]) f;
    .let f_diff_cast = f_diff;

    .let c = 42:%core.I32;
    f_diff_cast (c,ret_cont)
};

// CHECK-DAG: return{{.*}}8702
