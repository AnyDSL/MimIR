// RUN: %mim %s
plugin vec;
plugin refly;
plugin core;

let l = %vec.fold.l %core.nat.add (0, (1, 2, 3, 4, 5));
let r = %vec.fold.r %core.nat.add ((1, 2, 3, 4, 5), 0);
let _ = %refly.equiv.struc_eq (l, 15);
let _ = %refly.equiv.struc_eq (r, 15);

let e1 = %vec.scan.exists (λ (n: Nat): Bool = %core.ncmp.e (n, 3)) (0, 1, 2, 3, 4);
let e2 = %vec.scan.exists (λ (n: Nat): Bool = %core.ncmp.e (n, 5)) (0, 1, 2, 3, 4);
let _  = %refly.equiv.struc_eq (e1, tt);
let _  = %refly.equiv.struc_eq (e2, ff);

let a1 = %vec.scan.for_all (λ (n: Nat): Bool = %core.ncmp.ge (n, 0)) (0, 1, 2, 3, 4);
let a2 = %vec.scan.for_all (λ (n: Nat): Bool = %core.ncmp.l  (n, 3)) (0, 1, 2, 3, 4);
let _  = %refly.equiv.struc_eq (a1, tt);
let _  = %refly.equiv.struc_eq (a2, ff);

let d1 = %vec.diff ((8, 1, 3, 6, 9, 0), (4_6, 2_6));
let d2 = %vec.diff (‹6; 23›, (4_6, 2_6));
let _  = %refly.equiv.struc_eq (d1, (8, 1, 6, 0));
let _  = %refly.equiv.struc_eq (d2, (23, 23, 23, 23));

let g1 = %vec.get_first %core.ncmp.e ((8, 1, 3, 6, 9, 0), 1);
let g2 = %vec.get_last %core.ncmp.e ((8, 1, 3, 6, 9, 0), 2);
let _ = %refly.equiv.struc_eq (g1, (tt, 1_6));
let _ = %refly.equiv.struc_eq (g2, (ff, 0_6));

let r1 = %vec.range 3;
let r2 = %vec.map_range 3 (λ (i: Idx 3): Idx 3 = %core.wrap.add 0 (i, 1_3));
let _  = %refly.equiv.struc_eq (r1, (0_3, 1_3, 2_3));
let _  = %refly.equiv.struc_eq (r2, (1_3, 2_3, 3_3));