// RUN: %mim %s
plugin vec;
plugin refly;

let l = %vec.fold.l %core.nat.add (0, (1, 2, 3, 4, 5));
let r = %vec.fold.r %core.nat.add ((1, 2, 3, 4, 5), 0);
let _ = %refly.equiv.struc_eq (l, 15);
let _ = %refly.equiv.struc_eq (r, 15);

let m1 = %vec.map (λ (n: Nat): Nat = %core.nat.add (n, 1)) (1, 2, 3, 4, 5);
let m2 = %vec.map (λ (n: Nat): Nat = %core.nat.add (n, 1)) ‹3; 6›;
let _ = %refly.equiv.struc_eq (m1, (2, 3, 4, 5, 6));
let _ = %refly.equiv.struc_eq (m2, ‹3; 7› );

let n1 = %vec.map2 %core.nat.add ((1, 2, 3), (4, 5, 6));
let _ = %refly.equiv.struc_eq (n1, (5, 7, 9));

let e1 = %vec.scan.exists (λ (n: Nat): Bool = %core.ncmp.e (n, 3)) (0, 1, 2, 3, 4);
let e2 = %vec.scan.exists (λ (n: Nat): Bool = %core.ncmp.e (n, 5)) (0, 1, 2, 3, 4);
let _  = %refly.equiv.struc_eq (e1, tt);
let _  = %refly.equiv.struc_eq (e2, ff);

let a1 = %vec.scan.for_all (λ (n: Nat): Bool = %core.ncmp.ge (n, 0)) (0, 1, 2, 3, 4);
let a2 = %vec.scan.for_all (λ (n: Nat): Bool = %core.ncmp.l  (n, 3)) (0, 1, 2, 3, 4);
let _  = %refly.equiv.struc_eq (a1, tt);
let _  = %refly.equiv.struc_eq (a2, ff);

let d1 = %vec.diff ((8, 1, 3, 6, 9, 0), (4_6, 2_6));
let d2 = %vec.diff (‹6; 23›, (4_6, 2_6));
let _  = %refly.equiv.struc_eq (d1, (8, 1, 6, 0));
let _  = %refly.equiv.struc_eq (d2, (23, 23, 23, 23));
