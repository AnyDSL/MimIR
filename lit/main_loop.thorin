// RUN: rm -f %t.ll ; \
// RUN: %thorin %s --output-ll %t.ll -o - | FileCheck %s
// RUN: clang %t.ll -o %t -Wno-override-module
// RUN: %t ; test $? -eq 0
// RUN: %t 1 2 3 ; test $? -eq 6

.import core;
.import mem;

.cn .extern main(mem: %mem.M, argc: %Int 4294967296, argv: %mem.Ptr (%mem.Ptr (%Int 256, 0:.Nat), 0:.Nat), return: .Cn [%mem.M, %Int 4294967296]) = {
    .cn loop(mem: %mem.M, i: %Int 4294967296, acc: %Int 4294967296) = {
        .let cond: (%Int 2) = %core.icmp.ul 4294967296:.Nat (i, argc);

        .cn exit m: %mem.M = return (m, acc);

        .cn body m: %mem.M = {
            .let inc: %Int 4294967296 = %Wrap_add (0:.Nat, 4294967296:.Nat) (1:(%Int 4294967296), i);
            .let acci: %Int 4294967296 = %Wrap_add (0:.Nat, 4294967296:.Nat) (i, acc);
            loop (m, inc, acci)
        };
        (exit, body)#cond mem
    };
    loop (mem, 0:(%Int 4294967296), 0:(%Int 4294967296))
};

// CHECK-DAG: .cn .extern main __[[mainVarId:[0-9]+]]::[mem_[[memId:[0-9]+]]: %mem.M, argc_[[argcId:[0-9]+]]: (%Int 4294967296), %mem.Ptr (%mem.Ptr ((%Int 256), 0:.Nat), 0:.Nat), return_[[returnId:[0-9]+]]: .Cn [%mem.M, (%Int 4294967296)]] = {
// CHECK-DAG:   _[[appLoopId:[0-9]+]]: ⊥:★ = loop_[[loopId:[0-9]+]] (mem_[[memId]], 0:(%Int 4294967296), 0:(%Int 4294967296));
// CHECK-DAG:   _[[appLoopId]]

// CHECK-DAG: .cn return_[[returnEtaId:[0-9]+]] _[[returnEtaVarId:[0-9]+]]: [%mem.M, (%Int 4294967296)] = {
// CHECK-DAG:   _[[appReturnId:[0-9]+]]: ⊥:★ = return_[[returnId]] _[[returnEtaVarId]];
// CHECK-DAG:   _[[appReturnId:[0-9]+]]

// CHECK-DAG: .cn loop_[[loopId]] __{{[0-9]+}}::[mem_[[loopMemId:[0-9]+]]: %mem.M, i_[[iterId:[0-9]+]]: (%Int 4294967296), acc_[[accId:[0-9]+]]: (%Int 4294967296)] = {
// CHECK-DAG:   _[[condId:[0-9]+]]: (%Int 2) = %core.icmp.XygLe 4294967296:.Nat (i_[[iterId]], argc_[[argcId]]);
// CHECK-DAG:   _[[appCondId:[0-9]+]]: ⊥:★ = (exit_[[exitId:[0-9]+]], body_[[bodyId:[0-9]+]])#_[[condId]] mem_[[loopMemId]];
// CHECK-DAG:   _[[appCondId]]

// CHECK-DAG: .cn exit_[[exitId]] m_[[mExitVarId:[0-9]+]]: %mem.M = {
// CHECK-DAG:   _[[appReturnEtaId:[0-9]+]]: ⊥:★ = return_[[returnEtaId]] (m_[[mExitVarId]], acc_[[accId]]);
// CHECK-DAG:   _[[appReturnEtaId]]

// CHECK-DAG: .cn body_[[bodyId]] m_[[mBodyVarId:[0-9]+]]: %mem.M = {
// CHECK-DAG:   _[[addIterId:[0-9]+]]: (%Int 4294967296) = %Wrap_add (0:.Nat, 4294967296:.Nat) (1:(%Int 4294967296), i_[[iterId]]);
// CHECK-DAG:   _[[addAccId:[0-9]+]]: (%Int 4294967296) = %Wrap_add (0:.Nat, 4294967296:.Nat) (acc_[[accId]], i_[[iterId]]);
// CHECK-DAG:   _[[appLoopIdBody:[0-9]+]]: ⊥:★ = loop_[[loopId]] (m_[[mBodyVarId]], _[[addIterId]], _[[addAccId]]);
// CHECK-DAG:   _[[appLoopIdBody]]
