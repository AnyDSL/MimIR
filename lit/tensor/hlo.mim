// RUN: %mim %s
plugin tensor;
plugin refly;
plugin core;
plugin direct;
plugin affine;
plugin math;


let f32 = %math.f32;
let F32 = %math.F32;

let R: Ring = (F32, 0: F32, %math.arith.add @f32 0, %math.arith.mul @f32 0);

lam F32_add {r: Nat, s: «r; Nat»} [is: [«s; F32», «s; F32»]] : «s; F32» = %tensor.binary (%math.arith.add @f32 0) is;
lam F32_sub {r: Nat, s: «r; Nat»} [is: [«s; F32», «s; F32»]] : «s; F32» = %tensor.binary (%math.arith.sub @f32 0) is;
lam F32_mul {r: Nat, s: «r; Nat»} [is: [«s; F32», «s; F32»]] : «s; F32» = %tensor.binary (%math.arith.mul @f32 0) is;
lam F32_div {r: Nat, s: «r; Nat»} [is: [«s; F32», «s; F32»]] : «s; F32» = %tensor.binary (%math.arith.div @f32 0) is;
lam F32_tanh {r: Nat, s: «r; Nat»} [i: «s; F32»] : «s; F32» = %tensor.unary (%math.tri.tanh @f32 0) i;
lam F32_maximum {r: Nat, s: «r; Nat»} [is: [«s; F32», «s; F32»]] : «s; F32» = %tensor.binary (%math.extrema.fmax @f32 0) is;
lam F32_is_finite {r: Nat, s: «r; Nat»} [i: «s; F32»] : «s; Bool» = %tensor.unary (%math.is_finite @f32 0) i;
lam F32_exp {r: Nat, s: «r; Nat»} [i: «s; F32»] : «s; F32» = %tensor.unary (%math.exp.exp @f32 0) i;
lam F32_abs {r: Nat, s: «r; Nat»} [i: «s; F32»] : «s; F32» = %tensor.unary (%math.abs @f32 0) i;
lam F32_GE {r: Nat, s: «r; Nat»} [is: [«s; F32», «s; F32»]] : «s; Bool» = %tensor.binary (%math.cmp.ge @f32 0) is;
lam F32_minus {r: Nat, s: «r; Nat»} [i: «s; F32»] : «s; F32» = %tensor.unary (%math.minus @f32 0) i;

fun extern main [arg0: «784; «1024; F32»», arg1: «1024; F32», arg2: «1024; «1024; F32»», arg3: «1024; F32», arg4: «1024; «10; F32»», arg5: «10; F32», arg6: «128; «784; F32»», arg7: «128; «10; F32»»]
  : [«784; «1024; F32»», «1024; F32», «1024; «1024; F32»», «1024; F32», «1024; «10; F32»», «10; F32»]
  = let _0 = %tensor.prod_2d R (arg6, arg0);
    /// let _1 : «1, 1024; F32» = arg1;
    let _2 = %tensor.broadcast ((1, 1024), (128, 1024), arg1);
    let _3 = F32_add @(2, (128, 1024)) (_0, _2);
    let _4 = F32_tanh @(2, (128, 1024)) _3;
    let _cst = 1: F32; 
    let _5 = ‹128, 1024; _cst›;
    let _6 = F32_sub @(2, (128, 1024)) (_5, _4);
    let _7 = %tensor.prod_2d R (_4, arg2);
    /// let _8 : «1, 1024; F32» = arg3;
    let _9 = %tensor.broadcast ((1, 1024), (128, 1024), arg3);
    let _10 = F32_add @(2, (128, 1024)) (_7, _9);
    let _11 = F32_tanh @(2, (128, 1024)) _10;
    let _12 = ‹128; ‹1024; _cst››;
    let _13 = F32_sub @(2, (128, 1024)) (_12, _11);
    let _14 = %tensor.prod_2d R (_11, arg4);
    /// let _15 : «1, 10; F32» = arg5;
    let _16 = %tensor.broadcast ((1, 10), (128, 10), arg5);
    let _17 = F32_add @(2, (128, 10)) (_14, _16);
    let _cst_0 = 0xFF800000 : F32;
    let _18 = %tensor.map_reduce_pure @1 (128) @(F32, 2, (128, 10)) ((%math.extrema.fmax @f32 0), _cst_0) (0, 1) _17;
    let _cst_1 = 0xFF800000 : F32;
    let _19 = ‹128; _cst_1›;
    let _20 = F32_maximum (_19, _18);
    /// let _21 : «128, 1; F32» = _20;
    let _22 = F32_is_finite _20;
    let _cst_2 = 0: F32;
    let _23 = ‹128; _cst_2›;
    let _24 = %tensor.select (_22, _20, _23);
    let _25 = %tensor.broadcast ((128, 1), (128, 10), _24);
    let _26 = F32_sub @(2, (128, 10)) (_17, _25);
    let _27 = F32_exp @(2, (128, 10)) _26;
    let _cst_3 = 0: F32;
    let _28 = %tensor.map_reduce_pure @1 (128) @(F32, 2, (128, 10)) ((%math.arith.add @f32 0), _cst_3) (0, 1) _27;
    /// let _29 : «128, 1; F32» = _28;
    let _30 = F32_abs _28;
    let _31 = ‹128, 1; _cst_2›;
    let _32 = F32_GE (_28, _31);
    let _33 = %math.minus 0 _cst;
    let _cst_4 = 1.280000e+02: F32;
    let _34 = %math.arith.div 0 (_33, _cst_4);
    /// let _35 = ‹128; _34›;
    let _36 = %tensor.broadcast ((1, 1), (128, 10), _34);
    let _37 = F32_mul @(2, (128, 10)) (_36, arg7);
    let _38 = F32_minus @(2, (128, 10)) _37;
    let _cst_5 = 0: F32;
    let _39 = %tensor.map_reduce_pure @1 (128) @(F32, 2, (128, 10)) ((%math.arith.add @f32 0), _cst_5) (0, 1) _38;
    /// let _40 : «128, 1; F32» = _39;
    let _41 = F32_div (_39, _30);
    let _42 = ‹128, 1; _cst_2›;
    let _43 = %tensor.select (_32, _42, _41);
    let _44 = %tensor.select (_32, _41, _42);
    let _45 = F32_minus _43;
    let _46 = F32_add (_44, _45);
    let _cst_6 = 0: F32;
    /// let _47 = %tensor.map_reduce_pure @1 (128) @(F32, 2, (128, 1)) ((%math.arith.add @f32 0), _cst_6) (0, 1) _46;
    let _48 = %tensor.broadcast ((128, 1), (128, 10), _46);
    let _49 = F32_mul @(2, (128, 10)) (_48, _27);
    let _50 = F32_add @(2, (128, 10)) (_37, _49);
    let _cst_7 = 0: F32;
    let _51 = %tensor.map_reduce_pure @1 (10) @(F32, 2, (128, 10)) ((%math.arith.add @f32 0), _cst_7) (1, 0) _50;
    /// let _52 : «1, 10; F32» = _51;
    let _cst_8 = 0: F32;
    /// let _53 = %tensor.map_reduce_pure @1 (10) @(F32, 2, (1, 10)) ((%math.arith.add @f32 0), _cst_8) (1, 0) _51;
    let _54 = %tensor.dot_general R @(2, 2) (0_2, 0_2, (), ()) (_50, _11);
    let _55 = %tensor.transpose_2d _54;
    let _56 = %tensor.dot_general R @(2, 2) (1_2, 1_2, (), ()) (_50, arg4);
    let _57 = F32_mul @(2, (128, 1024)) (_56, _13);
    let _58 = F32_mul @(2, (128, 1024)) (_56, _11);
    let _59 = F32_add @(2, (128, 1024)) (_57, _58);
    let _cst_9 = 0: F32;
    let _60 = %tensor.map_reduce_pure @1 (1024) @(F32, 2, (128, 1024)) ((%math.arith.add @f32 0), _cst_9) (1, 0) _59;
    /// let _61 : «1, 1024; F32» = _60;
    let _cst_10 = 0: F32;
    /// let _62 = %tensor.map_reduce_pure @1 (1024) @(F32, 2, (1, 1024)) ((%math.arith.add @f32 0), _cst_10) (1, 0) _60;
    let _63 = %tensor.dot_general R @(2, 2) (0_2, 0_2, (), ()) (_59, _4);
    let _64 = %tensor.transpose_2d _63;
    let _65 = %tensor.dot_general R @(2, 2) (1_2, 1_2, (), ()) (_59, arg2);
    let _66 = F32_mul @(2, (128, 1024)) (_65, _6);
    let _67 = F32_mul @(2, (128, 1024)) (_66, _4);
    let _68 = F32_add @(2, (128, 1024)) (_66, _67);
    let _cst_11 = 0: F32;
    let _69 = %tensor.map_reduce_pure @1 (1024) @(F32, 2, (128, 1024)) ((%math.arith.add @f32 0), _cst_11) (1, 0) _68;
    /// let _70 : «1, 1024; F32» = _69;
    let _cst_12 = 0: F32;
    /// let _71 = %tensor.map_reduce_pure @1 (1024) @(F32, 2, (1, 1024)) ((%math.arith.add @f32 0), _cst_12) (1, 0) _70;
    let _72 = %tensor.dot_general R @(2, 2) (0_2, 0_2, (), ()) (_68, arg6);
    let _73 = %tensor.transpose_2d _72;
    let _cst_13 = 1.000000e-03: F32;
    let _74 = ‹784, 1024; _cst_13›;
    let _75 = F32_mul @(2, (784, 1024)) (_74, _73);
    let _76 = F32_sub @(2, (784, 1024)) (arg0, _75);
    let _77 = ‹1024; _cst_13›;
    let _78 = F32_mul (_77, _69);
    let _79 = F32_sub (arg1, _78);
    let _80 = ‹1024, 1024; _cst_13›;
    let _81 = F32_mul @(2, (1024, 1024)) (_80, _64);
    let _82 = F32_sub @(2, (1024, 1024)) (arg2, _81);
    let _83 = ‹1024; _cst_13›;
    let _84 = F32_mul (_83, _60);
    let _85 = F32_sub (arg3, _84);
    let _86 = ‹1024, 10; _cst_13›;
    let _87 = F32_mul @(2, (1024, 10)) (_86, _55);
    let _88 = F32_sub @(2, (1024, 10)) (arg4, _87);
    let _89 = ‹10; _cst_13›;
    let _90 = F32_mul (_89, _51);
    let _91 = F32_sub (arg5, _90);
    /// return (_76, _79, _82, _85, _88, _91);
    return (_76, arg1, arg2, arg3, arg4, arg5);