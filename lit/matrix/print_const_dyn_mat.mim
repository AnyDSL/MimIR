// RUN: rm -f %t.ll
// RUN: %mim -p direct -p math -o - %s | %FileCheck %s

// TODO: allocation error due to dynamic size,
// ./build/bin/mim lit/matrix/print_const_dyn_mat.mim -p direct -p clos -o - -VVVV --output-ll T.ll
// add_mem error (bitcast gets (mem, mat) as argument at some point)

plugin core;
plugin matrix;

let u8 = I8;
let String = %mem.Ptr («⊤:Nat; I8», 0);

ccon atoi [%mem.M, String, Cn [%mem.M, I32]];
ccon print_int_matrix [mem: %mem.M, k: Nat, l: Nat, m: %matrix.Mat (2, (⊤:Nat,⊤:Nat), I32), return : Cn [%mem.M]];

con print_int_matrix_wrap [mem: %mem.M, k: Nat, l: Nat, m: %matrix.Mat (2, (k,l), I32), return : Cn [%mem.M]] =
    let m2 = %core.bitcast (%matrix.Mat (2,(⊤:Nat,⊤:Nat),I32)) m;
    print_int_matrix(mem, k, l, m2, return);

con extern f [mem : %mem.M, [k l:Nat], return: Cn[%mem.M]] =
    let (mem, M) = %matrix.constMat (2,(k,l),I32) (mem, 3I32);
    // let (mem, N) = %matrix.constMat (2,(k,l),I32) (mem, 5I32);
    print_int_matrix_wrap (mem, k, l, M, return);
    // return mem

con extern main [mem1 : %mem.M,
        argc : I32,
        argv : %mem.Ptr («⊤:Nat; String», 0), // const char *argv[]
        return : Cn [%mem.M, I32]
    ] =
    let arg1_ptr    = %mem.lea (⊤:Nat, ‹⊤:Nat; String›, 0) (argv, 1I32); // argv+1 : const char**
    let (mem, arg1) = %mem.load (mem1, arg1_ptr); // argv[1] : const char*
    let arg2_ptr    = %mem.lea (⊤:Nat, ‹⊤:Nat; String›, 0) (argv, 2I32); // argv+2
    let (mem, arg2) = %mem.load (mem, arg2_ptr); // argv[2]
    // let (mem,m) = %matrix.constMat MT (mem,c);
    // cont (mem, m, return)
    // return (mem, 0I32)
    atoi (mem, arg1, atoi_cont_1)
    where
        con atoi_cont_1 [mem : %mem.M, a : I32] =
            atoi (mem, arg2, atoi_cont_2)
            where
                con atoi_cont_2 [mem : %mem.M, b : I32] =
                    // return (mem, 42I32
                    let a_nat = %core.bitcast Nat a;
                    let b_nat = %core.bitcast Nat b;
                    f (mem, (a_nat,b_nat), return_cont)
                    where
                        con return_cont [mem: %mem.M] = return (mem, 0I32);
                    end;
            end;
    end;

// CHECK-NOT: %matrix.
