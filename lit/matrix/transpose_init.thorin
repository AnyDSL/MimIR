// RUN: rm -f %t.ll
// RUN: %thorin -o - %s | FileCheck %s

.plugin core;
.plugin matrix;

.lam ex_internal_mapRed_matrix_transpose[[k l: .Nat], T:*]@.tt: .Cn[[%mem.M, %matrix.Mat (2,(k, l),T)], .Cn [%mem.M, %matrix.Mat (2,(l, k),T)] ] =
    // TODO: or use generalized addition function
    // ignore acc
    .con transpose_comb [[mem:%mem.M, acc:T, [a:T]], ret:.Cn[%mem.M,T]] = ret (mem, a);
    .con inner_matrix_transpose[[mem: %mem.M, M: %matrix.Mat (2,(k, l),T)], ret: .Cn[%mem.M, %matrix.Mat (2,(l, k),T)]]@.tt =
        // TODO: use generalized zero
        .let zero = (‚ä•:T);
        ret (
            %matrix.map_reduce
                (2, (l, k), T,
                    1,
                    2,
                    T,
                    (k, l)
                )
                (
                    mem,
                    zero,
                    transpose_comb,
                    (
                        ((1,0), M)
                    )
                )
        );
    inner_matrix_transpose;

.con .extern f [mem : %mem.M, [k l:.Nat], return: .Cn %mem.M] =
    // M:%matrix.Mat (2,(k, m), .I32),
    // N:%matrix.Mat (2,(m, l), .I32),
    // return: .Cn[%mem.M, %matrix.Mat (2,(k, l), .I32)]] = {

    .let (mem2, M) = %matrix.constMat (2,(k, l), .I32) (mem, 42I32);
    // .let (mem3, N) = %matrix.constMat (2,(m, l), .I32) (mem2, 44I32;

    .con cont [mem: %mem.M, N: %matrix.Mat (2,(l, k), .I32)] = return mem;
    ex_internal_mapRed_matrix_transpose ((k, l), .I32) ((mem, M), cont);

// CHECK-NOT: %matrix.
