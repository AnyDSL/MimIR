// RUN: rm -f %t.ll ; \
// RUN: %thorin -d matrix -e thorin %s -e ll -o %t | FileCheck %s
// RUN: clang %t.ll -o %t -Wno-override-module
// RUN: %t ; test $? -eq 5
// RUN: %t 1 2 3 ; test $? -eq 5
// RUN: %t a b c d e f ; test $? -eq 5

// ./build/bin/thorin -d matrix ./lit/matrix/mapReduce.thorin --output-thorin -

.import core;
.import mem;
.import matrix;

.let _32 = 4294967296;
.let I32 = .Idx _32;
.let R64 = %core.Real 64;

// flat by scalerize
// Mat (n,S,T) => Ptr(<S1...<Sn, T>...>) => T*

// TODO: generalize over w such that it generates a declaration specialized for Real w
// .lam ![w:.Nat] -> ... = {.con ...} ?
// TODO: can be generalize to keep the original type scheme? (How handle m,k,l curried?)
.con .extern extern_matrix_prod [
    [
        %mem.M, 
        m:.Nat, k:.Nat, l:.Nat, 
        %matrix.Mat (2,(m, k),R64), %matrix.Mat (2,(k, l),R64)
    ], 
    return : .Cn [%mem.M, %matrix.Mat (2,(m, l),R64)]
];

.con .extern f [mem : %mem.M, 
    [k:.Nat, l:.Nat, m:.Nat],
    M:%matrix.Mat (2,(m,k),R64),
    N:%matrix.Mat (2,(k,l),R64),
    return: .Cn[%mem.M, %matrix.Mat (2,(m,l),R64)]] = {

    .let (mem2,MN) = %matrix.prod (m,k,l,64) (mem,M,N);

    return (mem2, MN)
};
