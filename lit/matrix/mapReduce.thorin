// RUN: rm -f %t.ll ; \
// RUN: %thorin -d matrix -e thorin %s -e ll -o %t | FileCheck %s
// RUN: clang %t.ll -o %t -Wno-override-module
// RUN: %t ; test $? -eq 5
// RUN: %t 1 2 3 ; test $? -eq 5
// RUN: %t a b c d e f ; test $? -eq 5

// ./build/bin/thorin -d matrix ./lit/matrix/mapReduce.thorin --output-thorin -

.import core;
.import mem;
.import matrix;

.let I32 = %Int 4294967296;
// .let MT = (2, (2,4), I32);

.lam .extern identity: [a:I32] -> I32 = {
    .tt,
    a
};

.lam .extern addition: [a:I32, b:I32] -> I32 = {
    .tt,
    %core.wrap.add (0:.Nat, 4294967296:.Nat) (a,b)
};

.lam .extern f: .Cn [mem : %mem.M, 
    kl: «2: .Nat; .Nat»,
    M:%matrix.Mat (2,kl,I32),
    return: .Cn[%mem.M, %matrix.Mat (2,(kl#(1:(%Int 2)),kl#(0:(%Int 2))),I32)]] = {
    .ff,
    // .let v2 = %core.wrap.add (0:.Nat, 4294967296:.Nat) (v, v);
    .let (k,l) = kl;
    // .let add = %core.wrap.add (0:.Nat, 4294967296:.Nat);


    .let MT = M;
    .let MT2 = %matrix.mapReduce
        (
            2, (l,k), I32,
            1,
            (2),
            (I32),
            ((k,l))
        );
        // (
        //     (0:I32),
        //     addition,
        //     identity,
        //     (((1,0),M))
        // );


    return (mem, MT)
};

// .lam .extern cont: .Cn [mem : %mem.M, m : (%matrix.Mat MT), return : .Cn [%mem.M, I32]] = {
//     .ff,
//     .let m2 = %matrix.map (2,(2,4),I32,I32) (m,f);
//     .let idx = (1:(%Int 2),3:(%Int 4));
//     .let d = %matrix.read MT (m2, idx);
//     return (mem, d)
// };


.lam .extern main: .Cn [mem : %mem.M, argc : %Int 4294967296, argv : %mem.Ptr (%mem.Ptr (%Int 256, 0:.Nat), 0:.Nat), return : .Cn [%mem.M, %Int 4294967296]] = {
    .ff, // this is the filter
    .let c = 42:I32;
    // .let m = %matrix.constMat MT c;
    // cont (mem, m, return)
    return (mem, c)
};

// CHECK-DAG: main: .Cn [%mem.M, (%Int 4294967296), %mem.Ptr (%mem.Ptr ((%Int 256), 0:.Nat), 0:.Nat), .Cn [%mem.M, (%Int 4294967296)]], @(_[[memId:[0-9]*]], _[[argcId:[0-9]*]], _{{[0-9]*}}, _[[returnId:[0-9]*]]) = {
// CHECK-DAG: _[[appId:[0-9]*]]: ⊥:★ = _[[returnEtaId:[0-9]*]] (_[[memId]], 5:(%Int 4294967296));
// CHECK-DAG: _[[appId]]

// CHECK-DAG: _[[returnEtaId]]: .Cn [%mem.M, (%Int 4294967296)], @(_{{[0-9]*}}, _{{[0-9]*}}) = {
// CHECK-DAG: _[[retAppId:[0-9]*]]: ⊥:★ = _[[returnId]] @_[[returnEtaId]];
// CHECK-DAG: _[[retAppId]]

/*
.import matrix;
.import mem;
.import core;


.lam .extern main: .Cn [%mem.M, (%Int 4294967296), %mem.Ptr (%mem.Ptr ((%Int 256), 0:.Nat), 0:.Nat), .Cn [%mem.M, (%Int 4294967296)]], @(_176473, _176505, _176510, _176465) = {
    0:(%Int 2),

    .lam _176460: .Cn [%mem.M, (%Int 4294967296)], @(_176525, _176530) = {
        0:(%Int 2),
        .let _176467: ⊥:★ = _176465 @_176460;
        _176467
    };
    .let _176483: ⊥:★ = _176460 (_176473, 5:(%Int 4294967296));
    _176483
};
*/