// RUN: rm -f %t.ll ; \
// RUN: %thorin -d matrix -e thorin %s -e ll -o %t | FileCheck %s
// RUN: clang %t.ll -o %t -Wno-override-module
// RUN: %t ; test $? -eq 5
// RUN: %t 1 2 3 ; test $? -eq 5
// RUN: %t a b c d e f ; test $? -eq 5

.import core;
.import mem;
.import matrix;

.lam .extern main: .Cn [mem : %mem.M, argc : %Int 4294967296, argv : %mem.Ptr (%mem.Ptr (%Int 256, 0:.Nat), 0:.Nat), return : .Cn [%mem.M, %Int 4294967296]] = {
    0: (%Int 2), // this is the filter
    .let I32 = %Int 4294967296;
    .let MT = (2, (3,5), I32);
    .let c = 5:I32;
    .let m = %matrix.constMat MT c;
    .let idx = 0:(%Int 2);
    .let d = %matrix.shape MT (m, idx);
    .let e = %core.bitcast (%Int 4294967296, .Nat) d;
    return (mem, e)
};

// CHECK-DAG: main: .Cn [%mem.M, (%Int 4294967296), %mem.Ptr (%mem.Ptr ((%Int 256), 0:.Nat), 0:.Nat), .Cn [%mem.M, (%Int 4294967296)]], @(_[[memId:[0-9]*]], _[[argcId:[0-9]*]], _{{[0-9]*}}, _[[returnId:[0-9]*]]) = {
// CHECK-DAG: _[[appId:[0-9]*]]: ⊥:★ = _[[returnEtaId:[0-9]*]] (_[[memId]], 3:(%Int 4294967296));
// CHECK-DAG: _[[appId]]

// CHECK-DAG: _[[returnEtaId]]: .Cn [%mem.M, (%Int 4294967296)], @(_{{[0-9]*}}, _{{[0-9]*}}) = {
// CHECK-DAG: _[[retAppId:[0-9]*]]: ⊥:★ = _[[returnId]] @_[[returnEtaId]];
// CHECK-DAG: _[[retAppId]]

/*
.import core;
.import matrix;
.import mem;


.lam .extern main: .Cn [%mem.M, (%Int 4294967296), %mem.Ptr (%mem.Ptr ((%Int 256), 0:.Nat), 0:.Nat), .Cn [%mem.M, (%Int 4294967296)]], @(_253793, _253825, _253830, _253785) = {
    0:(%Int 2),

    .lam _253780: .Cn [%mem.M, (%Int 4294967296)], @(_253845, _253850) = {
        0:(%Int 2),
        .let _253787: ⊥:★ = _253785 @_253780;
        _253787
    };
    .let _253803: ⊥:★ = _253780 (_253793, 3:(%Int 4294967296));
    _253803
};
*/