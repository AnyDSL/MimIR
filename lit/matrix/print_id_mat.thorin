// RUN: rm -f %t.ll
// RUN: %thorin -p clos -p math -o - --output-ll %t.ll %s
// RUN: clang %S/../lib.c %t.ll -o %t -Wno-override-module
// RUN: %t 2 3 | FileCheck %s

.plugin core;
.plugin matrix;

.let MT1 = (2, (2,4), %math.F64);
// .let MT2 = (2, (4,3), %math.F64);

.ccon print_int_matrix    [mem: %mem.M, k: .Nat, l: .Nat, m: %matrix.Mat (2, (⊤:.Nat,⊤:.Nat), .I32), return : .Cn [%mem.M]];
.ccon print_double_matrix [mem: %mem.M, k: .Nat, l: .Nat, m: %matrix.Mat (2, (⊤:.Nat,⊤:.Nat), %math.F64), return : .Cn [%mem.M]];

.con print_int_matrix_wrap [mem: %mem.M, k: .Nat, l: .Nat, m: %matrix.Mat (2, (k,l), .I32), return : .Cn [%mem.M]] = {
    .let m2 = %core.bitcast (%matrix.Mat (2,(⊤:.Nat,⊤:.Nat),.I32)) m;
    print_int_matrix(mem, k, l, m2, return)
};

.con print_double_matrix_wrap [mem: %mem.M, k: .Nat, l: .Nat, m: %matrix.Mat (2, (k,l), %math.F64), return : .Cn [%mem.M]] = {
    .let m2 = %core.bitcast (%matrix.Mat (2,(⊤:.Nat,⊤:.Nat),%math.F64)) m;
    print_double_matrix(mem, k, l, m2, return)
};


// .lam .extern internal_mapRed_matrix_const
//     ![m: .Nat, l: .Nat, [p: .Nat, e:.Nat]] ->
//     (.Cn[
//         [mem:%mem.M],
//         .Cn[%mem.M,%matrix.Mat (2,(m, l),%math.F (p,e))]
//     ])
//     = {
//     .let R = %math.F (p,e);

//     .con const_comb [[mem:%mem.M, acc:R, []], ret:.Cn[%mem.M,R]] = {
//         // .let v = %math.arith.mul (p,e) 0 (a,b);

//         // reduce op = addition
//         // .let new_acc = %math.arith.add (p,e) 0 (acc,v);
//         .let new_acc = acc;
//         ret (mem, new_acc)
//     };
//     .con inner_matrix_const
//         ![
//             [
//                 mem:%mem.M,
//             ],
//             ret: .Cn[%mem.M,%matrix.Mat (2,(m, l),R)]
//         ]
//     = {
//         .let zero_64 = 0.0:(%math.F (52,11));
//         .let zero_real = %math.conv.f2f (p,e) zero_64;
//         ret (
//             %matrix.map_reduce
//                 (2, (m, l), R,
//                     0,
//                     (),
//                     (),
//                     ()
//                 )
//                 (
//                     mem,
//                     zero_real,
//                     const_comb,
//                     ()
//                 )
//         )
//     };
//     inner_matrix_const
// };


.con .extern main [mem : %mem.M, argc : .I64, argv : %mem.Ptr (%mem.Ptr (.I8, 0), 0), return : .Cn [%mem.M, .I32]] = {
    .con return_cont [mem:%mem.M] = return (mem, 0I32);

    .let c = 42.0:%math.F64;
    .let (mem2,m1) = %matrix.constMat MT1 (mem,c);
    // .let (mem3,m2) = %matrix.constMat MT2 (mem2,d);

    // .let (mem4, mP) = %matrix.prod (2,4,3, %math.f64) (mem3, m1, m2);
    print_double_matrix_wrap (mem2, 2, 4, m1, return_cont)
    // print_double_matrix_wrap (mem4, 2, 3, mP, return_cont)
};

// CHECK: 42.00, 42.00, 42.00, 42.00,
// CHECK: 42.00, 42.00, 42.00, 42.00,
