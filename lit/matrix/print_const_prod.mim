// RUN: rm -f %t.ll
// RUN: %thorin -p clos -o - --output-ll %t.ll %s
// RUN: clang %S/../lib.c %t.ll -o %t -Wno-override-module
// RUN: %t 2 3 | FileCheck %s

.plugin core;
.plugin math;
.plugin matrix;

.let MT1 = (2, (2,4), %math.F64);
.let MT2 = (2, (4,3), %math.F64);

.ccon print_int_matrix    [mem: %mem.M, k: .Nat, l: .Nat, m: %matrix.Mat (2, (⊤:.Nat,⊤:.Nat), .I32), return : .Cn [%mem.M]];
.ccon print_double_matrix [mem: %mem.M, k: .Nat, l: .Nat, m: %matrix.Mat (2, (⊤:.Nat,⊤:.Nat), %math.F64), return : .Cn [%mem.M]];

.con print_int_matrix_wrap [mem: %mem.M, k: .Nat, l: .Nat, m: %matrix.Mat (2, (k,l), .I32), return : .Cn [%mem.M]] =
    .let m2 = %core.bitcast (%matrix.Mat (2,(⊤:.Nat,⊤:.Nat),.I32)) m;
    print_int_matrix(mem, k, l, m2, return);

.con print_double_matrix_wrap [mem: %mem.M, k: .Nat, l: .Nat, m: %matrix.Mat (2, (k,l), %math.F64), return : .Cn [%mem.M]] =
    .let m2 = %core.bitcast (%matrix.Mat (2,(⊤:.Nat,⊤:.Nat),%math.F64)) m;
    print_double_matrix(mem, k, l, m2, return);


.con .extern main [mem : %mem.M, argc : .I32, argv : %mem.Ptr (%mem.Ptr (.I8, 0), 0), return : .Cn [%mem.M, .I32]] =
    .con return_cont [mem:%mem.M] = return (mem, 0I32);
    .let c = 3.0:%math.F64;
    .let d = 5.0:%math.F64;
    .let (`mem,m1) = %matrix.constMat MT1 (mem,c);
    .let (`mem,m2) = %matrix.constMat MT2 (mem,d);
    .let (`mem, mP) = %matrix.prod (2,4,3, %math.f64) (mem, m1, m2);
    print_double_matrix_wrap (mem, 2, 3, mP, return_cont);

// CHECK: 60.00, 60.00, 60.00,
// CHECK: 60.00, 60.00, 60.00,
