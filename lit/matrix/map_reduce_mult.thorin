// RUN: rm -f %t.ll
// RUN: %thorin -o - %s

.plugin core;
.plugin matrix;

// .let MT = (2, (2,4), I32);

.con inner_fun [[mem:%mem.M, acc:.I32, [a:.I32, b:.I32]], ret:.Cn[%mem.M,.I32]] = {
    .let v = %core.wrap.mul 0 (a,b);

    // reduce op = addition
    .let new_acc = %core.wrap.add 0 (acc,v);

    ret (mem, new_acc)
};

.con .extern f [mem : %mem.M,
    [k:.Nat, l:.Nat, m:.Nat],
    M:%matrix.Mat (2,(k,m),.I32),
    N:%matrix.Mat (2,(m,l),.I32),
    return: .Cn[%mem.M, %matrix.Mat (2,(k,l),.I32)]] = {

    // .let (mem2, MN) = %matrix.constMat (2,(k,l),.I32) (mem, 0I32;
    .let (mem2,MN) = %matrix.map_reduce
        (
            2, (k,l), .I32,
            2,
            (2,2),
            (.I32,.I32),
            ((k,m),(m,l))
        )
        (
            mem,
            0I32,
            inner_fun,
            (
                ((0,2),M),
                ((2,1),N)
            )
        )
        ;


    return (mem2, MN)
};

// CHECK-NOT: %matrix.
