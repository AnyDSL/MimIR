// RUN: rm -f %t.ll ; \
// RUN: %thorin %s -o - --output-ll %t.ll --aggr-lam-spec | FileCheck %s
// RUN: clang %t.ll -o %t -Wno-override-module
// RUN: %t "aa"; test $? -eq 1
// RUN: %t "abca"; test $? -eq 1
// RUN: %t "a"; test $? -eq 0

.plugin mem;
.plugin core;
.plugin regex;
.plugin direct;

.let Top = ⊤:.Nat;
.let re  = %regex.conj 2 (%regex.quant.plus  %regex.cls.w, %regex.lit 'a');

.con .extern main[mem: %mem.M, argc: .I32, argv: %mem.Ptr («⊤:.Nat; %mem.Ptr («⊤:.Nat; .I8», 0)», 0), exit : .Cn [%mem.M, .I32]] = {
    .con handle_match [mem: %mem.M, matched: .Bool, match: %mem.Ptr(«Top; .I8», 0)] = {

        exit (mem, %core.conv.u .i32 matched)
    };

    .con match_argument[mem: %mem.M, .I32] = {
        .let arg1 = %mem.lea (Top, ‹Top; %mem.Ptr («⊤:.Nat; .I8», 0)›, 0) (argv, 1I32);;
        .let (`mem, to_match) = %mem.load (mem, arg1);
        .let (`mem, matched, pos) = re (mem, to_match, 0:(.Idx Top));
        exit (mem, %core.conv.u .i32 matched)
    };

    (exit, match_argument) # (%core.icmp.ug (argc, 1I32)) (mem, 0I32)
};

// CHECK-NOT: %regex.
