// RUN: rm -f %t.ll ; \
// RUN: %thorin %s -o - --output-ll %t.ll --aggr-lam-spec | FileCheck %s
// RUN: clang %t.ll -o %t -Wno-override-module
// RUN: %t "test@cs.uni-saarland.de"; test $? -eq 0
// RUN: %t "tester@test.de"; test $? -eq 0
// RUN: %t "a@a.de"; test $? -eq 0
// RUN: %t "test@a.test.de"; test $? -eq 0
// RUN: %t "test.b@a.test.de"; test $? -eq 0
// RUN: %t "joachim..b@a.test.de"; test $? -eq 0
// RUN: %t "test@cs.uni-sb"; test $? -eq 255
// RUN: %t "tester@test"; test $? -eq 255
// RUN: %t "test.de"; test $? -eq 255
// RUN: %t "cs.uni-sb.de"; test $? -eq 255
// RUN: %t "test@.a.test.de"; test $? -eq 255
// RUN: %t "a@a.de#a"; test $? -eq 2
// RUN: %t "a@a.de/a"; test $? -eq 2


.plugin mem;
.plugin core;
.plugin regex;
.plugin direct;

.let Top = ⊤:.Nat;

// [a-zA-Z0-9]
// (?:[a-zA-Z0-9]*[._\-]+[a-zA-Z0-9])*
// [a-zA-Z0-9]*
// @
// [a-zA-Z0-9]
// (?:[a-zA-Z0-9]*[_\-]+[a-zA-Z0-9])*
// [a-zA-Z0-9]*
// \.
// (?:
// (?:[a-zA-Z0-9]*[_\-]+[a-zA-Z0-9])*
// [a-zA-Z0-9]+\.)*
// [a-zA-Z]
// [a-zA-Z]+
// $
// ==> [a-zA-Z0-9](?:[a-zA-Z0-9]*[._\-]+[a-zA-Z0-9])*[a-zA-Z0-9]*@[a-zA-Z0-9](?:[a-zA-Z0-9]*[_\-]+[a-zA-Z0-9])*[a-zA-Z0-9]*\.(?:(?:[a-zA-Z0-9]*[_\-]+[a-zA-Z0-9])*[a-zA-Z0-9]+\.)*[a-zA-Z][a-zA-Z]+$
.let letterOrDigit = %regex.disj 62 (%regex.lit '0',%regex.lit '1',%regex.lit '2',%regex.lit '3',%regex.lit '4',%regex.lit '5',%regex.lit '6',%regex.lit '7',%regex.lit '8',%regex.lit '9',
    %regex.lit 'a',%regex.lit 'b',%regex.lit 'c',%regex.lit 'd',%regex.lit 'e',%regex.lit 'f',%regex.lit 'g',%regex.lit 'h',%regex.lit 'i',%regex.lit 'j',%regex.lit 'k',%regex.lit 'l',%regex.lit 'm',
    %regex.lit 'n',%regex.lit 'o',%regex.lit 'p',%regex.lit 'q',%regex.lit 'r',%regex.lit 's',%regex.lit 't',%regex.lit 'u',%regex.lit 'v',%regex.lit 'w',%regex.lit 'x',%regex.lit 'y',%regex.lit 'z',
    %regex.lit 'A',%regex.lit 'B',%regex.lit 'C',%regex.lit 'D',%regex.lit 'E',%regex.lit 'F',%regex.lit 'G',%regex.lit 'H',%regex.lit 'I',%regex.lit 'J',%regex.lit 'K',%regex.lit 'L',%regex.lit 'M',
    %regex.lit 'N',%regex.lit 'O',%regex.lit 'P',%regex.lit 'Q',%regex.lit 'R',%regex.lit 'S',%regex.lit 'T',%regex.lit 'U',%regex.lit 'V',%regex.lit 'W',%regex.lit 'X',%regex.lit 'Y',%regex.lit 'Z'
);
.let letter = %regex.disj 52 (
    %regex.lit 'a',%regex.lit 'b',%regex.lit 'c',%regex.lit 'd',%regex.lit 'e',%regex.lit 'f',%regex.lit 'g',%regex.lit 'h',%regex.lit 'i',%regex.lit 'j',%regex.lit 'k',%regex.lit 'l',%regex.lit 'm',
    %regex.lit 'n',%regex.lit 'o',%regex.lit 'p',%regex.lit 'q',%regex.lit 'r',%regex.lit 's',%regex.lit 't',%regex.lit 'u',%regex.lit 'v',%regex.lit 'w',%regex.lit 'x',%regex.lit 'y',%regex.lit 'z',
    %regex.lit 'A',%regex.lit 'B',%regex.lit 'C',%regex.lit 'D',%regex.lit 'E',%regex.lit 'F',%regex.lit 'G',%regex.lit 'H',%regex.lit 'I',%regex.lit 'J',%regex.lit 'K',%regex.lit 'L',%regex.lit 'M',
    %regex.lit 'N',%regex.lit 'O',%regex.lit 'P',%regex.lit 'Q',%regex.lit 'R',%regex.lit 'S',%regex.lit 'T',%regex.lit 'U',%regex.lit 'V',%regex.lit 'W',%regex.lit 'X',%regex.lit 'Y',%regex.lit 'Z'
);
.let generalChars = %regex.disj 2 (%regex.cls.w, %regex.lit '-');
.let re = %regex.conj 11 (letterOrDigit,
            %regex.quant.star (%regex.conj 3 (%regex.quant.star letterOrDigit, %regex.quant.plus (%regex.disj 3 (%regex.lit '.', %regex.lit '_', %regex.lit '-')), letterOrDigit)),
            %regex.quant.star letterOrDigit,
            %regex.lit '@',
            letterOrDigit,
            %regex.quant.star (%regex.conj 3 (%regex.quant.star letterOrDigit, %regex.quant.plus (%regex.disj 2 (%regex.lit '_', %regex.lit '-')), letterOrDigit)),
            %regex.quant.star letterOrDigit,
            %regex.lit '.',
            %regex.quant.star (%regex.conj 3 (
                            %regex.quant.star (%regex.conj 3 (%regex.quant.star letterOrDigit, %regex.quant.plus (%regex.disj 2 (%regex.lit '_', %regex.lit '-')), letterOrDigit)),
                            %regex.quant.plus letterOrDigit, %regex.lit '.')),
            letter,
            %regex.quant.plus letter);

.ccon strlen[%mem.M, %mem.Ptr («⊤:.Nat; .I8», 0), .Cn [%mem.M, .I32]];

.con .extern main[mem: %mem.M, argc: .I32, argv: %mem.Ptr («⊤:.Nat; %mem.Ptr («⊤:.Nat; .I8», 0)», 0), exit : .Cn [%mem.M, .I32]] = {
    .con match_argument[mem: %mem.M, .I32] = {
        .let arg1 = %mem.lea (Top, ‹Top; %mem.Ptr («⊤:.Nat; .I8», 0)›, 0) (argv, 1I32);;
        .let (`mem, to_match) = %mem.load (mem, arg1);
        .let (`mem, matched, pos) = re (mem, to_match, 0:(.Idx Top));
        .con exit_me(mem: %mem.M, len: .I32) = {
            exit (mem, (%core.idx .i32 0 255, %core.wrap.sub .i32 (len, %core.conv.u .i32 pos))#matched)
        };
        strlen(mem, to_match, exit_me)
    };

    (exit, match_argument) # (%core.icmp.ug (argc, 1I32)) (mem, 0I32)
};

// CHECK-NOT: %regex.
