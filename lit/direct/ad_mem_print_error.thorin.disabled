.plugin core;
.plugin direct;

.lam .extern internal_diff_core_icmp_XygLe __689499: .Nat → .Cn [«2; .Idx __689422», .Cn [.Idx 2, .Cn [.Idx 2, .Cn «2; .Idx __689422»]]] = {
    .con cmp_pb_689606 __689620::[.Idx 2, pb_ret_689622: .Cn «2; .Idx __689499»] @(1:(.Idx 2)) = {
        pb_ret_689622 ‹2; 0:(.Idx __689499)›
    };
    .con inner_cmp_689546 __689563::[__689582::[_689586: .Idx __689499, _689590: .Idx __689499], ret_689565: .Cn [.Idx 2, .Cn [.Idx 2, .Cn «2; .Idx __689499»]]] @(1:(.Idx 2)) = {
        .let _689593: .Idx 2 = %core.icmp.XygLe __689499 __689582;
        ret_689565 (_689593, cmp_pb_689606)
    };
    inner_cmp_689546
};
.lam .extern internal_diff_core_icmp_xYgLE __689713: .Nat → .Cn [«2; .Idx __689655», .Cn [.Idx 2, .Cn [.Idx 2, .Cn «2; .Idx __689655»]]] = {
    .con cmp_pb_689792 __689798::[.Idx 2, pb_ret_689800: .Cn «2; .Idx __689713»] @(1:(.Idx 2)) = {
        pb_ret_689800 ‹2; 0:(.Idx __689713)›
    };
    .con inner_cmp_689751 __689757::[__689776::[_689780: .Idx __689713, _689784: .Idx __689713], ret_689759: .Cn [.Idx 2, .Cn [.Idx 2, .Cn «2; .Idx __689713»]]] @(1:(.Idx 2)) = {
        .let _689787: .Idx 2 = %core.icmp.xYgLE __689713 __689776;
        ret_689759 (_689787, cmp_pb_689792)
    };
    inner_cmp_689751
};
.lam .extern internal_diff_core_icmp_xyglE __689888: .Nat → .Cn [«2; .Idx __689830», .Cn [.Idx 2, .Cn [.Idx 2, .Cn «2; .Idx __689830»]]] = {
    .con cmp_pb_689970 __689979::[.Idx 2, pb_ret_689981: .Cn «2; .Idx __689888»] @(1:(.Idx 2)) = {
        pb_ret_689981 ‹2; 0:(.Idx __689888)›
    };
    .con inner_cmp_689926 __689935::[__689954::[_689958: .Idx __689888, _689962: .Idx __689888], ret_689937: .Cn [.Idx 2, .Cn [.Idx 2, .Cn «2; .Idx __689888»]]] @(1:(.Idx 2)) = {
        .let _689965: .Idx 2 = %core.icmp.xyglE __689888 __689954;
        ret_689937 (_689965, cmp_pb_689970)
    };
    inner_cmp_689926
};
.lam .extern internal_diff_core_wrap_add __690082::[_690173: .Nat, w_690083: .Nat] → .Cn [«2; .Idx w_690015», .Cn [.Idx w_690015, .Cn [.Idx w_690015, .Cn «2; .Idx w_690015»]]] = {
    .con add_pb_690186 __690195::[s_690205: .Idx w_690083, pb_ret_690197: .Cn «2; .Idx w_690083»] @(1:(.Idx 2)) = {
        pb_ret_690197 ‹2; s_690205›
    };
    .con inner_add_deriv_cps_690132 __690141::[__690161::[_690165: .Idx w_690083, _690169: .Idx w_690083], ret_690143: .Cn [.Idx w_690083, .Cn [.Idx w_690083, .Cn «2; .Idx w_690083»]]] @(1:(.Idx 2)) = {
        .let _690176: .Idx w_690083 = %core.wrap.add __690082 __690161;
        ret_690143 (_690176, add_pb_690186)
    };
    inner_add_deriv_cps_690132
};
.lam .extern internal_diff_core_wrap_mul __690292::[_690377: .Nat, w_690293: .Nat] → .Cn [«2; .Idx w_690231», .Cn [.Idx w_690231, .Cn [.Idx w_690231, .Cn «2; .Idx w_690231»]]] = {
    .con inner_mul_deriv_cps_690336 __690345::[__690365::[_690369: .Idx w_690293, _690373: .Idx w_690293], ret_690347: .Cn [.Idx w_690293, .Cn [.Idx w_690293, .Cn «2; .Idx w_690293»]]] @(1:(.Idx 2)) = {
        .con mul_pb_690390 __690399::[s_690414: .Idx w_690293, pb_ret_690401: .Cn «2; .Idx w_690293»] @(1:(.Idx 2)) = {
            .let _690426: .Idx w_690293 = %core.wrap.mul __690292 (__690365#1:(.Idx 2), s_690414);
            .let _690436: .Idx w_690293 = %core.wrap.mul __690292 (__690365#0:(.Idx 2), s_690414);
            pb_ret_690401 (_690426, _690436)
        };
        .let _690380: .Idx w_690293 = %core.wrap.mul __690292 __690365;
        ret_690347 (_690380, mul_pb_690390)
    };
    inner_mul_deriv_cps_690336
};
.lam Uf_690595 _690612: %core.I32 → ★ = {
    [%mem.M, %core.I32]
};
.lam Uf_690659 _690676: «2; %core.I32» → ★ = {
    [%core.I32, .Cn [%core.I32, .Cn «2; %core.I32»]]
};
.con eta_inner_mul_deriv_cps_690710 _690711::[__690716::[_690720: %core.I32, _690724: %core.I32], ret_690713: .Cn [%core.I32, .Cn [%core.I32, .Cn «2; %core.I32»]]] @(0:(.Idx 2)) = {
    .con mul_pb_690728 __690729::[s_690734: %core.I32, pb_ret_690731: .Cn «2; %core.I32»] @(1:(.Idx 2)) = {
        .let _690746: %core.I32 = %core.wrap.mul %core.i32 0 (__690716#1:(.Idx 2), s_690734);
        .let _690752: %core.I32 = %core.wrap.mul %core.i32 0 (__690716#0:(.Idx 2), s_690734);
        pb_ret_690731 (_690746, _690752)
    };
    .let _690727: %core.I32 = %core.wrap.mul %core.i32 0 __690716;
    ret_690713 (_690727, mul_pb_690728)
};
.lam Uf_691251 _691268: «2; %core.I32» → ★ = {
    [%core.I32, .Cn [%core.I32, .Cn «2; %core.I32»]]
};
.con eta_inner_mul_deriv_cps_691294 _691295::[__691299::[_691303: %core.I32, _691307: %core.I32], ret_691297: .Cn [%core.I32, .Cn [%core.I32, .Cn «2; %core.I32»]]] @(0:(.Idx 2)) = {
    .con mul_pb_691311 __691312::[s_691317: %core.I32, pb_ret_691314: .Cn «2; %core.I32»] @(1:(.Idx 2)) = {
        .let _691322: %core.I32 = %core.wrap.mul %core.i32 0 (__691299#1:(.Idx 2), s_691317);
        .let _691328: %core.I32 = %core.wrap.mul %core.i32 0 (__691299#0:(.Idx 2), s_691317);
        pb_ret_691314 (_691322, _691328)
    };
    .let _691310: %core.I32 = %core.wrap.mul %core.i32 0 __691299;
    ret_691297 (_691310, mul_pb_691311)
};
.lam Uf_691363 _691380: %core.I32 → ★ = {
    [%mem.M, %core.I32]
};
.con zero_pb_691406 _691407::[%core.I32, _691409: .Cn [%mem.M, %core.I32]] @(1:(.Idx 2)) = {
    _691409 (⊥:%mem.M, 0:(%core.I32))
};
.lam Uf_691429 _691446: %core.I32 → ★ = {
    [%mem.M, %core.I32]
};
.con extract_pb_691470 _691471::[s_691476: %core.I32, _691473: .Cn [%mem.M, %core.I32]] @(1:(.Idx 2)) = {
    _691473 (⊥:%mem.M, s_691476)
};
.lam Uf_691899 _691916: %core.I32 → ★ = {
    [%mem.M, %core.I32]
};
.con zero_pb_691934 _691935::[%core.I32, _691937: .Cn [%mem.M, %core.I32]] @(1:(.Idx 2)) = {
    _691937 (⊥:%mem.M, 0:(%core.I32))
};
.lam Uf_691949 _691966: %core.I32 → ★ = {
    [%mem.M, %core.I32]
};
.lam Uf_692052 _692069: %mem.M → ★ = {
    [%mem.M, %core.I32]
};
.con zero_pb_692087 _692088::[%mem.M, _692090: .Cn [%mem.M, %core.I32]] @(1:(.Idx 2)) = {
    _692090 (⊥:%mem.M, 0:(%core.I32))
};
.con .extern main __690558::[mem_690876: %mem.M, argc_691342: %core.I32, %mem.Ptr (%mem.Ptr (%core.I8, 0), 0), return_690562: .Cn [%mem.M, %core.I32]] @(0:(.Idx 2)) = {
    .con comp_tup_pb__691250 _691347::[_691349: %core.I32, _691358: .Cn [%mem.M, %core.I32]] @(1:(.Idx 2)) = {
        .con comp_tup_pb__cont_691356 _691420::[_691421: %core.I32, _691480: %core.I32] @(1:(.Idx 2)) = {
            .let _691422: [%mem.M, %core.I32] = %direct.cps2ds_dep (%core.I32, Uf_691363) zero_pb_691406 _691421;
            .let _691481: [%mem.M, %core.I32] = %direct.cps2ds_dep (%core.I32, Uf_691429) extract_pb_691470 _691480;
            .let _691488: %core.I32 = %core.wrap.add %core.i32 0 (_691422#1:(.Idx 2), _691481#1:(.Idx 2));
            _691358 (⊤:%mem.M, _691488)
        };
        .let _691344: [%core.I32, .Cn [%core.I32, .Cn «2; %core.I32»]] = %direct.cps2ds_dep («2; %core.I32», Uf_691251) eta_inner_mul_deriv_cps_691294 (42:(%core.I32), argc_691342);
        _691344#1:(.Idx 2) (_691349, comp_tup_pb__cont_691356)
    };
    .con comp_tup_pb__690636 _691889::[_691891: %core.I32, _691894: .Cn [%mem.M, %core.I32]] @(1:(.Idx 2)) = {
        .con comp_tup_pb__cont_691892 _691940::[_691941: %core.I32, _692020: %core.I32] @(1:(.Idx 2)) = {
            .let _691942: [%mem.M, %core.I32] = %direct.cps2ds_dep (%core.I32, Uf_691899) zero_pb_691934 _691941;
            .let _690877: [%mem.M, %mem.Ptr («100; %core.I32», 0)] = %mem.alloc («100; %core.I32», 0) mem_690876;
            .let _pullback_alloc_690882: [%mem.M, %mem.Ptr («100; .Cn [%core.I32, .Cn [%mem.M, %core.I32]]», 0)] = %mem.malloc («100; .Cn [%core.I32, .Cn [%mem.M, %core.I32]]», 0) (_690877#0:(.Idx 2), 800);
            .let pullback_lea_691249: %mem.Ptr (.Cn [%core.I32, .Cn [%mem.M, %core.I32]], 0) = %mem.lea (_pullback_alloc_690882#1:(.Idx 2), 1:(.Idx 100));
            .let _691499: %mem.M = %mem.store (.Cn [%core.I32, .Cn [%mem.M, %core.I32]], 0) (_pullback_alloc_690882#0:(.Idx 2), pullback_lea_691249, comp_tup_pb__691250);
            .let _691865: %mem.Ptr (%core.I32, 0) = %mem.lea (_690877#1:(.Idx 2), 1:(.Idx 100));
            .let _691874: %mem.M = %mem.store (%core.I32, 0) (_691499, _691865, _691344#0:(.Idx 2));
            .let aug_load_691882: [%mem.M, %core.I32] = %mem.load (%core.I32, 0) (_691874, _691865);
            .let pullback_load_692016: [%mem.M, .Cn [%core.I32, .Cn [%mem.M, %core.I32]]] = %mem.load (.Cn [%core.I32, .Cn [%mem.M, %core.I32]], 0) (aug_load_691882#0:(.Idx 2), pullback_lea_691249);
            .let _692021: [%mem.M, %core.I32] = %direct.cps2ds_dep (%core.I32, Uf_691949) pullback_load_692016#1:(.Idx 2) _692020;
            .let _692028: %core.I32 = %core.wrap.add %core.i32 0 (_691942#1:(.Idx 2), _692021#1:(.Idx 2));
            _691894 (⊤:%mem.M, _692028)
        };
        .let _691886: [%core.I32, .Cn [%core.I32, .Cn «2; %core.I32»]] = %direct.cps2ds_dep («2; %core.I32», Uf_690659) eta_inner_mul_deriv_cps_690710 (100:(%core.I32), aug_load_691882#1:(.Idx 2));
        _691886#1:(.Idx 2) (_691891, comp_tup_pb__cont_691892)
    };
    .let _692035: [%mem.M, %core.I32] = %direct.cps2ds_dep (%core.I32, Uf_690595) comp_tup_pb__690636 1:(%core.I32);
    .let _692095: [%mem.M, %core.I32] = %direct.cps2ds_dep (%mem.M, Uf_692052) zero_pb_692087 pullback_load_692016#0:(.Idx 2);
    .let _692102: %core.I32 = %core.wrap.add %core.i32 0 (_692035#1:(.Idx 2), _692095#1:(.Idx 2));
    return_690562 (⊤:%mem.M, _692102)
};
