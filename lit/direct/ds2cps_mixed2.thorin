// RUN: rm -f %t.ll ; \
// RUN: %thorin -d direct %s --output-ll %t.ll --output-thorin - | FileCheck %s

// a chain of cps calls followed by a direct call

.import direct;
.import mem;

.let I32 = %Int 4294967296;

.lam f: [a:I32] -> I32 = {
    .ff,
    %Wrap_add (0:.Nat, 4294967296:.Nat) (2:I32, a)
};

.lam h: .Cn [mem : %mem.M, a : I32, return : .Cn [%mem.M, I32]] = {
    0: (%Int 2),
    .let c = f a;
    return (mem, c)
};

.lam g: .Cn [mem : %mem.M, a : I32, return : .Cn [%mem.M, I32]] = {
    0: (%Int 2),
    .let b = %Wrap_add (0:.Nat, 4294967296:.Nat) (3:I32, a);
    h (mem, b, return)
};

.lam .extern main: .Cn [mem : %mem.M, argc : I32, argv : %mem.Ptr (%mem.Ptr (%Int 256, 0:.Nat), 0:.Nat), return : .Cn [%mem.M, I32]] = {
    0: (%Int 2),
    g (mem, 40:I32, return)
};

// CHECK-DAG: .lam .extern main: .Cn [%mem.M, (%Int 4294967296), %mem.Ptr (%mem.Ptr ((%Int 256), 0:.Nat), 0:.Nat), .Cn [%mem.M, (%Int 4294967296)]], @(_[[memId:[_0-9]*]], _[[argcId:[_0-9]*]], _{{[_0-9]*}}, _[[returnId:[_0-9]*]]) = {
// CHECK-DAG: _[[appId:[_0-9]*]]: ⊥:★ = _[[returnEtaId:[_0-9]*]] (_[[memId]], 45:(%Int 4294967296));
// CHECK-DAG: _[[appId]]

// CHECK-DAG: .lam _[[returnEtaId]]: .Cn [%mem.M, (%Int 4294967296)], @(_{{[_0-9]*}}, _{{[_0-9]*}}) = {
// CHECK-DAG: _[[retAppId:[_0-9]*]]: ⊥:★ = _[[returnId]] @_[[returnEtaId]];
// CHECK-DAG: _[[retAppId]]
