// RUN: rm -f %t.ll ; \
// RUN: %thorin %s -o - | FileCheck %s

.plugin core;
.plugin direct;

.lam Uf_690595 _690612I32 → ★ = {
    [%mem.M, .I32]
};
.lam Uf_690659 _690676: «2; .I32» → ★ = {
    [.I32, .Cn [.I32, .Cn «2; .I32»]]
};
.con eta_inner_mul_deriv_cps_690710 _690711::[__690716::[_690720I32, _690724I32], ret_690713: .Cn [.I32, .Cn [.I32, .Cn «2; .I32»]]] @(.ff) = {
    .con mul_pb_690728 __690729::[s_690734I32, pb_ret_690731: .Cn «2; .I32»] @(.tt) = {
        .let _690746I32 = %core.wrap.mul .i32 0 (__690716#.tt, s_690734);
        .let _690752I32 = %core.wrap.mul .i32 0 (__690716#.ff, s_690734);
        pb_ret_690731 (_690746, _690752)
    };
    .let _690727I32 = %core.wrap.mul .i32 0 __690716;
    ret_690713 (_690727, mul_pb_690728)
};
.lam Uf_691251 _691268: «2; .I32» → ★ = {
    [.I32, .Cn [.I32, .Cn «2; .I32»]]
};
.con eta_inner_mul_deriv_cps_691294 _691295::[__691299::[_691303I32, _691307I32], ret_691297: .Cn [.I32, .Cn [.I32, .Cn «2; .I32»]]] @(.ff) = {
    .con mul_pb_691311 __691312::[s_691317I32, pb_ret_691314: .Cn «2; .I32»] @(.tt) = {
        .let _691322I32 = %core.wrap.mul .i32 0 (__691299#.tt, s_691317);
        .let _691328I32 = %core.wrap.mul .i32 0 (__691299#.ff, s_691317);
        pb_ret_691314 (_691322, _691328)
    };
    .let _691310I32 = %core.wrap.mul .i32 0 __691299;
    ret_691297 (_691310, mul_pb_691311)
};
.lam Uf_691363 _691380I32 → ★ = {
    [%mem.M, .I32]
};
.con zero_pb_691406 _691407::[.I32, _691409: .Cn [%mem.M, .I32]] @(.tt) = {
    _691409 (⊥:%mem.M, 0I32)
};
.lam Uf_691429 _691446I32 → ★ = {
    [%mem.M, .I32]
};
.con extract_pb_691470 _691471::[s_691476I32, _691473: .Cn [%mem.M, .I32]] @(.tt) = {
    _691473 (⊥:%mem.M, s_691476)
};
.lam Uf_691899 _691916I32 → ★ = {
    [%mem.M, .I32]
};
.con zero_pb_691934 _691935::[.I32, _691937: .Cn [%mem.M, .I32]] @(.tt) = {
    _691937 (⊥:%mem.M, 0I32)
};
.lam Uf_691949 _691966I32 → ★ = {
    [%mem.M, .I32]
};
.lam Uf_692052 _692069: %mem.M → ★ = {
    [%mem.M, .I32]
};
.con zero_pb_692087 _692088::[%mem.M, _692090: .Cn [%mem.M, .I32]] @(.tt) = {
    _692090 (⊥:%mem.M, 0I32)
};
.con .extern main __690558::[mem_690876: %mem.M, argc_691342I32, %mem.Ptr (%mem.Ptr (.I8, 0), 0), return_690562: .Cn [%mem.M, .I32]] @(.ff) = {
    .let _691344: [.I32, .Cn [.I32, .Cn «2; .I32»]] = %direct.cps2ds_dep («2; .I32», Uf_691251) eta_inner_mul_deriv_cps_691294 (42I32, argc_691342);
    //                                                                                 ^
    .con comp_tup_pb__691250 _691347::[_691349I32, _691358: .Cn [%mem.M, .I32]] @(.tt) = {
        .con comp_tup_pb__cont_691356 _691420::[_691421I32, _691480I32] @(.tt) = {
            .let _691422: [%mem.M, .I32] = %direct.cps2ds_dep (.I32, Uf_691363) zero_pb_691406 _691421;
            //                                        ^
            .let _691481: [%mem.M, .I32] = %direct.cps2ds_dep (.I32, Uf_691429) extract_pb_691470 _691480;
            //                                        ^
            .let _691488I32 = %core.wrap.add .i32 0 (_691422#.tt, _691481#.tt);
            _691358 (⊤:%mem.M, _691488)
        };
        _691344#.tt (_691349, comp_tup_pb__cont_691356)
    };
    .let _690877: [%mem.M, %mem.Ptr («100; .I32», 0)] = %mem.alloc («100; .I32», 0) mem_690876;
    .let _pullback_alloc_690882: [%mem.M, %mem.Ptr («100; .Cn [.I32, .Cn [%mem.M, .I32]]», 0)] = %mem.malloc («100; .Cn [.I32, .Cn [%mem.M, .I32]]», 0) (_690877#.ff, 800);
    .let pullback_lea_691249: %mem.Ptr (.Cn [.I32, .Cn [%mem.M, .I32]], 0) = %mem.lea (100, ‹100; .Cn [.I32, .Cn [%mem.M, .I32]]›, 0) (_pullback_alloc_690882#.tt, 1:(.Idx 100));
    .let _691499: %mem.M = %mem.store (.Cn [.I32, .Cn [%mem.M, .I32]], 0) (_pullback_alloc_690882#.ff, pullback_lea_691249, comp_tup_pb__691250);
    .let _691865: %mem.Ptr (.I32, 0) = %mem.lea (100, ‹100; .I32›, 0) (_690877#.tt, 1:(.Idx 100));
    .let _691874: %mem.M = %mem.store (.I32, 0) (_691499, _691865, _691344#.ff);
    .let aug_load_691882: [%mem.M, .I32] = %mem.load (.I32, 0) (_691874, _691865);
    .let pullback_load_692016: [%mem.M, .Cn [.I32, .Cn [%mem.M, .I32]]] = %mem.load (.Cn [.I32, .Cn [%mem.M, .I32]], 0) (aug_load_691882#.ff, pullback_lea_691249);
    .con comp_tup_pb__690636 _691889::[_691891I32, _691894: .Cn [%mem.M, .I32]] @(.tt) = {
        .con comp_tup_pb__cont_691892 _691940::[_691941I32, _692020I32] @(.tt) = {
            .let _691942: [%mem.M, .I32] = %direct.cps2ds_dep (.I32, Uf_691899) zero_pb_691934 _691941;
            //                                        ^
            .let _692021: [%mem.M, .I32] = %direct.cps2ds_dep (.I32, Uf_691949) pullback_load_692016#.tt _692020;
            //                                        ^
            .let _692028I32 = %core.wrap.add .i32 0 (_691942#.tt, _692021#.tt);
            _691894 (⊤:%mem.M, _692028)
        };
        .let _691886: [.I32, .Cn [.I32, .Cn «2; .I32»]] = %direct.cps2ds_dep («2; .I32», Uf_690659) eta_inner_mul_deriv_cps_690710 (100I32, aug_load_691882#.tt);
        //                                                                                  ^
        _691886#.tt (_691891, comp_tup_pb__cont_691892)
    };
    .let _692035: [%mem.M, .I32] = %direct.cps2ds_dep (.I32, Uf_690595) comp_tup_pb__690636 1I32;
    //                                        ^
    .let _692095: [%mem.M, .I32] = %direct.cps2ds_dep (%mem.M, Uf_692052) zero_pb_692087 pullback_load_692016#.ff;
    //                                        ^
    .let _692102I32 = %core.wrap.add .i32 0 (_692035#.tt, _692095#.tt);
    return_690562 (⊤:%mem.M, _692102)
};

// CHECK-DAG: return{{.*}}84
