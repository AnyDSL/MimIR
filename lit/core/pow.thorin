// RUN: rm -f %t.ll ; \
// RUN: %thorin -d core %s --output-ll %t.ll -o - | FileCheck %s

.import core;
.import mem;

.let I32 = .Idx 4294967296;

/// if b<=0:
///     1
/// else
///     a*pow(a,b-1)
/// 
/// pow(a,b,ret): 
///     ((pow_else,pow_then)#cmp) ()
/// then():
///    ret 1
/// else():
///     pow(a,b-1,cont)
/// cont(v):
///    ret (a*v)
/// 
.cn f [[a:I32, b:I32], ret: .Cn [I32]] = {
    .cn pow_then [] = ret (1:I32);

    .cn pow_cont [v:I32] = {
        .let m = %core.wrap.mul (0,4294967296) (a,v);
        ret m
    };
    .cn pow_else [] = {
        .let b_1 = %core.wrap.sub (0,4294967296) (b,1:I32);
        f ((a,b_1),pow_cont)
    };
    .let cmp = %core.icmp.e 4294967296 (b,0:I32);
    ((pow_else, pow_then)#cmp) ()
};

.cn .extern main [mem : %mem.M, argc : I32, argv : %mem.Ptr (%mem.Ptr (.Idx 256, 0:.Nat), 0:.Nat), return : .Cn [%mem.M, I32]] = {
    .cn ret_cont r::[I32] = return (mem, r);

    .let c = (42:I32, 2:I32);
    f (c,ret_cont)
};


// CHECK-DAG: .cn f_{{[0-9_]+}} _{{[0-9_]+}}::[_{{[0-9_]+}}: .Idx 4294967296, _{{[0-9_]+}}: .Cn .Idx 4294967296] = {
// CHECK-DAG:     .cn _{{[0-9_]+}} _{{[0-9_]+}}: .Idx 4294967296 = {
// CHECK-DAG:         _{{[0-9_]+}} _{{[0-9_]+}}

// CHECK-DAG:     .cn pow_then_{{[0-9_]+}} [] = {
// CHECK-DAG:         _{{[0-9_]+}} 1:(.Idx 4294967296)

// CHECK-DAG:     .cn pow_cont_{{[0-9_]+}} __{{[0-9_]+}}: .Idx 4294967296 = {
// CHECK-DAG:         .let _{{[0-9_]+}}: .Idx 4294967296 = %core.wrap.mul (0, 4294967296) (42:(.Idx 4294967296), _{{[0-9_]+}});
// CHECK-DAG:         _{{[0-9_]+}} _{{[0-9_]+}}

// CHECK-DAG:     .cn pow_else_{{[0-9_]+}} [] = {
// CHECK-DAG:         .let _{{[0-9_]+}}: .Idx 4294967296 = %core.wrap.add (0, 4294967296) (4294967295:(.Idx 4294967296), _{{[0-9_]+}});
// CHECK-DAG:         f_{{[0-9_]+}} (_{{[0-9_]+}}, pow_cont_{{[0-9_]+}})

// CHECK-DAG:     .let _{{[0-9_]+}}: .Idx 2 = %core.icmp.xyglE 4294967296 (0:(.Idx 4294967296), _{{[0-9_]+}});
// CHECK-DAG:     (pow_else_{{[0-9_]+}}, pow_then_{{[0-9_]+}})#_{{[0-9_]+}} ()

