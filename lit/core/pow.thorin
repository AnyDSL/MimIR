// RUN: rm -f %t.ll ; \
// RUN: %thorin -d autodiff %s --output-ll %t.ll --output-thorin - | FileCheck %s

// ./build/bin/thorin -d core ./lit/core/pow.thorin --output-thorin - -VVVV
// ./build/bin/thorin ./lit/core/pow.thorin --output-thorin - -VVVV
.import core;
.import mem;

.let I32 = %Int 4294967296;

/// if b<=0:
///     1
/// else
///     a*pow(a,b-1)
/// 
/// pow(a,b,ret): 
///     ((pow_else,pow_then)#cmp) ()
/// then():
///    ret 1
/// else():
///     pow(a,b-1,cont)
/// cont(v):
///    ret (a*v)
/// 
.cn f [[a:I32, b:I32], ret: .Cn [I32]] = {
    .cn pow_then [] = {
        ret (1:I32)
    };
    .cn pow_cont [v:I32] = {
        .let m = %core.wrap.mul (0,4294967296) (a,v);
        ret m
    };
    .cn pow_else [] = {
        .let b_1 = %core.wrap.sub (0,4294967296) (b,1:I32);
        f ((a,b_1),pow_cont)
    };
    // .let cmp = %core.icmp.sle 4294967296 (b,0:I32);
    .let cmp = %core.icmp.e 4294967296 (b,0:I32);
    ((pow_then,pow_else) #cmp) ()
    // .let x = b;
    // ret x
};

.cn .extern main [mem : %mem.M, argc : I32, argv : %mem.Ptr (%mem.Ptr (%Int 256, 0:.Nat), 0:.Nat), return : .Cn [%mem.M, I32]] = {

    .cn ret_cont r::[I32] = {
        return (mem, r)
    };

    .let c = (42:I32, 2:I32);
    f (c,ret_cont)
};


    // .let b = %Wrap_mul (0:.Nat, 4294967296:.Nat) (3:I32, a);

    // .let c = f (42:I32);
    // return (mem, c)

// CHECK-DAG: .cn .extern main _{{[0-9_]+}}::[mem_[[memId:[_0-9]*]]: %mem.M, (%Int 4294967296), %mem.Ptr (%mem.Ptr ((%Int 256), 0:.Nat), 0:.Nat), return_[[returnId:[_0-9]*]]: .Cn [%mem.M, (%Int 4294967296)]] = {
// CHECK-DAG: _[[appId:[_0-9]*]]: ⊥:★ = return_[[returnEtaId:[_0-9]*]] (mem_[[memId]], 42:(%Int 4294967296));
// CHECK-DAG: _[[appId]]

// CHECK-DAG: return_[[returnEtaId]] _[[returnEtaVarId:[0-9_]+]]: [%mem.M, (%Int 4294967296)] = {
// CHECK-DAG: return_[[retAppId:[_0-9]*]]: ⊥:★ = return_[[returnId]] _[[returnEtaVarId]];
// CHECK-DAG: return_[[retAppId]]
