// RUN: rm -f %t.ll ; \
// RUN: %thorin %s --output-ll %t.ll
// RUN: clang %t.ll -o %t -Wno-override-module
// RUN: %t 3 10 ; test $? -eq 13

.import core;
.import mem;

.let _32 = 4294967296;
.let I32 = .Idx _32;

.con atoi [%mem.M, %mem.Ptr («⊤:.Nat; .Idx 256», 0), .Cn [%mem.M, I32]];

.con .extern main [mem: %mem.M, argc: I32, argv: %mem.Ptr («⊤:.Nat; %mem.Ptr («⊤:.Nat; .Idx 256», 0)», 0), return: .Cn [%mem.M, I32]] = {
    .con atoi_cont_a [mem: %mem.M, a: I32] = {
        .con atoi_cont_b [mem: %mem.M, b: I32] = {
                return (mem, %core.bit2.and_ _32 (0b00000000000000000000000000001111:I32, %core.bit2.nand _32 (a, b)))
        };

        .let argv_ptr_b = %mem.lea (⊤:.Nat, ‹⊤:.Nat; %mem.Ptr («⊤:.Nat; .Idx 256», 0)›, 0) (argv, 2:I32);
        .let argv_load_b = %mem.load (%mem.Ptr («⊤:.Nat; .Idx 256», 0), 0) (mem, argv_ptr_b);
        atoi (argv_load_b#.ff, argv_load_b#.tt, atoi_cont_b)
    };

    .let argv_ptr_a = %mem.lea (⊤:.Nat, ‹⊤:.Nat; %mem.Ptr («⊤:.Nat; .Idx 256», 0)›, 0) (argv, 1:I32);
    .let argv_load_a = %mem.load (%mem.Ptr («⊤:.Nat; .Idx 256», 0), 0) (mem, argv_ptr_a);
    atoi (argv_load_a#.ff, argv_load_a#.tt, atoi_cont_a)
};
