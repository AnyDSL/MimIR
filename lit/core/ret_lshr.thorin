// RUN: rm -f %t.ll ; \
// RUN: %thorin %s --output-ll %t.ll --output-thorin - | FileCheck %s
// RUN: clang %t.ll -o %t -Wno-override-module
// RUN: %t 2 1 ; test $? -eq 1
// RUN: %t 16 3 ; test $? -eq 2

.import core;
.import mem;

.cn atoi [%mem.M, %mem.Ptr («⊤:.Nat; %Int 256», 0:.Nat), .Cn [%mem.M, %Int 4294967296]];

.cn .extern main [mem : %mem.M, argc : %Int 4294967296, argv : %mem.Ptr («⊤:.Nat; %mem.Ptr («⊤:.Nat; %Int 256», 0:.Nat)», 0:.Nat), return : .Cn [%mem.M, %Int 4294967296]] = {
    .cn atoi_cont_a [mem : %mem.M, a : %Int 4294967296] = {
        .cn atoi_cont_b [mem : %mem.M, b : %Int 4294967296] = {
                return (mem, %core.shr.lshr 4294967296 (a, b))
        };

        .let argv_ptr_b = %mem.lea (⊤:.Nat, ‹⊤:.Nat; %mem.Ptr («⊤:.Nat; %Int 256», 0:.Nat)›, 0:.Nat) (argv, 2:(%Int 4294967296));
        .let argv_load_b = %mem.load (%mem.Ptr («⊤:.Nat; %Int 256», 0:.Nat), 0:.Nat) (mem, argv_ptr_b);
        atoi (argv_load_b#.ff, argv_load_b#.tt, atoi_cont_b)
    };

    .let argv_ptr_a = %mem.lea (⊤:.Nat, ‹⊤:.Nat; %mem.Ptr («⊤:.Nat; %Int 256», 0:.Nat)›, 0:.Nat) (argv, 1:(%Int 4294967296));
    .let argv_load_a = %mem.load (%mem.Ptr («⊤:.Nat; %Int 256», 0:.Nat), 0:.Nat) (mem, argv_ptr_a);
    atoi (argv_load_a#.ff, argv_load_a#.tt, atoi_cont_a)
};

// CHECK-DAG: main _{{[0-9_]+}}::[mem_[[memId:[0-9_]+]]: %mem.M, (%Int 4294967296), argv_{{[0-9]+}}: %mem.Ptr («⊤:.Nat; %mem.Ptr («⊤:.Nat; (%Int 256)», 0:.Nat)», 0:.Nat), return_[[returnId:[0-9_]+]]: .Cn [%mem.M, (%Int 4294967296)]] = {

// CHECK-DAG: atoi_cont_a_[[aContId:[0-9_]+]] _{{[0-9_]+}}::[mem_{{[0-9]+}}: %mem.M, a_[[aId:[0-9_]+]]: (%Int 4294967296)]

// CHECK-DAG: atoi_cont_b_[[bContId:[0-9_]+]] _{{[0-9_]+}}::[mem_{{[0-9]+}}: %mem.M, b_[[bId:[0-9_]+]]: (%Int 4294967296)]
// CHECK-DAG: _[[shrLshr:[0-9_]+]]: (%Int 4294967296) = %core.shr.lshr 4294967296:.Nat (a_[[aId]], b_[[bId]]);
// CHECK-DAG: _{{[0-9]+}}: ⊥:★ = return_{{[0-9]+}} (mem_{{[0-9]+}}, _[[shrLshr]]);
