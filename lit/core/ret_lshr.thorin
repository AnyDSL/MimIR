// RUN: rm -f %t.ll
// RUN: %thorin %s --output-ll %t.ll -o - | FileCheck %s
// RUN: clang %t.ll -o %t -Wno-override-module
// RUN: %t 2 1 ; test $? -eq 1
// RUN: %t 16 3 ; test $? -eq 2

.plugin core;

.ccon atoi [%mem.M, %mem.Ptr («⊤:.Nat; .I8», 0), .Cn [%mem.M, .I32]];

.con .extern main [mem : %mem.M, argc : .I32, argv : %mem.Ptr («⊤:.Nat; %mem.Ptr («⊤:.Nat; .I8», 0)», 0), return : .Cn [%mem.M, .I32]] = {
    .con atoi_cont_a [mem : %mem.M, a : .I32] = {
        .con atoi_cont_b [mem : %mem.M, b : .I32] = {
                return (mem, %core.shr.l (a, b))
        };

        .let argv_ptr_b = %mem.lea (⊤:.Nat, ‹⊤:.Nat; %mem.Ptr («⊤:.Nat; .I8», 0)›, 0) (argv, 2I32);
        .let argv_load_b = %mem.load (mem, argv_ptr_b);
        atoi (argv_load_b#.ff, argv_load_b#.tt, atoi_cont_b)
    };

    .let argv_ptr_a = %mem.lea (⊤:.Nat, ‹⊤:.Nat; %mem.Ptr («⊤:.Nat; .I8», 0)›, 0) (argv, 1I32);
    .let argv_load_a = %mem.load (mem, argv_ptr_a);
    atoi (argv_load_a#.ff, argv_load_a#.tt, atoi_cont_a)
};

// CHECK-DAG: main _{{[0-9_]+}}::[mem_[[memId:[0-9_]+]]: %mem.M, .I32, argv_{{[0-9]+}}: %mem.Ptr («⊤:.Nat; %mem.Ptr («⊤:.Nat; .I8», 0)», 0), return_[[returnId:[0-9_]+]]: .Cn [%mem.M, .I32]]{{(@.*)?}}= {

// CHECK-DAG: atoi_cont_a_[[aContId:[0-9_]+]] _{{[0-9_]+}}::[mem_{{[0-9]+}}: %mem.M, a_[[aId:[0-9_]+]]: .I32]

// CHECK-DAG: atoi_cont_b_[[bContId:[0-9_]+]] _{{[0-9_]+}}::[mem_{{[0-9]+}}: %mem.M, b_[[bId:[0-9_]+]]: .I32]
// CHECK-DAG: %core.shr.l .i32 (a_[[aId]], b_[[bId]])
