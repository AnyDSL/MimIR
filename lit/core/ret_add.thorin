// RUN: rm -f %t.ll ; \
// RUN: %thorin %s --output-ll %t.ll --output-thorin - | FileCheck %s
// RUN: clang %t.ll -o %t -Wno-override-module
// RUN: %t 1 2 ; test $? -eq 3
// RUN: %t 4 5 ; test $? -eq 9

.import core;
.import mem;

.lam atoi: .Cn [%mem.M, %mem.Ptr («⊤:.Nat; %Int 256», 0:.Nat), .Cn [%mem.M, %Int 4294967296]];

.lam .extern main: .Cn [mem : %mem.M, argc : %Int 4294967296, argv : %mem.Ptr («⊤:.Nat; %mem.Ptr («⊤:.Nat; %Int 256», 0:.Nat)», 0:.Nat), return : .Cn [%mem.M, %Int 4294967296]] = {
    0: (%Int 2),

    .lam atoi_cont_a: .Cn [mem : %mem.M, a : %Int 4294967296] = {
        .ff,
        .lam atoi_cont_b: .Cn [mem : %mem.M, b : %Int 4294967296] = {
            .ff,
            return (mem, %core.wrap.add (0, 4294967296) (a, b))
        };

        .let argv_ptr_b = %mem.lea (⊤:.Nat, ‹⊤:.Nat; %mem.Ptr («⊤:.Nat; %Int 256», 0:.Nat)›, 0:.Nat) (argv, 2:(%Int 4294967296));
        .let argv_load_b = %mem.load (%mem.Ptr («⊤:.Nat; %Int 256», 0:.Nat), 0:.Nat) (mem, argv_ptr_b);
        atoi (argv_load_b#.ff, argv_load_b#.tt, atoi_cont_b)
    };

    .let argv_ptr_a = %mem.lea (⊤:.Nat, ‹⊤:.Nat; %mem.Ptr («⊤:.Nat; %Int 256», 0:.Nat)›, 0:.Nat) (argv, 1:(%Int 4294967296));
    .let argv_load_a = %mem.load (%mem.Ptr («⊤:.Nat; %Int 256», 0:.Nat), 0:.Nat) (mem, argv_ptr_a);
    atoi (argv_load_a#.ff, argv_load_a#.tt, atoi_cont_a)
};

// CHECK-DAG: main: .Cn [%mem.M, (%Int 4294967296), %mem.Ptr («⊤:.Nat; %mem.Ptr («⊤:.Nat; (%Int 256)», 0:.Nat)», 0:.Nat), .Cn [%mem.M, (%Int 4294967296)]], @(_[[memId:[0-9]+]], _[[argcId:[0-9]+]], _{{[0-9]+}}, _[[returnId:[0-9]+]]) = {

// CHECK-DAG: atoi_cont_a_[[aContId:[0-9]+]]: .Cn [%mem.M, (%Int 4294967296)], @(_{{[0-9]+}}, _[[aId:[0-9]+]])

// CHECK-DAG: atoi_cont_b_[[bContId:[0-9]+]]: .Cn [%mem.M, (%Int 4294967296)], @(_{{[0-9]+}}, _[[bId:[0-9]+]])
// CHECK-DAG: _[[wrapAdd:[0-9]+]]: (%Int 4294967296) = %core.wrap.add (0:.Nat, 4294967296:.Nat) (_[[aId]], _[[bId]]);
// CHECK-DAG: _{{[0-9]+}}: ⊥:★ = _{{[0-9]+}} (_{{[0-9]+}}, _[[wrapAdd]]);
